<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-25T22:25:26+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cloud Native Journey</title><subtitle>Software Engineer/Architect</subtitle><author><name>Jaeguk Yun</name></author><entry><title type="html"></title><link href="http://localhost:4000/2023-04-16-install-lua/" rel="alternate" type="text/html" title="" /><published>2023-04-25T22:25:26+09:00</published><updated>2023-04-25T22:25:26+09:00</updated><id>http://localhost:4000/2023-04-16-install-lua</id><content type="html" xml:base="http://localhost:4000/2023-04-16-install-lua/"><![CDATA[<h2 id="lua-설치---사전준비">lua 설치 - 사전준비</h2>
<p>사전에 compiler가 설치되어 있어야 합니다.
Compiler가 설치되어 있지 않는 경우 다음을 실행합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo yum update -y
yum groupinstall -y 'Development Tools'
</code></pre></div></div>
<h2 id="lua-설치">lua 설치</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-R</span> <span class="nt">-O</span> http://www.lua.org/ftp/lua-5.4.4.tar.gz
<span class="nb">tar </span>zxf lua-5.4.4.tar.gz
<span class="nb">cd </span>lua-5.4.4
make all <span class="nb">test</span>
</code></pre></div></div>

<h2 id="lua-cli-실행">lua cli 실행</h2>
<p>lua를 실행하고 Hello World를 출력합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/lua
str = "Hello World"
print(str)
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author></entry><entry><title type="html">Redis 시작하기 - PubSub - springboot</title><link href="http://localhost:4000/cache/pub-sub/" rel="alternate" type="text/html" title="Redis 시작하기 - PubSub - springboot" /><published>2023-04-23T00:00:00+09:00</published><updated>2023-04-23T00:00:00+09:00</updated><id>http://localhost:4000/cache/pub-sub</id><content type="html" xml:base="http://localhost:4000/cache/pub-sub/"><![CDATA[<p>Redis에서 Pub/Sub을 지원합니다. 특정 topic에 메시지를 전송하는 것을 Springboot을 이용하여 구현하는 것을 알아봅니다.</p>

<h2 id="applicationyml-설정">application.yml 설정</h2>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">main.allow-circular-references</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">redis-cluster</span>
  <span class="na">redis</span><span class="pi">:</span>
     <span class="na">topic</span><span class="pi">:</span> <span class="s">${MY_TOPIC:topic1}</span>
</code></pre></div></div>
<h2 id="chatmessage-model">ChatMessage Model</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ToString</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatMessage</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">sender</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">context</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="chatmessage-dto">ChatMessage Dto</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ToString</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatMessageDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">sender</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">context</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="subscribe-serivce">Subscribe Serivce</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisSubService</span> <span class="kd">implements</span> <span class="nc">MessageListener</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
    	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"받은 메시지 = {}, body={}, pattern:{}"</span><span class="o">,</span> <span class="n">message</span><span class="o">,</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">getBody</span><span class="o">()),</span>  <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">pattern</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="redis-configuration">Redis Configuration</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.topic}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">topicName</span><span class="o">;</span>

     <span class="o">:</span>
    <span class="c1">//리스너어댑터 설정</span>
    <span class="nd">@Bean</span>
    <span class="nc">MessageListenerAdapter</span> <span class="nf">messageListenerAdapter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MessageListenerAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">RedisSubService</span><span class="o">());</span>
    <span class="o">}</span>
    
    <span class="c1">//컨테이너 설정</span>
    <span class="nd">@Bean</span>
    <span class="nc">RedisMessageListenerContainer</span> <span class="nf">redisContainer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">RedisMessageListenerContainer</span> <span class="n">container</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisMessageListenerContainer</span><span class="o">();</span>
        <span class="n">container</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">());</span>
        <span class="n">container</span><span class="o">.</span><span class="na">addMessageListener</span><span class="o">(</span><span class="n">messageListenerAdapter</span><span class="o">(),</span> <span class="n">topic</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">container</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//pub/sub 토픽 설정</span>
    <span class="nd">@Bean</span>
    <span class="nc">ChannelTopic</span> <span class="nf">topic</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ChannelTopic</span><span class="o">(</span><span class="n">topicName</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="publish-service">Publish Service</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisPubService</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.topic}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">topicName</span><span class="o">;</span>
	
	<span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">(</span><span class="nc">ChatMessage</span> <span class="n">chatMessage</span><span class="o">)</span> <span class="o">{</span>
    	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"topicName:{}, Chat Message:{}"</span><span class="o">,</span> <span class="n">topicName</span><span class="o">,</span> <span class="n">chatMessage</span><span class="o">);</span>
    	<span class="k">try</span> <span class="o">{</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">topicName</span><span class="o">,</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">chatMessage</span><span class="o">));</span>
    	<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">JsonProcessingException</span> <span class="n">jpe</span><span class="o">)</span> <span class="o">{</span>
    		<span class="n">jpe</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    	<span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="controller">Controller</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PubSubController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisPubService</span> <span class="n">redisPubService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/api/chat"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">pubSub</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ChatMessageDto</span> <span class="n">chatMessageDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//메시지 보내기</span>
    	<span class="nc">ChatMessage</span> <span class="n">chatMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChatMessage</span><span class="o">();</span>
    	<span class="nc">BeanUtils</span><span class="o">.</span><span class="na">copyProperties</span><span class="o">(</span><span class="n">chatMessageDto</span><span class="o">,</span> <span class="n">chatMessage</span><span class="o">);</span>
    	<span class="n">redisPubService</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">chatMessage</span><span class="o">);</span>

      <span class="k">return</span> <span class="s">"success"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="springboot" /><summary type="html"><![CDATA[Redis에서 Pub/Sub을 지원합니다. 특정 topic에 메시지를 전송하는 것을 Springboot을 이용하여 구현하는 것을 알아봅니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - Usecases - Pre Loading a Lua Script into Redis With Lettuce</title><link href="http://localhost:4000/cache/preload-lua-script/" rel="alternate" type="text/html" title="Redis 시작하기 - Usecases - Pre Loading a Lua Script into Redis With Lettuce" /><published>2023-04-22T00:00:00+09:00</published><updated>2023-04-22T00:00:00+09:00</updated><id>http://localhost:4000/cache/preload-lua-script</id><content type="html" xml:base="http://localhost:4000/cache/preload-lua-script/"><![CDATA[<p>양상추를 사용하여 redis에 대해 루아 스크립트를 실행하는 것을 우리는 매번 인수와 함께 전체 스크립트 redis가 원자 적으로 실행될 것를 보냈습니다. 매우 작은 스크립트의 경우 문제가 될 것 같지 않지만 EVALSHA를 사용하여이를 수행하는 더 효율적인 방법이 있습니다 .</p>

<h2 id="evalsha">EVALSHA</h2>
<p>evalsha 없이 lua 스크립트를 실행한다는 것은 이미 다룬 것처럼 매번 스크립트와 인수를 보낸다는 것을 의미합니다:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli <span class="nb">eval</span> <span class="s2">"return redis.call('set',KEYS[1],ARGV[1],'ex',ARGV[2])"</span> 1 foo1 bar1 10
OK
</code></pre></div></div>
<p>SCRIPT LOAD를 사용하면 redis에 “이것은 내 스크립트입니다, 기억하십시오”라고 말한 다음 EVALSHA를 사용하여 redis가 기억하는 스크립트를 실행할 수 있습니다. 예를 들어 CLI를 사용하면 다음과 같습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli
<span class="o">&gt;</span> SCRIPT LOAD <span class="s2">"return redis.call('set',KEYS[1],ARGV[1],'ex',ARGV[2])"</span>
<span class="s2">"cf4df3d8eb7f521ceb285c6870e5713d79e2bb0b"</span>

<span class="o">&gt;</span> evalsha cf4df3d8eb7f521ceb285c6870e5713d79e2bb0b 1 foo1 bar1 10
OK

</code></pre></div></div>
<p>다음과 같은 쉘 스크립트로 작동하는지 확인할 수 있습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ SHA</span><span class="o">=</span><span class="si">$(</span>redis-cli script load <span class="s2">"return redis.call('set',KEYS[1],ARGV[1],'ex',ARGV[2])"</span><span class="si">)</span>
<span class="nv">$ </span>redis-cli evalsha <span class="s2">"</span><span class="nv">$SHA</span><span class="s2">"</span> 1 foo1 bar1 10<span class="p">;</span> redis-cli ttl foo1<span class="p">;</span> redis-cli get foo1      
OK
<span class="o">(</span>integer<span class="o">)</span> 10
<span class="s2">"bar1"</span>
</code></pre></div></div>
<p>스크립트의 해시 [sha1 hash, 더 구체적으로 말하면]를 참조하여 전체 스크립트를 보낼 필요가 없습니다. 실제로 로드하는 스크립트의 크기에 관계없이 스크립트를 나타내는 해시의 크기는 컴팩트하게 유지됩니다.</p>

<h2 id="evalsha-with-lettuce">EVALSHA with Lettuce</h2>
<p>Lettuce를 곁들인 EVALSHA는 우리가 원한다면 거의 같은 방식으로 작동 할 수 있습니다. 스크립트를 로드하고 반환 된 해시를 사용했습니다 [SHA1 해시는 16 진수 문자열로 표시됩니다] :</p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="Lua" /><summary type="html"><![CDATA[양상추를 사용하여 redis에 대해 루아 스크립트를 실행하는 것을 우리는 매번 인수와 함께 전체 스크립트 redis가 원자 적으로 실행될 것를 보냈습니다. 매우 작은 스크립트의 경우 문제가 될 것 같지 않지만 EVALSHA를 사용하여이를 수행하는 더 효율적인 방법이 있습니다 .]]></summary></entry><entry><title type="html">Redis 시작하기 - Usecases - Leaderboard</title><link href="http://localhost:4000/cache/usecases-leaderboard/" rel="alternate" type="text/html" title="Redis 시작하기 - Usecases - Leaderboard" /><published>2023-04-22T00:00:00+09:00</published><updated>2023-04-22T00:00:00+09:00</updated><id>http://localhost:4000/cache/usecases-leaderboard</id><content type="html" xml:base="http://localhost:4000/cache/usecases-leaderboard/"><![CDATA[<p>LUA 스크립팅의 효율적인 방법으로 수행 할 수 있는 사례에 사용될 수 사례를 살펴봅니다.
여기에는 Redis zset에 유지되는 리더 보드가 있으며, 현재 사용 사례를 위해 주어진 사용자의 경우 해당 사용자의 순위와 리더 보드에서 사용자의 주변의 rank를 얻을 수도 있습니다.</p>

<p><img src="/assets/images/cache/30-cache-leaderboard.png" alt="locked" /></p>

<p>아래의 2 개의 명령이 연속적으로 수행했을 때 정확한 결과를 가져오는가?</p>

<ul>
  <li>첫 번째는 Zrank Leaderboard Heather를 사용하여 사용자 순위를 얻습니다</li>
  <li>그런 다음 위의 순위를 사용하여 하위 및 상한을 얻으려면 아래에서 3을, 아래 3 개를 원한다고 가정 해 봅시다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6383&gt; zadd leaderboard 10 Andrew 20 Bella 30 Andy 33 Dolly 40 Cathy 42 Heather 43 Gilbert 45 Lilly 50  Dinesh 58 <span class="s2">"Jon snow"</span> 60 Ygnitte
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6383&gt; zrange leaderboard 0 <span class="nt">-1</span>
 1<span class="o">)</span> <span class="s2">"Andrew"</span>
 2<span class="o">)</span> <span class="s2">"Bella"</span>
 3<span class="o">)</span> <span class="s2">"Andy"</span>
 4<span class="o">)</span> <span class="s2">"Dolly"</span>
 5<span class="o">)</span> <span class="s2">"Cathy"</span>
 6<span class="o">)</span> <span class="s2">"Heather"</span>
 7<span class="o">)</span> <span class="s2">"Gilbert"</span>
 8<span class="o">)</span> <span class="s2">"Lilly"</span>
 9<span class="o">)</span> <span class="s2">"Dinesh"</span>
10<span class="o">)</span> <span class="s2">"Jon snow"</span>
11<span class="o">)</span> <span class="s2">"Ygnitte"</span>
127.0.0.1:6383&gt; zrank leaderboard Heather
<span class="o">(</span>integer<span class="o">)</span> 5
127.0.0.1:6383&gt; zrange leaderboard 2 8
1<span class="o">)</span> <span class="s2">"Andy"</span>
2<span class="o">)</span> <span class="s2">"Dolly"</span>
3<span class="o">)</span> <span class="s2">"Cathy"</span>
4<span class="o">)</span> <span class="s2">"Heather"</span>
5<span class="o">)</span> <span class="s2">"Gilbert"</span>
6<span class="o">)</span> <span class="s2">"Lilly"</span>
7<span class="o">)</span> <span class="s2">"Dinesh"</span>
</code></pre></div></div>

<p>그러나 리더 보드는 zrank와 zrange Redis 명령어를 실행하는 사이에 순위가 변경 될 수 있습니다.
이를 해결하기 위한 솔루션 중 하나는 사용자의 순위를 얻기 전에 일종의 lock 장치를 사용한 다음 zrange를 사용한 다음 lock을 제거하는 것입니다. 그리고 이전에, 리더 보드에 쓰고, 우리는 lock을 점검해야하며, lock 장치가 있으면 lock 장치가 제거 될 때까지 재 시도해야합니다.</p>

<p><img src="/assets/images/cache/29-cache-locked.png" alt="locked" /></p>

<p>유스 케이스를 처리하는 우아한 방법은 LUA 스크립트를 사용하는 것입니다
Redis는 서버에서 LUA 스크립트를 업로드하고 실행할 수 있으며 스크립트가 서버에서 실행되기 때문에 스크립트에서 데이터를 읽고 쓰는 것이 매우 효율적입니다.
또한 Redis는 스크립트의 원자(Atomic) 실행을 보장합니다. 스크립트를 실행하는 동안 전체 런타임 중에 모든 서버의 명령이 차단됩니다.</p>

<p>간단한 LUA 스크립트를 작성하여 어떻게 문제를 해결할 수 있는지 보자.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">local </span>rank <span class="o">=</span> redis.call<span class="o">(</span><span class="s1">'zrank'</span>, KEYS[1], KEYS[2]<span class="o">)</span>
<span class="nb">local </span>min <span class="o">=</span> math.max<span class="o">(</span>rank - ARGV[1], 0<span class="o">)</span>
<span class="nb">local </span>max <span class="o">=</span> rank + ARGV[1]
<span class="nb">local </span>ldb <span class="o">=</span> redis.call<span class="o">(</span><span class="s1">'zrange'</span>, KEYS[1], min, max<span class="o">)</span>
<span class="nb">local </span>results <span class="o">=</span> <span class="o">{}</span>

results[<span class="s1">'rank'</span><span class="o">]</span> <span class="o">=</span> tostring<span class="o">(</span>rank + 1<span class="o">)</span>
results[<span class="s1">'item'</span><span class="o">]</span> <span class="o">=</span> ldb

<span class="nb">local </span>vars <span class="o">=</span> cjson.encode<span class="o">(</span>results<span class="o">)</span>
<span class="k">return </span>vars
</code></pre></div></div>

<p>| member | score | rank |
— — — — — — — — — — —
| member_1 | 50 | 1 |
| member_2 | 50 | 1 |
| member_3 | 30 | 3 |
| member_4 | 30 | 3 |
| member_5 | 10 | 5 |</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; zadd test-leaderboard 9 user1
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; zadd test-leaderboard 5 user2
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; zadd test-leaderboard 5 user3
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; zadd test-leaderboard 3 user4
<span class="o">(</span>integer<span class="o">)</span> 1

127.0.0.1:6379&gt; zrank test-leaderboard user2
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; zrank test-leaderboard user3
<span class="o">(</span>integer<span class="o">)</span> 2

127.0.0.1:6379&gt; ZSCORE test-leaderboard user3
<span class="s2">"5"</span>
127.0.0.1:6379&gt; ZRANGEBYSCORE test-leaderboard 5 5 LIMIT 0 1
1<span class="o">)</span> <span class="s2">"user2"</span>
127.0.0.1:6379&gt; ZRANK test-leaderboard user2
<span class="o">(</span>integer<span class="o">)</span> 1

127.0.0.1:6379&gt; ZADD test-leaderboard 5 user2
127.0.0.1:6379&gt; ZADD test-ranks 5 5

EVAL <span class="s2">"local score = redis.call('ZSCORE', KEYS[1], ARGV[1]) </span><span class="se">\n</span><span class="s2"> return redis.call('ZRANK', KEYS[2], score)"</span> 2 test-leaderboard test-ranks user2
<span class="o">(</span>integer<span class="o">)</span> 1
</code></pre></div></div>

<p>스크립트를 한 줄로 보면</p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="jupyter" /><summary type="html"><![CDATA[LUA 스크립팅의 효율적인 방법으로 수행 할 수 있는 사례에 사용될 수 사례를 살펴봅니다. 여기에는 Redis zset에 유지되는 리더 보드가 있으며, 현재 사용 사례를 위해 주어진 사용자의 경우 해당 사용자의 순위와 리더 보드에서 사용자의 주변의 rank를 얻을 수도 있습니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - Redis vs Memcached</title><link href="http://localhost:4000/cache/redis-mencache/" rel="alternate" type="text/html" title="Redis 시작하기 - Redis vs Memcached" /><published>2023-04-21T00:00:00+09:00</published><updated>2023-04-21T00:00:00+09:00</updated><id>http://localhost:4000/cache/redis-mencache</id><content type="html" xml:base="http://localhost:4000/cache/redis-mencache/"><![CDATA[<p>redis와 Memcached를 비교합니다.</p>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>Redis</th>
      <th>Memcached</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>특징</td>
      <td>메모리 DB</td>
      <td>고성능 분산 캐시 서버</td>
    </tr>
    <tr>
      <td>저장방식</td>
      <td>메모리 캐시 및 스토리지</td>
      <td>메모리</td>
    </tr>
    <tr>
      <td>지원 데이터 타입</td>
      <td>다양한 데이터 타입지원<br />String/List/Hashes/Set/Sorted Set</td>
      <td>String key/value만 지원</td>
    </tr>
    <tr>
      <td>키목록 조죄</td>
      <td>모든 키목록</td>
      <td>모든 키 목록 지원 않음</td>
    </tr>
    <tr>
      <td>복제</td>
      <td>Primary/replica</td>
      <td>복제 지원 않음</td>
    </tr>
    <tr>
      <td>클러스터</td>
      <td>클러스터 지원</td>
      <td>Not support</td>
    </tr>
    <tr>
      <td>Pub/Sub</td>
      <td>Pub/Sub model 지원</td>
      <td>Not support</td>
    </tr>
    <tr>
      <td>Script</td>
      <td>LUA Script 지원</td>
      <td>Not support</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="mencached" /><summary type="html"><![CDATA[redis와 Memcached를 비교합니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - Lua 스크립트 등록 및 실행</title><link href="http://localhost:4000/cache/run-lua-on-redis-cli/" rel="alternate" type="text/html" title="Redis 시작하기 - Lua 스크립트 등록 및 실행" /><published>2023-04-21T00:00:00+09:00</published><updated>2023-04-21T00:00:00+09:00</updated><id>http://localhost:4000/cache/run-lua-on-redis-cli</id><content type="html" xml:base="http://localhost:4000/cache/run-lua-on-redis-cli/"><![CDATA[<p>스크립팅을 사용하면 Redis 내에서 복잡한 작업을 실행할 수 있습니다.<br />
Redis 스크립트를 사용하면 제어 구조와 같은 프로그래밍 도구를 사용할 수 있으며 거의 ​​모든 Redis 명령에 액세스 할 수 있습니다.</p>

<p>그렇다면 왜 명령을 직접 실행하여 또는 응용 프로그램 자체에서 Redis 스크립트를 사용합니까?</p>
<ul>
  <li>작업이 Redis Cache 서버에서 직접 실행되 성능이 크게 증가합니다.</li>
  <li>Logic은  Redis 서버에서 직접 적재되고, 분산되어 있는 여러 응용프로그램에서 사용가능.</li>
  <li>atomic하게 실행되므로 스크립트가 실행중인 동안 동시에 다른 서버가 해당 스크립트를 실행 하는 것을 방지 함.</li>
</ul>

<p>Lua는 Redis 스크립팅의 언어입니다. LUA 언어는 단순성과 간결함을 제공하므로 스크립팅 작업에 효과적인 언어입니다.</p>

<p>그러나 스크립트가 모든 경우에 적합하지는 않습니다. Redis 서버는 스크긴트가 실행되는 동안 다른 작업을 차단하기 때문에 로직이 긴 스크립트는 실제로 성능에 영향을 미칠 수 있습니다.</p>

<p>Lua 스크립트를 작성하고, 스크립트를 등록하고 Caching하여 실행하거나, EVAL 명령어로 script를 직접 실행하는 방법들이 있습니다.</p>
<h2 id="lua-script-등록-방법">Lua Script 등록 방법</h2>

<ul>
  <li>CLI로 등록
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>script.lua | redis-cli <span class="nt">-x</span> script load
</code></pre></div>    </div>
  </li>
  <li>script load  명령어
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; script load <span class="s2">"redis.call('SET', KEYS[1], ARGV[1])"</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="lua-script-실행방법">Lua Script 실행방법</h2>
<h4 id="redis-cli">redis-cli</h4>

<p>Sample 데이터</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; hmset hkeys key:1 value:1 key:2 value:2 key:3 value:3 key:4 value:4 key:5 value:5 key:6 value:6
127.0.0.1:6379&gt; zadd order 1 key:3 2 key:1 3 key:2
</code></pre></div></div>

<p>redis-cli -p 6383 eval “$(cat scriptfile)” keynum keys argv</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">--</span> example01.lua
redis.call<span class="o">(</span><span class="s1">'SET'</span>, KEYS[1], ARGV[1]<span class="o">)</span>
</code></pre></div></div>
<p>예시 1</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli <span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>example01.lua<span class="si">)</span><span class="s2">"</span> 1 key1 value
</code></pre></div></div>

<p>예시 2</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">--</span> example02.lua
<span class="nb">local </span>order <span class="o">=</span> redis.call<span class="o">(</span><span class="s1">'zrange'</span>, KEYS[1], 0, <span class="nt">-1</span><span class="o">)</span><span class="p">;</span> <span class="k">return </span>redis.call<span class="o">(</span><span class="s1">'hmget'</span>,KEYS[2], unpack<span class="o">(</span>order<span class="o">))</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">SHA</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat </span>example02.lua |redis-cli <span class="nt">-p</span> 6383 <span class="nt">-x</span> script load<span class="si">)</span>
redis-cli <span class="nt">-p</span> 6383 evalsha <span class="s2">"</span><span class="nv">$SHA</span><span class="s2">"</span> 2 order hkeys
</code></pre></div></div>

<h4 id="redis-서버">redis 서버</h4>
<p>기본 Redis 스크립트는 EVAL 명령을 사용하여 실행할 수 있습니다. 명령은 Redis에서 직접 스크립트를 실행합니다</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; EVAL <span class="s2">"return 'Hello, world!'"</span>
127.0.0.1:6379&gt; EVAL <span class="s2">"redis.call('SET', KEYS[1], ARGV[1])"</span> 1 key1 <span class="s2">"Example Value"</span>

127.0.0.1:6379&gt; hmset hkeys key:1 value:1 key:2 value:2 key:3 value:3 key:4 value:4 key:5 value:5 key:6 value:6
127.0.0.1:6379&gt; zadd order 1 key:3 2 key:1 3 key:2
127.0.0.1:6379&gt; <span class="nb">eval</span> <span class="s2">"local order = redis.call(‘zrange’, KEYS[1], 0, -1); return redis.call(‘hmget’,KEYS[2],unpack(order));"</span> 2 order hkeys
</code></pre></div></div>

<p>EVALSHA <your_script_sha> 1 key argv</your_script_sha></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; script load <span class="s2">"redis.call('SET', KEYS[1], ARGV[1])"</span> 
fcd2612e1ca113b83fdfbc2a88493d3b231a32ad

127.0.0.1:6379&gt; EVALSHA fcd2612e1ca113b83fdfbc2a88493d3b231a32ad 1 key1 test1
127.0.0.1:6379&gt; get key1
</code></pre></div></div>

<h2 id="참조">참조</h2>
<p><a href="https://hsg2510.tistory.com/category/Lua%20Script">Hong’s Programing World</a><br />
<a href="https://www.lua.org/manual/5.4/">Lua manual</a><br />
<a href="https://www.freecodecamp.org/news/a-quick-guide-to-redis-lua-scripting/">freeCodeCamp</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="lua" /><summary type="html"><![CDATA[스크립팅을 사용하면 Redis 내에서 복잡한 작업을 실행할 수 있습니다. Redis 스크립트를 사용하면 제어 구조와 같은 프로그래밍 도구를 사용할 수 있으며 거의 ​​모든 Redis 명령에 액세스 할 수 있습니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - Lua 에서 return String, List, JSON 형식으로 받기.</title><link href="http://localhost:4000/cache/return-list-using-lua/" rel="alternate" type="text/html" title="Redis 시작하기 - Lua 에서 return String, List, JSON 형식으로 받기." /><published>2023-04-21T00:00:00+09:00</published><updated>2023-04-21T00:00:00+09:00</updated><id>http://localhost:4000/cache/return-list-using-lua</id><content type="html" xml:base="http://localhost:4000/cache/return-list-using-lua/"><![CDATA[<p>Springboot Lettuce기반 Lua를 호출하여 결과값을 List 받는 방법을 공유합니다.
Lua를 를 이용해서 Boolean, Long 타입은 별다른 어려움없이 응답을 받을 수 있습니다. 그러나 String이나 List같은 경우는 RedisTemplate 기본 설정으로는 결과를 받을 수 없고 다음과 같은 오류를 만나게 될 것입니다. 이것은 GenericJackson2JsonRedisSerializer에서 byte[]를 deserialization을 하지 못해서 발생하는 에러입니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>com.fasterxml.jackson.core.JsonParseException: Unrecognized token <span class="s1">'test'</span>: was expecting <span class="o">(</span>JSON String, Number, Array, Object or token <span class="s1">'null'</span>, <span class="s1">'true'</span> or <span class="s1">'false'</span><span class="o">)</span>
 at <span class="o">[</span>Source: <span class="o">(</span>byte[]<span class="o">)</span><span class="s2">"test"</span><span class="p">;</span> line: 1, column: 5]
	at com.fasterxml.jackson.core.JsonParser._constructError<span class="o">(</span>JsonParser.java:2391<span class="o">)</span> ~[jackson-core-2.13.5.jar!/:2.13.5]
</code></pre></div></div>

<p>그래서 다음과 같은 방법으로 해결이 가능하며, Lua를 통해서 JSON, String, List등을 반환값으로 받을 수 있습니다.</p>

<ul>
  <li>GenericJackson2JsonRedisSerializer에서 extends</li>
  <li>deserialize를 overriding</li>
</ul>

<p>GenericJackson2JsonRedisSerializer를 extention하여 overriding하는 소스는 다음과 같습니다. GenericJackson2JsonRedisSerializer를 CustomJackson2JsonRedisSerializer로 변경하면 Lua에서 반환값을 다양하게 받을 수 있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.serializer.SerializationException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.lang.Nullable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.util.Assert</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomJackson2JsonRedisSerializer</span> <span class="kd">extends</span> <span class="nc">GenericJackson2JsonRedisSerializer</span> <span class="o">{</span>
	<span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
	<span class="cm">/**
	 * @param source can be {@literal null}.
	 * @param type must not be {@literal null}.
	 * @return {@literal null} for empty source.
	 * @throws SerializationException
	 */</span>
	<span class="nd">@Nullable</span>
	<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">deserialize</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">source</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SerializationException</span> <span class="o">{</span>
		<span class="no">T</span> <span class="n">clazz</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="k">try</span> <span class="o">{</span>
			
			<span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">type</span><span class="o">,</span>
					<span class="s">"Deserialization type must not be null! Please provide Object.class to make use of Jackson2 default typing."</span><span class="o">);</span>

			<span class="k">if</span> <span class="o">(</span><span class="nc">Objects</span><span class="o">.</span><span class="na">isNull</span><span class="o">(</span><span class="n">source</span><span class="o">))</span> <span class="o">{</span>
				<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
			<span class="o">}</span>

			<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Source:{}, class:{}"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">source</span><span class="o">),</span> <span class="n">type</span><span class="o">);</span>
			<span class="n">clazz</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">source</span><span class="o">),</span> <span class="n">type</span><span class="o">);</span>
			<span class="k">return</span> <span class="n">clazz</span><span class="o">;</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">SerializationException</span><span class="o">(</span><span class="s">"Could not read JSON: "</span> <span class="o">+</span> <span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">ex</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="redis-configuration">Redis Configuration</h4>
<p>RedisTemplate Value Serializer에 CustomJackson2JsonRedisSerializer를 설정합니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">(</span><span class="nc">RedisConnectionFactory</span> <span class="n">redisConnectionFactory</span><span class="o">){</span>
    		<span class="nc">CustomJackson2JsonRedisSerializer</span> <span class="n">customJackson2JsonRedisSerializer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CustomJackson2JsonRedisSerializer</span><span class="o">();</span>
    	
        <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisTemplate</span><span class="o">&lt;&gt;();</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">);</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setValueSerializer</span><span class="o">(</span><span class="n">customJackson2JsonRedisSerializer</span><span class="o">);</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setDefaultSerializer</span><span class="o">(</span><span class="n">customJackson2JsonRedisSerializer</span><span class="o">);</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setHashKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setHashValueSerializer</span><span class="o">(</span><span class="n">customJackson2JsonRedisSerializer</span><span class="o">);</span>   
        
        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
    <span class="o">}</span> 
</code></pre></div></div>
<h4 id="leaderboard-lua">leaderboard Lua</h4>
<p>Lua 예제는 다음과 같습니다.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- leaderboard.lua </span>
<span class="kd">local</span> <span class="n">rank</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s1">'zrank'</span><span class="p">,</span> <span class="n">KEYS</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">KEYS</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="kd">local</span> <span class="n">min</span> <span class="o">=</span> <span class="nb">math.max</span><span class="p">(</span><span class="n">rank</span> <span class="o">-</span> <span class="n">ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">max</span> <span class="o">=</span> <span class="n">rank</span> <span class="o">+</span> <span class="n">ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="kd">local</span> <span class="n">ldb</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s1">'zrange'</span><span class="p">,</span> <span class="n">KEYS</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">min</span><span class="p">,</span> <span class="n">max</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">results</span> <span class="o">=</span> <span class="p">{}</span>

<span class="n">results</span><span class="p">[</span><span class="s1">'rank'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">tostring</span><span class="p">(</span><span class="n">rank</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">results</span><span class="p">[</span><span class="s1">'item'</span><span class="p">]</span> <span class="o">=</span> <span class="n">ldb</span>

<span class="kd">local</span> <span class="n">vars</span> <span class="o">=</span> <span class="n">cjson</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>

<span class="k">return</span> <span class="n">vars</span>
</code></pre></div></div>

<h4 id="redis에-적용하기">redis에 적용하기</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>leaderboard.lua | redis-cli <span class="nt">-x</span> script load
<span class="s2">"60e0429ac3aed8dbb3abfeb4fb2d13dde103d575"</span>

 127.0.0.1:6379&gt; evalsha <span class="s2">"60e0429ac3aed8dbb3abfeb4fb2d13dde103d575"</span> 2 leaderboard Heather 3
<span class="s2">"{</span><span class="se">\"</span><span class="s2">item</span><span class="se">\"</span><span class="s2">:[</span><span class="se">\"</span><span class="s2">Andy</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Dolly</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Cathy</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Heather</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Gilbert</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Lilly</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Dinesh</span><span class="se">\"</span><span class="s2">],</span><span class="se">\"</span><span class="s2">rank</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">6</span><span class="se">\"</span><span class="s2">}"</span>
</code></pre></div></div>
<h4 id="redistemplate--lettuce를-이용">RedisTemplate &amp; Lettuce를 이용</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">retrieveLeaderBoard</span><span class="o">(</span><span class="nc">LeaderBoardReqVO</span> <span class="n">leaderBoardReqVO</span><span class="o">)</span> <span class="o">{</span>
    	<span class="nc">DefaultRedisScript</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisScript</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultRedisScript</span><span class="o">&lt;&gt;();</span>
    	<span class="nc">Resource</span> <span class="n">resource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathResource</span><span class="o">(</span><span class="n">leaderBoard</span><span class="o">);</span>
    	<span class="n">redisScript</span><span class="o">.</span><span class="na">setScriptSource</span><span class="o">(</span><span class="k">new</span> <span class="nc">ResourceScriptSource</span><span class="o">(</span><span class="n">resource</span><span class="o">));</span>
    	<span class="n">redisScript</span><span class="o">.</span><span class="na">setResultType</span><span class="o">(</span><span class="nc">Object</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"retrieveLeaderBoard:{}"</span><span class="o">,</span> <span class="n">leaderBoardReqVO</span><span class="o">);</span>
    	<span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[]</span> <span class="o">{</span><span class="n">leaderBoardReqVO</span><span class="o">.</span><span class="na">getUser</span><span class="o">()};</span>
    	<span class="nc">Object</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">redisScript</span><span class="o">,</span>  <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">leaderBoardReqVO</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">leaderBoardReqVO</span><span class="o">.</span><span class="na">getUser</span><span class="o">()),</span> <span class="n">leaderBoardReqVO</span><span class="o">.</span><span class="na">getCount</span><span class="o">());</span>
    	
    	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"retrieveLeaderBoard ret:{}"</span><span class="o">,</span> <span class="n">ret</span><span class="o">);</span>
    	
    	<span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<h2 id="swagger-ui에서-호출">Swagger UI에서 호출</h2>

<p><img src="/assets/images/cache/31-cache-leaderboard-swagger.png" alt="m1s1-r1s2-r3s3" /></p>

<p>[수행결과과]<br />
<img src="/assets/images/cache/32-cache-result-leaderboard.png" alt="m1s1-r1s2-r3s3" /></p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="Lua" /><summary type="html"><![CDATA[Springboot Lettuce기반 Lua를 호출하여 결과값을 List 받는 방법을 공유합니다. Lua를 를 이용해서 Boolean, Long 타입은 별다른 어려움없이 응답을 받을 수 있습니다. 그러나 String이나 List같은 경우는 RedisTemplate 기본 설정으로는 결과를 받을 수 없고 다음과 같은 오류를 만나게 될 것입니다. 이것은 GenericJackson2JsonRedisSerializer에서 byte[]를 deserialization을 하지 못해서 발생하는 에러입니다.]]></summary></entry><entry><title type="html">Springboot기반 Redis @Transactional 어노테이션 사용</title><link href="http://localhost:4000/springboot/springboot-redis-transactional/" rel="alternate" type="text/html" title="Springboot기반 Redis @Transactional 어노테이션 사용" /><published>2023-04-18T00:00:00+09:00</published><updated>2023-04-18T00:00:00+09:00</updated><id>http://localhost:4000/springboot/springboot-redis-transactional</id><content type="html" xml:base="http://localhost:4000/springboot/springboot-redis-transactional/"><![CDATA[<h2 id="transactional">@Transactional</h2>
<p>Springboot 기반 Redis를 사용할 때 @Tranactional 사용하여 commit 과 rollback 을 처리할 수 있습니다.
rollback 은 exception을 throw하면 redis cache에 데이터가 저장되지 않습니다.<br />
PlatformTransactionManager를 Bean으로 등록되어 있고, 메소드에 @tranactional 어노테이션이 있고,메소드 로직에 @redisTemplate을 사용하고 있다면 이는 트랜잭션으로 처리되어, 예외(Exception)가 발생하면 데이터베이스에 처리했던 작업이 rollback 되고, 또한 로직에서 Redis에 저장했던 데이터 또한 저장되지 않고 rollback 됩니다.</p>

<p><strong>@Transactional</strong> 어노테이션이 있을때, Redis는 메서드 시작시 transaction 시작으로 <strong>MULTI</strong>, 메서드 종료시 transaction 커밋으로 <strong>EXEC</strong> 명령어를 실행하는 것으로 구현하고 있습니다. 만약 Exception이 발생하면 <strong>DISCARD</strong> 가 실행됩니다.</p>

<h2 id="redis-환경설정">Redis 환경설정</h2>
<p>Redis를 @Transaction 어노테이션과 함께 사용하고 싶을 때는 3가지 방법이 있습니다.</p>
<ul>
  <li>자바의 database configuration에 PlatformTransactionManager를 Bean으로 등록 사용</li>
  <li>자바의 Redis Configuration에 PlatformTransactionManager를 Bean으로 등록</li>
  <li>RedisTemplate 단독으로 사용하고 있다면 @EnableTransactionManagement 어노테이션 추가</li>
</ul>

<h4 id="java-database-configuration-사용---예시">java database configuration 사용 - 예시</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:/application.properties"</span><span class="o">)</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DatabaseConfiguration</span> <span class="o">{</span>
<span class="o">...</span>
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">PlatformTransactionManager</span> <span class="nf">transactionManager</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="redis-configuration-사용---예제">Redis Configuration 사용 - 예제</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="o">{</span>

  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">RedisTemplate</span><span class="o">&lt;?,</span> <span class="o">?&gt;</span> <span class="n">redisTemplate</span><span class="o">(</span><span class="nc">RedisConnectionFactory</span> <span class="n">redisConnectionFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[],</span> <span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisTemplate</span><span class="o">&lt;&gt;();</span>
    <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">);</span>
    <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setEnableTransactionSupport</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// redis Transaction On !</span>
    <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Bean</span> <span class="c1">// 만약 PlatformTransactionManager 등록이 안되어 있다면 해야함, 되어있다면 할 필요 없음</span>
  <span class="kd">public</span> <span class="nc">PlatformTransactionManager</span> <span class="nf">transactionManager</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
      <span class="c1">// 사용하고 있는 datasource 관련 내용, 아래는 JDBC</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">datasource</span><span class="o">());</span> 

    <span class="c1">// JPA 사용하고 있다면 아래처럼 사용하고 있음</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">JpaTransactionManager</span><span class="o">(</span><span class="n">entityManagerFactory</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="redistemplate-단독으로-사용---예제">RedisTemplate 단독으로 사용 - 예제</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableTransactionManagement</span>                                 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisTxContextConfiguration</span> <span class="o">{</span>

  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">StringRedisTemplate</span> <span class="nf">redisTemplate</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">StringRedisTemplate</span> <span class="n">template</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringRedisTemplate</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">());</span>
    <span class="c1">// explicitly enable transaction support</span>
    <span class="n">template</span><span class="o">.</span><span class="na">setEnableTransactionSupport</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>              
    <span class="k">return</span> <span class="n">template</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">PlatformTransactionManager</span> <span class="nf">transactionManager</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">();</span>   
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="참조">참조</h2>
<p><a href="https://sabarada.tistory.com/178">사바라다는 차곡차곡</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="springboot" /><summary type="html"><![CDATA[@Transactional Springboot 기반 Redis를 사용할 때 @Tranactional 사용하여 commit 과 rollback 을 처리할 수 있습니다. rollback 은 exception을 throw하면 redis cache에 데이터가 저장되지 않습니다. PlatformTransactionManager를 Bean으로 등록되어 있고, 메소드에 @tranactional 어노테이션이 있고,메소드 로직에 @redisTemplate을 사용하고 있다면 이는 트랜잭션으로 처리되어, 예외(Exception)가 발생하면 데이터베이스에 처리했던 작업이 rollback 되고, 또한 로직에서 Redis에 저장했던 데이터 또한 저장되지 않고 rollback 됩니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - Redis with Lua</title><link href="http://localhost:4000/cache/redis-with-lua/" rel="alternate" type="text/html" title="Redis 시작하기 - Redis with Lua" /><published>2023-04-18T00:00:00+09:00</published><updated>2023-04-18T00:00:00+09:00</updated><id>http://localhost:4000/cache/redis-with-lua</id><content type="html" xml:base="http://localhost:4000/cache/redis-with-lua/"><![CDATA[<h2 id="lua">lua</h2>
<p>Lua는 달을 뜻하는 포르투갈어이며 1993년 브라질에서 처음 개발되었으며, light-weight하며 이식성이 좋은 스크립트 언어입니다.</p>

<p><strong>Lua 스크립트는 다음과 같은 특징</strong> 이 있습니다.</p>
<ul>
  <li>대소 문자를 구분</li>
  <li>다른 스크립트 언어처럼 변수 형을 선언하지 않음</li>
  <li>변수 명의 첫글자는 영문 또는 _(언더스코어)로 시작</li>
  <li>예약어는 다음과 같습니다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>and / <span class="nb">break</span> / <span class="k">do</span> / <span class="k">else</span> / elseif / end / <span class="nb">false</span> / <span class="k">for</span> /function / <span class="k">if</span> / <span class="k">in</span> / <span class="nb">local</span> / nil / not / or / repeat / <span class="k">then</span> / <span class="nb">true</span> /until / <span class="k">while</span> 
</code></pre></div>    </div>
  </li>
  <li>local 키워드를 사용하여 전역변수와 지역변수를 구분하고, 지역변수 사용을 권고</li>
  <li>배열의 인덱스는 1부터 시작</li>
</ul>

<p><strong>Lua 스크립트는 다음과 같은 장점</strong> 을 가집니다.</p>

<ul>
  <li>Pipelining처럼, 여러 명령을 한 번의 request/response만으로 수행할 수 있습니다.</li>
  <li>원하는 함수를 redis에서 지원하고 있지 않더라도 lua 스크립트로 대체 가능합니다.(반환되는 값 count, 반환되는 value 모두 더하기 등)</li>
  <li>스크립트를 재활용할 수도 있습니다</li>
  <li>그래픽 시뮬레이션을 위한 스크립트언어로 개발되었기 때문에 타 스크립트언어보다 빠른 성능을 제공합니다.</li>
  <li>자바처럼 가비지 컬렉션을 제공하기 때문에 사용하지 않는 변수를 제거하기 위해 별도의 처리가 필요없습니다. 가비스 컬렉션 대상으로 만들려면 변수에 nil을 할당하면 됩니다.</li>
</ul>

<h4 id="redis-and-lua">Redis and Lua</h4>
<ul>
  <li>Redis에서는 2.6부터 Lua 5.1 버전을 지원하기 시작</li>
  <li>eval 명령어로 Redis에 전송하여 실행</li>
  <li>Lua 스크립트를 script load 명령을 이용하여 Redis 서버에 등록하여 Cache하여 사용가능</li>
  <li>Redis 에서 Lua 스크립트를 실행할 때 파라메터를 입력받을 수 있다.</li>
  <li>Lua 스크립트에서 Redis 명령을 사용가능</li>
  <li>Redis에서 실행되는 Lua 스크립트는 Atomic으로 처리된다. 즉 스크립트가 실행되는 동안 다른 Redis 명령이 실행되지 못한다.</li>
  <li>lua-time-limit : Lua 스크립트가 수행될 때 최대 시간을 밀리초 단위로 설정한다. 해당 시간이 지나면 SCRIPT KILL 명령을 이용해서 Lua 스크립트를 중지 할 수 있게 된다. 기본값은  50000(0.0005 초)
    <ul>
      <li>0 이나 음수를 입력하면 스크립트 제한 시간이 없음.</li>
      <li>Lua 스크립트가 수행되고 lua-time-limit 설정값이 되기 전에 SCRIPT KILL 명령을 수행해도 중지되지 않음.</li>
      <li>무한 loop Lua 스크립트가 수행되고 있을 때 다른 세션에서는 다음과 같은 메시지가 출력됨 <br />
<strong>BUSY Redis is busy running a script. You can only call SCRIPT KILL or SHUTDOWN NOSAVE</strong></li>
    </ul>
  </li>
</ul>

<h2 id="lua-script-사용-명령어">Lua Script 사용 명령어</h2>
<p>Redis에서 lua script를 실행하기 위해 <a href="https://redis.io/commands/eval/">eval</a> 명령어는 다음과 같습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s2">"script"</span> 키개수 <span class="o">[</span>KEY1,KEY2,...] <span class="o">[</span>ARGV1,ARGV2,...]

<span class="c"># 예시</span>
<span class="nb">eval</span> “redis.call<span class="o">(</span>‘set’, KEYS[1], ARGV[1]<span class="o">)</span>” 1 key:name value
</code></pre></div></div>
<p><strong>eval</strong> : lua script를 실행하기 위한 예약어. Required.<br />
<strong>script</strong> : Redis에서 실행하기 위한 lua script 입니다. Required<br />
<strong>키개수</strong> : 파라메터로 입력 받을 키(KEYS)의 개수 입니다. 이는 뒤에 추가적으로 붙을 선택 인자들 중 몇 개가 key인지를 lua가 알 수 있도록 하기 위함입니다. 키가 없는 경우 키의 개수는 0으로 입력합니다. Required<br />
<strong>KEYS</strong> : 키개수 다음으로 오는 파라메터로 키개수 만큼 파라메터를 입력합니다. 그러면 lua는 KEYS 배열에 바인딩됩니다</p>

<ul>
  <li>0 이면  KEYS 파라메터가 없는 script입니다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s1">'return "Hello World"'</span> 0
</code></pre></div>    </div>
  </li>
  <li>1 이면  =&gt; 1 KEY1</li>
  <li>2 이면  =&gt; 2 KEY1 KEY2</li>
  <li>3 이면  =&gt; 3 KEY1 KEY2 KEY3
LUA에서 ARGV 테이블로 사용할 수있는 키 다음에 여러개의 인수를 제공 할 수 있습니다.
Lua Script에서는 index가 1부터 시작하며, ARGV table은 KEYS[1], KEYS[2], KEYS[3] 이렇게 참조합니다.<br />
의
<strong>ARGV</strong> : ARGV는 lua에서 가변적으로 입력받을 수 있는 파라메터입니다. 인자 [ARGV …]는 각각 lua에서 사용할 수 있도록 ARGV 배열에 바인팅 됩니다.<br />
ARGV table도 lua에서는 1부터 시작하며, ARGV table은 ARGV[1], ARGV[2], ARGV[3] 이렇게 참조합니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s2">"return { KEYS[1], KEYS[2], KEYS[3], ARGV[1], ARGV[2]}"</span> 3 k1 k2 k3 arg1 arg2

<span class="c"># 결과</span>
1<span class="o">)</span> <span class="s2">"k1"</span> 
2<span class="o">)</span> <span class="s2">"k2"</span>
3<span class="o">)</span> <span class="s2">"k3"</span>
4<span class="o">)</span> <span class="s2">"arg1"</span>
5<span class="o">)</span> <span class="s2">"arg2"</span>
</code></pre></div></div>
<h2 id="eval">eval</h2>
<p>Redis에서 Lua를 사용하여 eval로 Hello World를 출력할 수 있습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s1">'return "Hello World"'</span> 0
</code></pre></div></div>

<p>예제 2</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s1">'return string.format("Hi %s", KEYS[1])'</span> 1 jaeguk
</code></pre></div></div>

<p>예제 3</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s1">'return string.format("key1 is %s, key2 is %s", KEYS[1],KEYS[2])'</span> 2 age score
</code></pre></div></div>
<h2 id="lua-script-load">lua script load</h2>
<p>아래와 같은 lua script를 redis-cli로 load시 반환값으로 출력되는 sha값으로 lua를 실행할 수 도 있습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">local </span>current <span class="o">=</span> redis.call<span class="o">(</span><span class="s1">'zrangebyscore'</span>, KEYS[1], ARGV[1], ARGV[2], <span class="s1">'LIMIT'</span>, ARGV[3], ARGV[4]<span class="o">)</span>
<span class="k">if</span> <span class="o">(</span>current <span class="o">==</span> nil or current <span class="o">==</span> <span class="s1">''</span><span class="o">)</span> <span class="k">then
    return</span> <span class="s2">"failed"</span>
<span class="k">else
    for </span>i, mem <span class="k">in </span>pairs<span class="o">(</span>current<span class="o">)</span> <span class="k">do
        </span>redis.call<span class="o">(</span><span class="s1">'zincrby'</span>, KEYS[1], 1, mem<span class="o">)</span>
        <span class="k">return </span>current
    end
end
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>ex01.lua | redis-cli <span class="nt">-x</span> script load

<span class="c"># 출력결과</span>
<span class="s2">"d57be6feffc53b0a7096b8a5d1c802c04ebc139e"</span>

</code></pre></div></div>
<p>redis-cli를 redis에 접속하여 다음과 같이 실행할 수 있습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; zadd <span class="nb">users</span>:point 0 jason
127.0.0.1:6379&gt; zadd <span class="nb">users</span>:point 10 mason 20 jane

127.0.0.1:6379&gt; evalsha d57be6feffc53b0a7096b8a5d1c802c04ebc139e 1 <span class="nb">users</span>:point <span class="nt">-inf</span> inf 0
</code></pre></div></div>

<h2 id="redis-명령어-호출방법">redis 명령어 호출방법</h2>
<p>아래 두 개의 lua 함수를 사용하여, lua script에서 redis 명령을 호출할 수 있습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis.call<span class="o">()</span>
redis.pcall<span class="o">()</span>
</code></pre></div></div>

<h2 id="lua-예제">Lua 예제</h2>
<p>Key 등록</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; sadd kstar:info:age 25
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; sadd kstar:info:joinday <span class="s2">"2022.11.17"</span>
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; sadd kstar:info:siteid job academy campstudy
<span class="o">(</span>integer<span class="o">)</span> 3
127.0.0.1:6379&gt; sadd kstar:info:lastloginday <span class="s2">"2023.01.02"</span>
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; sadd kstar:info:sex M
<span class="o">(</span>integer<span class="o">)</span> 1
sadd kstar:info:totallogincount 54
</code></pre></div></div>
<p>Key 목록 조회하기</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; <span class="nb">eval</span> <span class="s1">'local members = redis.call("keys", "kstar:info:*") local results = {} for index,key in ipairs(members) do results[index] = key end return results'</span>  0
1<span class="o">)</span> <span class="s2">"kstar:info:lastloginday"</span>
2<span class="o">)</span> <span class="s2">"kstar:info:sex"</span>
3<span class="o">)</span> <span class="s2">"kstar:info:totallogincount"</span>
4<span class="o">)</span> <span class="s2">"kstar:info:age"</span>
5<span class="o">)</span> <span class="s2">"kstar:info:siteid"</span>
6<span class="o">)</span> <span class="s2">"kstar:info:joinday"</span>
</code></pre></div></div>

<p>Key 값에 대한 Value 를 조회</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s1">'local members = redis.call("keys", "kstar:info:*") local results = {} for index,key in ipairs(members) do results[index] = redis.call("smembers", key) end return results '</span> 0
1<span class="o">)</span> 1<span class="o">)</span> <span class="s2">"2023.01.02"</span>
2<span class="o">)</span> 1<span class="o">)</span> <span class="s2">"M"</span>
3<span class="o">)</span> 1<span class="o">)</span> <span class="s2">"54"</span>
4<span class="o">)</span> 1<span class="o">)</span> <span class="s2">"25"</span>
5<span class="o">)</span> 1<span class="o">)</span> <span class="s2">"job"</span>
   2<span class="o">)</span> <span class="s2">"campstudy"</span>
   3<span class="o">)</span> <span class="s2">"academy"</span>
6<span class="o">)</span> 1<span class="o">)</span> <span class="s2">"2022.11.17"</span>
</code></pre></div></div>
<p>Key 값에 대한 Value 를 조회하여 key =&gt; value 형으로 출력</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s2">"local members = redis.call('keys', 'kstar:info:*') local results = {} for index, key in ipairs(members) do results[index] = key ..'=&gt;'.. unpack(redis.call('smembers', key)) end return results "</span> 0
1<span class="o">)</span> <span class="s2">"kstar:info:lastloginday=&gt;2023.01.02"</span>
2<span class="o">)</span> <span class="s2">"kstar:info:sex=&gt;M"</span>
3<span class="o">)</span> <span class="s2">"kstar:info:totallogincount=&gt;54"</span>
4<span class="o">)</span> <span class="s2">"kstar:info:age=&gt;25"</span>
5<span class="o">)</span> <span class="s2">"kstar:info:siteid=&gt;job"</span>
6<span class="o">)</span> <span class="s2">"kstar:info:joinday=&gt;2022.11.17"</span>
</code></pre></div></div>
<h2 id="참고">참고</h2>
<p><a href="https://code-factory.tistory.com/13">코드공장</a><br />
<a href="https://luran.me/381">everydayminder</a><br />
<a href="http://www.w3big.com/ko/redis/sorted-sets-zrangebyscore.html#gsc.tab=0">Redis 코스</a><br />
<a href="https://planbs.tistory.com/entry/Redis-Eval">PlanB의 백엔드 엔지니어링</a><br />
<a href="https://bstar36.tistory.com/category/%EA%B8%B0%ED%83%80%20DBMS/Redis?page=5">멋지게 놀아라라</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="lua" /><summary type="html"><![CDATA[lua Lua는 달을 뜻하는 포르투갈어이며 1993년 브라질에서 처음 개발되었으며, light-weight하며 이식성이 좋은 스크립트 언어입니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - RediSearch</title><link href="http://localhost:4000/cache/installl-redisearch-on-docker/" rel="alternate" type="text/html" title="Redis 시작하기 - RediSearch" /><published>2023-04-17T00:00:00+09:00</published><updated>2023-04-17T00:00:00+09:00</updated><id>http://localhost:4000/cache/installl-redisearch-on-docker</id><content type="html" xml:base="http://localhost:4000/cache/installl-redisearch-on-docker/"><![CDATA[<h2 id="redisearch-소개">RediSearch 소개</h2>
<p>Redis는 다음과 같이 key/value 형식으로 조회가 가능합니다.</p>
<ul>
  <li>set user1 value1 GET user1</li>
  <li>HSET user1 name jaeguk HGETALL user1 name</li>
</ul>

<p>그러나 아래와 같이 SQL의 WHERE 절의 Parameters 처럼 조회는 지원하지 않습니다.</p>
<ul>
  <li>GET users WHERE name=”jaeguk”</li>
  <li>GET users WHERE name like “jae%”</li>
</ul>

<p>위한 같이 <strong>SQL과 유사한 기능</strong>  사용할 슈 있게 지원하는 것이 RediSearch 솔루션입니다.<br />
RediSearch 는 다믐의 기능을 지원합니다.</p>
<ul>
  <li>Secondary index over</li>
  <li>Full-text engine</li>
  <li>Incremental indexing</li>
  <li>Multi-field queries</li>
  <li>AND OR NOT complex Boolean queries</li>
  <li>Numeric filters and ranges</li>
  <li>Data Aggregation</li>
  <li>Auto-complete suggestions</li>
  <li>Geo Indexing and filtering</li>
</ul>

<h2 id="redisearch-실습환경-구성">RediSearch 실습환경 구성</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">--name</span> redis-stack-server <span class="nt">-p</span> 6379:6379 redis/redis-stack-server
</code></pre></div></div>

<h2 id="인덱스-생성">인덱스 생성</h2>
<p>FT.CREATE 명령을 사용하여 필드와 인덱스를 생성합니다(기본 가중치는 1.0).</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; FT.CREATE myIdx ON HASH PREFIX 1 doc: SCHEMA title TEXT WEIGHT 5.0 body TEXT url TEXT
OK
</code></pre></div></div>

<p>doc:xx 접두사가 있는 키가 있는 기존 해시 문서는 이때 자동으로 인덱스에 추가됩니다.</p>

<h2 id="documents-추가">documents 추가</h2>

<p>색인을 만든 후 doc: 접두사가 있는 새 해시 문서는 생성 시 자동으로 색인이 생성됩니다.</p>

<p>HSET 명령을 사용하여 새 해시 문서를 만들고 인덱스에 추가합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; HSET doc:1 title <span class="s2">"hello world"</span> body <span class="s2">"lorem ipsum"</span> url <span class="s2">"http://redis.io"</span>
<span class="o">(</span>integer<span class="o">)</span> 3
</code></pre></div></div>

<h2 id="색인index-검색">색인(index) 검색</h2>
<p>특정 단어가 포함된 문서의 색인을 검색하려면 FT.SEARCH 명령을 사용하십시오.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; FT.SEARCH myIdx <span class="s2">"hello world"</span> LIMIT 0 10
1<span class="o">)</span> <span class="o">(</span>integer<span class="o">)</span> 1
2<span class="o">)</span> <span class="s2">"doc:1"</span>
3<span class="o">)</span> 1<span class="o">)</span> <span class="s2">"title"</span>
   2<span class="o">)</span> <span class="s2">"hello world"</span>
   3<span class="o">)</span> <span class="s2">"body"</span>
   4<span class="o">)</span> <span class="s2">"lorem ipsum"</span>
   5<span class="o">)</span> <span class="s2">"url"</span>
   6<span class="o">)</span> <span class="s2">"http://redis.io"</span>
</code></pre></div></div>

<h2 id="색인index-삭제">색인(index) 삭제</h2>
<p>연관된 해시 문서를 삭제하지 않고 색인을 제거하려면 DD 옵션 없이 FT.DROPINDEX를 실행하십시오.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; FT.DROPINDEX myIdx
OK
</code></pre></div></div>

<p>인덱스 및 모든 인덱스 해시 문서를 삭제하려면 명령에 DD 옵션을 추가합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; FT.SUGGET autocomplete <span class="s2">"he"</span>
1<span class="o">)</span> <span class="s2">"hello world"</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="redisearch" /><summary type="html"><![CDATA[RediSearch 소개 Redis는 다음과 같이 key/value 형식으로 조회가 가능합니다. set user1 value1 GET user1 HSET user1 name jaeguk HGETALL user1 name]]></summary></entry></feed>