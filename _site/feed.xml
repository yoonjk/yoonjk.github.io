<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-01T10:12:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cloud Native Journey</title><subtitle>Software Engineer/Architect</subtitle><author><name>Jaeguk Yun</name></author><entry><title type="html"></title><link href="http://localhost:4000/2023-04-16-install-lua/" rel="alternate" type="text/html" title="" /><published>2023-05-01T10:12:08+09:00</published><updated>2023-05-01T10:12:08+09:00</updated><id>http://localhost:4000/2023-04-16-install-lua</id><content type="html" xml:base="http://localhost:4000/2023-04-16-install-lua/"><![CDATA[<h2 id="lua-설치---사전준비">lua 설치 - 사전준비</h2>
<p>사전에 compiler가 설치되어 있어야 합니다.
Compiler가 설치되어 있지 않는 경우 다음을 실행합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo yum update -y
yum groupinstall -y 'Development Tools'
</code></pre></div></div>
<h2 id="lua-설치">lua 설치</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-R</span> <span class="nt">-O</span> http://www.lua.org/ftp/lua-5.4.4.tar.gz
<span class="nb">tar </span>zxf lua-5.4.4.tar.gz
<span class="nb">cd </span>lua-5.4.4
make all <span class="nb">test</span>
</code></pre></div></div>

<h2 id="lua-cli-실행">lua cli 실행</h2>
<p>lua를 실행하고 Hello World를 출력합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/lua
str = "Hello World"
print(str)
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author></entry><entry><title type="html">Lua Script 및 Redis7 FUNCTION</title><link href="http://localhost:4000/cache/lua-example/" rel="alternate" type="text/html" title="Lua Script 및 Redis7 FUNCTION" /><published>2023-04-30T00:00:00+09:00</published><updated>2023-04-30T00:00:00+09:00</updated><id>http://localhost:4000/cache/lua-example</id><content type="html" xml:base="http://localhost:4000/cache/lua-example/"><![CDATA[<p>Lua를 이용하여 Redis에 있는 데이터를 월별 합계를 계산하거나, from ~ to 기간을 입력받아 합계를 계산할 수 도 있습니다.</p>

<p>다음은 그 예시입니다.</p>

<h2 id="초기-데이터-로드">초기 데이터 로드</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; hmset SiteID:TotalCnt 20180101 10 20180102 2 20180103 5 20180120 10 20180131 30 20180205 20 20180210 5 20180331 23 20181230 1230 20190130 130 20190301 310 20200102 10 20200215 30 20200503 15 20200601 40 20200801 45 20200909 500 20201015 70 20201117 60 20201220 45 20220115 10 20220212 51 20220301 80 20220405 2 20220505 25 20220606 60 20220717 70 20220815 80 20220903 90 20221009 100 20221101 110 20221225 120 20230120 10 20230222 20 20230313 30 20230414 40 20230501 50<span class="s2">"
</span></code></pre></div></div>

<h2 id="lua-script">Lua script</h2>
<h4 id="월별합계">월별합계</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-- summon.lua
local key, mon = KEYS[1], ARGV[1]
local subkey
local sumkey, keyval= 0

for i = 1,31 do
    if i &lt; 10 then 
        subkey = mon .. '0' .. tostring(i)
    else 
        subkey = mon .. tostring(i)
    end

    keyval = tonumber(redis.call('hget',key,subkey))

    if keyval ~= nil then
        sumkey = sumkey + keyval
    end
end

return sumkey
</code></pre></div></div>
<h4 id="lua-function-days-of-month">lua FUNCTION days-of-month</h4>
<p>Redis 7 부터 지원하는 FUNCTION을 이용하여 월별 마지막 달을 구하는 Redis FUNCTION 입니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!lua name=mylib</span>
<span class="nt">--</span> get_days_in_month
<span class="nb">local </span><span class="k">function </span>get_days_in_month <span class="o">(</span>keys, args<span class="o">)</span>
  <span class="nb">local </span>year <span class="o">=</span> tonumber<span class="o">(</span>keys[1]<span class="o">)</span>
  <span class="nb">local </span>month <span class="o">=</span> tonumber<span class="o">(</span>args[1]<span class="o">)</span>
  <span class="nb">local </span><span class="nv">days_in_month</span><span class="o">=</span> <span class="o">{</span> 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 <span class="o">}</span>
  <span class="nb">local </span>days <span class="o">=</span> days_in_month[month]

  <span class="k">if</span> <span class="o">(</span>month <span class="o">==</span> 2<span class="o">)</span> <span class="k">then
    if</span> <span class="o">(</span>math.mod<span class="o">(</span>year,4<span class="o">)</span> <span class="o">==</span> 0<span class="o">)</span> <span class="k">then
      if</span> <span class="o">(</span>math.mod<span class="o">(</span>year,100<span class="o">)</span> <span class="o">==</span> 0<span class="o">)</span><span class="k">then
        if</span> <span class="o">(</span>math.mod<span class="o">(</span>year,400<span class="o">)</span> <span class="o">==</span> 0<span class="o">)</span> <span class="k">then
          </span>days <span class="o">=</span> 29
        end
      <span class="k">else
        </span>days <span class="o">=</span> 29
     end
    end
  end

  <span class="k">return </span>days
end

redis.register_function<span class="o">(</span><span class="s1">'get_days_in_month'</span>, get_days_in_month<span class="o">)</span>
</code></pre></div></div>

<h4 id="redis-function-등록">Redis FUNCTION 등록</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>day_of_month.lua | redis-cli <span class="nt">-p</span> 6383 <span class="nt">-x</span> FUNCTION LOAD REPLACE
</code></pre></div></div>

<h4 id="redis-function-호출">Redis FUNCTION 호출</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6383&gt; FCALL get_days_in_month 1 2020 2
127.0.0.1:6383&gt; FCALL get_days_in_month 1 2022 2
127.0.0.1:6383&gt; FCALL get_days_in_month 1 2023 2
127.0.0.1:6383&gt; FCALL get_days_in_month 1 2023 4
</code></pre></div></div>

<h2 id="참조">참조</h2>
<p><a href="https://bstar36.tistory.com/348">멋지게 놀아라</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="lua" /><summary type="html"><![CDATA[Lua를 이용하여 Redis에 있는 데이터를 월별 합계를 계산하거나, from ~ to 기간을 입력받아 합계를 계산할 수 도 있습니다.]]></summary></entry><entry><title type="html">maven에서 jdk 버전이 변경되지 않는 경우</title><link href="http://localhost:4000/springboot/change-jdk11-to-maven/" rel="alternate" type="text/html" title="maven에서 jdk 버전이 변경되지 않는 경우" /><published>2023-04-28T00:00:00+09:00</published><updated>2023-04-28T00:00:00+09:00</updated><id>http://localhost:4000/springboot/change-jdk11-to-maven</id><content type="html" xml:base="http://localhost:4000/springboot/change-jdk11-to-maven/"><![CDATA[<p>jdk1.8 에서 jdk11로 전환하여 개발을 하는 경우 jdk는 11로 변경되었지만 maven은 여전히 jdk1.8로 빌드를 하는 경우 다음과 같이 추가합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi <span class="nv">$HOME</span>/.mavenrc

<span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="si">$(</span>/usr/libexec/java_home <span class="nt">-v</span> 110<span class="si">)</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="quickfix" /><summary type="html"><![CDATA[jdk1.8 에서 jdk11로 전환하여 개발을 하는 경우 jdk는 11로 변경되었지만 maven은 여전히 jdk1.8로 빌드를 하는 경우 다음과 같이 추가합니다. ```bash vi $HOME/.mavenrc]]></summary></entry><entry><title type="html">VS Code에서 사용하거나 사용하지 않는 import 클래스 단축키로 일용등록/삭제.</title><link href="http://localhost:4000/springboot/quick-fix/" rel="alternate" type="text/html" title="VS Code에서 사용하거나 사용하지 않는 import 클래스 단축키로 일용등록/삭제." /><published>2023-04-28T00:00:00+09:00</published><updated>2023-04-28T00:00:00+09:00</updated><id>http://localhost:4000/springboot/quick-fix</id><content type="html" xml:base="http://localhost:4000/springboot/quick-fix/"><![CDATA[<p>맥북 개발자가 springboot기반으로 개발환경을 사용할 때 자동 import 를 하거나 사용하지 않는 Class가 import되어 있는 것이 있을 때 이를 단축키로 자동으로 제거하는 명렁어는
<strong>Shift + alt(option) + o</strong> 를 동시에 누르면 Never used 로 되어 있는 import 클래스를 삭제해줍니다.</p>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="quickfix" /><summary type="html"><![CDATA[맥북 개발자가 springboot기반으로 개발환경을 사용할 때 자동 import 를 하거나 사용하지 않는 Class가 import되어 있는 것이 있을 때 이를 단축키로 자동으로 제거하는 명렁어는 Shift + alt(option) + o 를 동시에 누르면 Never used 로 되어 있는 import 클래스를 삭제해줍니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - PubSub - springboot</title><link href="http://localhost:4000/cache/pub-sub/" rel="alternate" type="text/html" title="Redis 시작하기 - PubSub - springboot" /><published>2023-04-23T00:00:00+09:00</published><updated>2023-04-23T00:00:00+09:00</updated><id>http://localhost:4000/cache/pub-sub</id><content type="html" xml:base="http://localhost:4000/cache/pub-sub/"><![CDATA[<p>Redis에서 Pub/Sub을 지원합니다. 특정 topic에 메시지를 전송하는 것을 Springboot을 이용하여 구현하는 것을 알아봅니다.</p>

<h2 id="applicationyml-설정">application.yml 설정</h2>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">main.allow-circular-references</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">redis-cluster</span>
  <span class="na">redis</span><span class="pi">:</span>
     <span class="na">topic</span><span class="pi">:</span> <span class="s">${MY_TOPIC:topic1}</span>
</code></pre></div></div>
<h2 id="chatmessage-model">ChatMessage Model</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ToString</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatMessage</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">sender</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">context</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="chatmessage-dto">ChatMessage Dto</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ToString</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatMessageDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">sender</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">context</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="subscribe-serivce">Subscribe Serivce</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisSubService</span> <span class="kd">implements</span> <span class="nc">MessageListener</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
    	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"받은 메시지 = {}, body={}, pattern:{}"</span><span class="o">,</span> <span class="n">message</span><span class="o">,</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">getBody</span><span class="o">()),</span>  <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">pattern</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="redis-configuration">Redis Configuration</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.topic}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">topicName</span><span class="o">;</span>

     <span class="o">:</span>
    <span class="c1">//리스너어댑터 설정</span>
    <span class="nd">@Bean</span>
    <span class="nc">MessageListenerAdapter</span> <span class="nf">messageListenerAdapter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MessageListenerAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">RedisSubService</span><span class="o">());</span>
    <span class="o">}</span>
    
    <span class="c1">//컨테이너 설정</span>
    <span class="nd">@Bean</span>
    <span class="nc">RedisMessageListenerContainer</span> <span class="nf">redisContainer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">RedisMessageListenerContainer</span> <span class="n">container</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisMessageListenerContainer</span><span class="o">();</span>
        <span class="n">container</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">());</span>
        <span class="n">container</span><span class="o">.</span><span class="na">addMessageListener</span><span class="o">(</span><span class="n">messageListenerAdapter</span><span class="o">(),</span> <span class="n">topic</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">container</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//pub/sub 토픽 설정</span>
    <span class="nd">@Bean</span>
    <span class="nc">ChannelTopic</span> <span class="nf">topic</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ChannelTopic</span><span class="o">(</span><span class="n">topicName</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="publish-service">Publish Service</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisPubService</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.topic}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">topicName</span><span class="o">;</span>
	
	<span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">(</span><span class="nc">ChatMessage</span> <span class="n">chatMessage</span><span class="o">)</span> <span class="o">{</span>
    	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"topicName:{}, Chat Message:{}"</span><span class="o">,</span> <span class="n">topicName</span><span class="o">,</span> <span class="n">chatMessage</span><span class="o">);</span>
    	<span class="k">try</span> <span class="o">{</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">topicName</span><span class="o">,</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">chatMessage</span><span class="o">));</span>
    	<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">JsonProcessingException</span> <span class="n">jpe</span><span class="o">)</span> <span class="o">{</span>
    		<span class="n">jpe</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    	<span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="controller">Controller</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PubSubController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisPubService</span> <span class="n">redisPubService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/api/chat"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">pubSub</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ChatMessageDto</span> <span class="n">chatMessageDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//메시지 보내기</span>
    	<span class="nc">ChatMessage</span> <span class="n">chatMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChatMessage</span><span class="o">();</span>
    	<span class="nc">BeanUtils</span><span class="o">.</span><span class="na">copyProperties</span><span class="o">(</span><span class="n">chatMessageDto</span><span class="o">,</span> <span class="n">chatMessage</span><span class="o">);</span>
    	<span class="n">redisPubService</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">chatMessage</span><span class="o">);</span>

      <span class="k">return</span> <span class="s">"success"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="springboot" /><summary type="html"><![CDATA[Redis에서 Pub/Sub을 지원합니다. 특정 topic에 메시지를 전송하는 것을 Springboot을 이용하여 구현하는 것을 알아봅니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - Pre Loading a Lua Script into Redis With Lettuce</title><link href="http://localhost:4000/cache/preload-lua-script/" rel="alternate" type="text/html" title="Redis 시작하기 - Pre Loading a Lua Script into Redis With Lettuce" /><published>2023-04-22T00:00:00+09:00</published><updated>2023-04-22T00:00:00+09:00</updated><id>http://localhost:4000/cache/preload-lua-script</id><content type="html" xml:base="http://localhost:4000/cache/preload-lua-script/"><![CDATA[<p>양상추를 사용하여 redis에 대해 루아 스크립트를 실행하는 것을 우리는 매번 인수와 함께 전체 스크립트 redis가 원자 적으로 실행될 것를 보냈습니다. 매우 작은 스크립트의 경우 문제가 될 것 같지 않지만 EVALSHA를 사용하여이를 수행하는 더 효율적인 방법이 있습니다 .</p>

<h2 id="evalsha">EVALSHA</h2>
<p>evalsha 없이 lua 스크립트를 실행한다는 것은 이미 다룬 것처럼 매번 스크립트와 인수를 보낸다는 것을 의미합니다:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli <span class="nb">eval</span> <span class="s2">"return redis.call('set',KEYS[1],ARGV[1],'ex',ARGV[2])"</span> 1 foo1 bar1 10
OK
</code></pre></div></div>
<p>SCRIPT LOAD를 사용하면 redis에 “이것은 내 스크립트입니다, 기억하십시오”라고 말한 다음 EVALSHA를 사용하여 redis가 기억하는 스크립트를 실행할 수 있습니다. 예를 들어 CLI를 사용하면 다음과 같습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli
<span class="o">&gt;</span> SCRIPT LOAD <span class="s2">"return redis.call('set',KEYS[1],ARGV[1],'ex',ARGV[2])"</span>
<span class="s2">"cf4df3d8eb7f521ceb285c6870e5713d79e2bb0b"</span>

<span class="o">&gt;</span> evalsha cf4df3d8eb7f521ceb285c6870e5713d79e2bb0b 1 foo1 bar1 10
OK

</code></pre></div></div>
<p>다음과 같은 쉘 스크립트로 작동하는지 확인할 수 있습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ SHA</span><span class="o">=</span><span class="si">$(</span>redis-cli script load <span class="s2">"return redis.call('set',KEYS[1],ARGV[1],'ex',ARGV[2])"</span><span class="si">)</span>
<span class="nv">$ </span>redis-cli evalsha <span class="s2">"</span><span class="nv">$SHA</span><span class="s2">"</span> 1 foo1 bar1 10<span class="p">;</span> redis-cli ttl foo1<span class="p">;</span> redis-cli get foo1      
OK
<span class="o">(</span>integer<span class="o">)</span> 10
<span class="s2">"bar1"</span>
</code></pre></div></div>
<p>스크립트의 해시 [sha1 hash, 더 구체적으로 말하면]를 참조하여 전체 스크립트를 보낼 필요가 없습니다. 실제로 로드하는 스크립트의 크기에 관계없이 스크립트를 나타내는 해시의 크기는 컴팩트하게 유지됩니다.</p>

<h2 id="evalsha-with-lettuce">EVALSHA with Lettuce</h2>
<p>Lettuce를 곁들인 EVALSHA는 우리가 원한다면 거의 같은 방식으로 작동 할 수 있습니다. 스크립트를 로드하고 반환 된 해시를 사용했습니다 [SHA1 해시는 16 진수 문자열로 표시됩니다] :</p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="Lua" /><summary type="html"><![CDATA[양상추를 사용하여 redis에 대해 루아 스크립트를 실행하는 것을 우리는 매번 인수와 함께 전체 스크립트 redis가 원자 적으로 실행될 것를 보냈습니다. 매우 작은 스크립트의 경우 문제가 될 것 같지 않지만 EVALSHA를 사용하여이를 수행하는 더 효율적인 방법이 있습니다 .]]></summary></entry><entry><title type="html">Redis 시작하기 - Usecases - Leaderboard</title><link href="http://localhost:4000/cache/usecases-leaderboard/" rel="alternate" type="text/html" title="Redis 시작하기 - Usecases - Leaderboard" /><published>2023-04-22T00:00:00+09:00</published><updated>2023-04-22T00:00:00+09:00</updated><id>http://localhost:4000/cache/usecases-leaderboard</id><content type="html" xml:base="http://localhost:4000/cache/usecases-leaderboard/"><![CDATA[<p>LUA 스크립팅의 효율적인 방법으로 수행 할 수 있는 사례에 사용될 수 사례를 살펴봅니다.
여기에는 Redis zset에 유지되는 리더 보드가 있으며, 현재 사용 사례를 위해 주어진 사용자의 경우 해당 사용자의 순위와 리더 보드에서 사용자의 주변의 rank를 얻을 수도 있습니다.</p>

<p><img src="/assets/images/cache/30-cache-leaderboard.png" alt="locked" /></p>

<p>아래의 2 개의 명령이 연속적으로 수행했을 때 정확한 결과를 가져오는가?</p>

<ul>
  <li>첫 번째는 Zrank Leaderboard Heather를 사용하여 사용자 순위를 얻습니다</li>
  <li>그런 다음 위의 순위를 사용하여 하위 및 상한을 얻으려면 아래에서 3을, 아래 3 개를 원한다고 가정 해 봅시다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6383&gt; zadd leaderboard 10 Andrew 20 Bella 30 Andy 33 Dolly 40 Cathy 42 Heather 43 Gilbert 45 Lilly 50  Dinesh 58 <span class="s2">"Jon snow"</span> 60 Ygnitte
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6383&gt; zrange leaderboard 0 <span class="nt">-1</span>
 1<span class="o">)</span> <span class="s2">"Andrew"</span>
 2<span class="o">)</span> <span class="s2">"Bella"</span>
 3<span class="o">)</span> <span class="s2">"Andy"</span>
 4<span class="o">)</span> <span class="s2">"Dolly"</span>
 5<span class="o">)</span> <span class="s2">"Cathy"</span>
 6<span class="o">)</span> <span class="s2">"Heather"</span>
 7<span class="o">)</span> <span class="s2">"Gilbert"</span>
 8<span class="o">)</span> <span class="s2">"Lilly"</span>
 9<span class="o">)</span> <span class="s2">"Dinesh"</span>
10<span class="o">)</span> <span class="s2">"Jon snow"</span>
11<span class="o">)</span> <span class="s2">"Ygnitte"</span>
127.0.0.1:6383&gt; zrank leaderboard Heather
<span class="o">(</span>integer<span class="o">)</span> 5
127.0.0.1:6383&gt; zrange leaderboard 2 8
1<span class="o">)</span> <span class="s2">"Andy"</span>
2<span class="o">)</span> <span class="s2">"Dolly"</span>
3<span class="o">)</span> <span class="s2">"Cathy"</span>
4<span class="o">)</span> <span class="s2">"Heather"</span>
5<span class="o">)</span> <span class="s2">"Gilbert"</span>
6<span class="o">)</span> <span class="s2">"Lilly"</span>
7<span class="o">)</span> <span class="s2">"Dinesh"</span>
</code></pre></div></div>

<p>그러나 리더 보드는 zrank와 zrange Redis 명령어를 실행하는 사이에 순위가 변경 될 수 있습니다.
이를 해결하기 위한 솔루션 중 하나는 사용자의 순위를 얻기 전에 일종의 lock 장치를 사용한 다음 zrange를 사용한 다음 lock을 제거하는 것입니다. 그리고 이전에, 리더 보드에 쓰고, 우리는 lock을 점검해야하며, lock 장치가 있으면 lock 장치가 제거 될 때까지 재 시도해야합니다.</p>

<p><img src="/assets/images/cache/29-cache-locked.png" alt="locked" /></p>

<p>유스 케이스를 처리하는 우아한 방법은 LUA 스크립트를 사용하는 것입니다
Redis는 서버에서 LUA 스크립트를 업로드하고 실행할 수 있으며 스크립트가 서버에서 실행되기 때문에 스크립트에서 데이터를 읽고 쓰는 것이 매우 효율적입니다.
또한 Redis는 스크립트의 원자(Atomic) 실행을 보장합니다. 스크립트를 실행하는 동안 전체 런타임 중에 모든 서버의 명령이 차단됩니다.</p>

<p>간단한 LUA 스크립트를 작성하여 어떻게 문제를 해결할 수 있는지 보자.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">local </span>rank <span class="o">=</span> redis.call<span class="o">(</span><span class="s1">'zrank'</span>, KEYS[1], KEYS[2]<span class="o">)</span>
<span class="nb">local </span>min <span class="o">=</span> math.max<span class="o">(</span>rank - ARGV[1], 0<span class="o">)</span>
<span class="nb">local </span>max <span class="o">=</span> rank + ARGV[1]
<span class="nb">local </span>ldb <span class="o">=</span> redis.call<span class="o">(</span><span class="s1">'zrange'</span>, KEYS[1], min, max<span class="o">)</span>
<span class="nb">local </span>results <span class="o">=</span> <span class="o">{}</span>

results[<span class="s1">'rank'</span><span class="o">]</span> <span class="o">=</span> tostring<span class="o">(</span>rank + 1<span class="o">)</span>
results[<span class="s1">'item'</span><span class="o">]</span> <span class="o">=</span> ldb

<span class="nb">local </span>vars <span class="o">=</span> cjson.encode<span class="o">(</span>results<span class="o">)</span>
<span class="k">return </span>vars
</code></pre></div></div>

<p>| member | score | rank |
— — — — — — — — — — —
| member_1 | 50 | 1 |
| member_2 | 50 | 1 |
| member_3 | 30 | 3 |
| member_4 | 30 | 3 |
| member_5 | 10 | 5 |</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; zadd test-leaderboard 9 user1
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; zadd test-leaderboard 5 user2
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; zadd test-leaderboard 5 user3
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; zadd test-leaderboard 3 user4
<span class="o">(</span>integer<span class="o">)</span> 1

127.0.0.1:6379&gt; zrank test-leaderboard user2
<span class="o">(</span>integer<span class="o">)</span> 1
127.0.0.1:6379&gt; zrank test-leaderboard user3
<span class="o">(</span>integer<span class="o">)</span> 2

127.0.0.1:6379&gt; ZSCORE test-leaderboard user3
<span class="s2">"5"</span>
127.0.0.1:6379&gt; ZRANGEBYSCORE test-leaderboard 5 5 LIMIT 0 1
1<span class="o">)</span> <span class="s2">"user2"</span>
127.0.0.1:6379&gt; ZRANK test-leaderboard user2
<span class="o">(</span>integer<span class="o">)</span> 1

127.0.0.1:6379&gt; ZADD test-leaderboard 5 user2
127.0.0.1:6379&gt; ZADD test-ranks 5 5

EVAL <span class="s2">"local score = redis.call('ZSCORE', KEYS[1], ARGV[1]) </span><span class="se">\n</span><span class="s2"> return redis.call('ZRANK', KEYS[2], score)"</span> 2 test-leaderboard test-ranks user2
<span class="o">(</span>integer<span class="o">)</span> 1
</code></pre></div></div>

<p>스크립트를 한 줄로 보면</p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="jupyter" /><summary type="html"><![CDATA[LUA 스크립팅의 효율적인 방법으로 수행 할 수 있는 사례에 사용될 수 사례를 살펴봅니다. 여기에는 Redis zset에 유지되는 리더 보드가 있으며, 현재 사용 사례를 위해 주어진 사용자의 경우 해당 사용자의 순위와 리더 보드에서 사용자의 주변의 rank를 얻을 수도 있습니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - Lua 스크립트 등록 및 실행</title><link href="http://localhost:4000/cache/run-lua-on-redis-cli/" rel="alternate" type="text/html" title="Redis 시작하기 - Lua 스크립트 등록 및 실행" /><published>2023-04-21T00:00:00+09:00</published><updated>2023-04-21T00:00:00+09:00</updated><id>http://localhost:4000/cache/run-lua-on-redis-cli</id><content type="html" xml:base="http://localhost:4000/cache/run-lua-on-redis-cli/"><![CDATA[<p>스크립팅을 사용하면 Redis 내에서 복잡한 작업을 실행할 수 있습니다.<br />
Redis 스크립트를 사용하면 제어 구조와 같은 프로그래밍 도구를 사용할 수 있으며 거의 ​​모든 Redis 명령에 액세스 할 수 있습니다.</p>

<p>그렇다면 왜 명령을 직접 실행하여 또는 응용 프로그램 자체에서 Redis 스크립트를 사용합니까?</p>
<ul>
  <li>작업이 Redis Cache 서버에서 직접 실행되 성능이 크게 증가합니다.</li>
  <li>Logic은  Redis 서버에서 직접 적재되고, 분산되어 있는 여러 응용프로그램에서 사용가능.</li>
  <li>atomic하게 실행되므로 스크립트가 실행중인 동안 동시에 다른 서버가 해당 스크립트를 실행 하는 것을 방지 함.</li>
</ul>

<p>Lua는 Redis 스크립팅의 언어입니다. LUA 언어는 단순성과 간결함을 제공하므로 스크립팅 작업에 효과적인 언어입니다.</p>

<p>그러나 스크립트가 모든 경우에 적합하지는 않습니다. Redis 서버는 스크긴트가 실행되는 동안 다른 작업을 차단하기 때문에 로직이 긴 스크립트는 실제로 성능에 영향을 미칠 수 있습니다.</p>

<p>Lua 스크립트를 작성하고, 스크립트를 등록하고 Caching하여 실행하거나, EVAL 명령어로 script를 직접 실행하는 방법들이 있습니다.</p>
<h2 id="lua-script-등록-방법">Lua Script 등록 방법</h2>

<ul>
  <li>CLI로 등록
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>script.lua | redis-cli <span class="nt">-x</span> script load
</code></pre></div>    </div>
  </li>
  <li>script load  명령어
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; script load <span class="s2">"redis.call('SET', KEYS[1], ARGV[1])"</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="lua-script-실행방법">Lua Script 실행방법</h2>
<h4 id="redis-cli">redis-cli</h4>

<p>Sample 데이터</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; hmset hkeys key:1 value:1 key:2 value:2 key:3 value:3 key:4 value:4 key:5 value:5 key:6 value:6
127.0.0.1:6379&gt; zadd order 1 key:3 2 key:1 3 key:2
</code></pre></div></div>

<p>redis-cli -p 6383 eval “$(cat scriptfile)” keynum keys argv</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">--</span> example01.lua
redis.call<span class="o">(</span><span class="s1">'SET'</span>, KEYS[1], ARGV[1]<span class="o">)</span>
</code></pre></div></div>
<p>예시 1</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli <span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>example01.lua<span class="si">)</span><span class="s2">"</span> 1 key1 value
</code></pre></div></div>

<p>예시 2</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">--</span> example02.lua
<span class="nb">local </span>order <span class="o">=</span> redis.call<span class="o">(</span><span class="s1">'zrange'</span>, KEYS[1], 0, <span class="nt">-1</span><span class="o">)</span><span class="p">;</span> <span class="k">return </span>redis.call<span class="o">(</span><span class="s1">'hmget'</span>,KEYS[2], unpack<span class="o">(</span>order<span class="o">))</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">SHA</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat </span>example02.lua |redis-cli <span class="nt">-p</span> 6383 <span class="nt">-x</span> script load<span class="si">)</span>
redis-cli <span class="nt">-p</span> 6383 evalsha <span class="s2">"</span><span class="nv">$SHA</span><span class="s2">"</span> 2 order hkeys
</code></pre></div></div>

<h4 id="redis-서버">redis 서버</h4>
<p>기본 Redis 스크립트는 EVAL 명령을 사용하여 실행할 수 있습니다. 명령은 Redis에서 직접 스크립트를 실행합니다</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; EVAL <span class="s2">"return 'Hello, world!'"</span>
127.0.0.1:6379&gt; EVAL <span class="s2">"redis.call('SET', KEYS[1], ARGV[1])"</span> 1 key1 <span class="s2">"Example Value"</span>

127.0.0.1:6379&gt; hmset hkeys key:1 value:1 key:2 value:2 key:3 value:3 key:4 value:4 key:5 value:5 key:6 value:6
127.0.0.1:6379&gt; zadd order 1 key:3 2 key:1 3 key:2
127.0.0.1:6379&gt; <span class="nb">eval</span> <span class="s2">"local order = redis.call(‘zrange’, KEYS[1], 0, -1); return redis.call(‘hmget’,KEYS[2],unpack(order));"</span> 2 order hkeys
</code></pre></div></div>

<p>EVALSHA <your_script_sha> 1 key argv</your_script_sha></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; script load <span class="s2">"redis.call('SET', KEYS[1], ARGV[1])"</span> 
fcd2612e1ca113b83fdfbc2a88493d3b231a32ad

127.0.0.1:6379&gt; EVALSHA fcd2612e1ca113b83fdfbc2a88493d3b231a32ad 1 key1 test1
127.0.0.1:6379&gt; get key1
</code></pre></div></div>

<h2 id="참조">참조</h2>
<p><a href="https://hsg2510.tistory.com/category/Lua%20Script">Hong’s Programing World</a><br />
<a href="https://www.lua.org/manual/5.4/">Lua manual</a><br />
<a href="https://www.freecodecamp.org/news/a-quick-guide-to-redis-lua-scripting/">freeCodeCamp</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="lua" /><summary type="html"><![CDATA[스크립팅을 사용하면 Redis 내에서 복잡한 작업을 실행할 수 있습니다. Redis 스크립트를 사용하면 제어 구조와 같은 프로그래밍 도구를 사용할 수 있으며 거의 ​​모든 Redis 명령에 액세스 할 수 있습니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - Redis vs Memcached</title><link href="http://localhost:4000/cache/redis-mencache/" rel="alternate" type="text/html" title="Redis 시작하기 - Redis vs Memcached" /><published>2023-04-21T00:00:00+09:00</published><updated>2023-04-21T00:00:00+09:00</updated><id>http://localhost:4000/cache/redis-mencache</id><content type="html" xml:base="http://localhost:4000/cache/redis-mencache/"><![CDATA[<p>redis와 Memcached를 비교합니다.</p>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>Redis</th>
      <th>Memcached</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>특징</td>
      <td>메모리 DB</td>
      <td>고성능 분산 캐시 서버</td>
    </tr>
    <tr>
      <td>저장방식</td>
      <td>메모리 캐시 및 스토리지</td>
      <td>메모리</td>
    </tr>
    <tr>
      <td>지원 데이터 타입</td>
      <td>다양한 데이터 타입지원<br />String/List/Hashes/Set/Sorted Set</td>
      <td>String key/value만 지원</td>
    </tr>
    <tr>
      <td>키목록 조죄</td>
      <td>모든 키목록</td>
      <td>모든 키 목록 지원 않음</td>
    </tr>
    <tr>
      <td>복제</td>
      <td>Primary/replica</td>
      <td>복제 지원 않음</td>
    </tr>
    <tr>
      <td>클러스터</td>
      <td>클러스터 지원</td>
      <td>Not support</td>
    </tr>
    <tr>
      <td>Pub/Sub</td>
      <td>Pub/Sub model 지원</td>
      <td>Not support</td>
    </tr>
    <tr>
      <td>Script</td>
      <td>LUA Script 지원</td>
      <td>Not support</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="mencached" /><summary type="html"><![CDATA[redis와 Memcached를 비교합니다.]]></summary></entry><entry><title type="html">Redis 시작하기 - Lua 에서 return String, List, JSON 형식으로 받기.</title><link href="http://localhost:4000/cache/return-list-using-lua/" rel="alternate" type="text/html" title="Redis 시작하기 - Lua 에서 return String, List, JSON 형식으로 받기." /><published>2023-04-21T00:00:00+09:00</published><updated>2023-04-21T00:00:00+09:00</updated><id>http://localhost:4000/cache/return-list-using-lua</id><content type="html" xml:base="http://localhost:4000/cache/return-list-using-lua/"><![CDATA[<p>Springboot Lettuce기반 Lua를 호출하여 결과값을 List 받는 방법을 공유합니다.
Lua를 를 이용해서 Boolean, Long 타입은 별다른 어려움없이 응답을 받을 수 있습니다. 그러나 String이나 List같은 경우는 RedisTemplate 기본 설정으로는 결과를 받을 수 없고 다음과 같은 오류를 만나게 될 것입니다. 이것은 GenericJackson2JsonRedisSerializer에서 byte[]를 deserialization을 하지 못해서 발생하는 에러입니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>com.fasterxml.jackson.core.JsonParseException: Unrecognized token <span class="s1">'test'</span>: was expecting <span class="o">(</span>JSON String, Number, Array, Object or token <span class="s1">'null'</span>, <span class="s1">'true'</span> or <span class="s1">'false'</span><span class="o">)</span>
 at <span class="o">[</span>Source: <span class="o">(</span>byte[]<span class="o">)</span><span class="s2">"test"</span><span class="p">;</span> line: 1, column: 5]
	at com.fasterxml.jackson.core.JsonParser._constructError<span class="o">(</span>JsonParser.java:2391<span class="o">)</span> ~[jackson-core-2.13.5.jar!/:2.13.5]
</code></pre></div></div>

<p>그래서 다음과 같은 방법으로 해결이 가능하며, Lua를 통해서 JSON, String, List등을 반환값으로 받을 수 있습니다.</p>

<ul>
  <li>GenericJackson2JsonRedisSerializer에서 extends</li>
  <li>deserialize를 overriding</li>
</ul>

<p>GenericJackson2JsonRedisSerializer를 extention하여 overriding하는 소스는 다음과 같습니다. GenericJackson2JsonRedisSerializer를 CustomJackson2JsonRedisSerializer로 변경하면 Lua에서 반환값을 다양하게 받을 수 있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.serializer.SerializationException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.lang.Nullable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.util.Assert</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomJackson2JsonRedisSerializer</span> <span class="kd">extends</span> <span class="nc">GenericJackson2JsonRedisSerializer</span> <span class="o">{</span>
	<span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
	<span class="cm">/**
	 * @param source can be {@literal null}.
	 * @param type must not be {@literal null}.
	 * @return {@literal null} for empty source.
	 * @throws SerializationException
	 */</span>
	<span class="nd">@Nullable</span>
	<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">deserialize</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">source</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SerializationException</span> <span class="o">{</span>
		<span class="no">T</span> <span class="n">clazz</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="k">try</span> <span class="o">{</span>
			
			<span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">type</span><span class="o">,</span>
					<span class="s">"Deserialization type must not be null! Please provide Object.class to make use of Jackson2 default typing."</span><span class="o">);</span>

			<span class="k">if</span> <span class="o">(</span><span class="nc">Objects</span><span class="o">.</span><span class="na">isNull</span><span class="o">(</span><span class="n">source</span><span class="o">))</span> <span class="o">{</span>
				<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
			<span class="o">}</span>

			<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Source:{}, class:{}"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">source</span><span class="o">),</span> <span class="n">type</span><span class="o">);</span>
			<span class="n">clazz</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">source</span><span class="o">),</span> <span class="n">type</span><span class="o">);</span>
			<span class="k">return</span> <span class="n">clazz</span><span class="o">;</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">SerializationException</span><span class="o">(</span><span class="s">"Could not read JSON: "</span> <span class="o">+</span> <span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">ex</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="redis-configuration">Redis Configuration</h4>
<p>RedisTemplate Value Serializer에 CustomJackson2JsonRedisSerializer를 설정합니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">(</span><span class="nc">RedisConnectionFactory</span> <span class="n">redisConnectionFactory</span><span class="o">){</span>
    		<span class="nc">CustomJackson2JsonRedisSerializer</span> <span class="n">customJackson2JsonRedisSerializer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CustomJackson2JsonRedisSerializer</span><span class="o">();</span>
    	
        <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisTemplate</span><span class="o">&lt;&gt;();</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">);</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setValueSerializer</span><span class="o">(</span><span class="n">customJackson2JsonRedisSerializer</span><span class="o">);</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setDefaultSerializer</span><span class="o">(</span><span class="n">customJackson2JsonRedisSerializer</span><span class="o">);</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setHashKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setHashValueSerializer</span><span class="o">(</span><span class="n">customJackson2JsonRedisSerializer</span><span class="o">);</span>   
        
        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
    <span class="o">}</span> 
</code></pre></div></div>
<h4 id="leaderboard-lua">leaderboard Lua</h4>
<p>Lua 예제는 다음과 같습니다.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- leaderboard.lua </span>
<span class="kd">local</span> <span class="n">rank</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s1">'zrank'</span><span class="p">,</span> <span class="n">KEYS</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">KEYS</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="kd">local</span> <span class="n">min</span> <span class="o">=</span> <span class="nb">math.max</span><span class="p">(</span><span class="n">rank</span> <span class="o">-</span> <span class="n">ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">max</span> <span class="o">=</span> <span class="n">rank</span> <span class="o">+</span> <span class="n">ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="kd">local</span> <span class="n">ldb</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s1">'zrange'</span><span class="p">,</span> <span class="n">KEYS</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">min</span><span class="p">,</span> <span class="n">max</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">results</span> <span class="o">=</span> <span class="p">{}</span>

<span class="n">results</span><span class="p">[</span><span class="s1">'rank'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">tostring</span><span class="p">(</span><span class="n">rank</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">results</span><span class="p">[</span><span class="s1">'item'</span><span class="p">]</span> <span class="o">=</span> <span class="n">ldb</span>

<span class="kd">local</span> <span class="n">vars</span> <span class="o">=</span> <span class="n">cjson</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>

<span class="k">return</span> <span class="n">vars</span>
</code></pre></div></div>

<h4 id="redis에-적용하기">redis에 적용하기</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>leaderboard.lua | redis-cli <span class="nt">-x</span> script load
<span class="s2">"60e0429ac3aed8dbb3abfeb4fb2d13dde103d575"</span>

 127.0.0.1:6379&gt; evalsha <span class="s2">"60e0429ac3aed8dbb3abfeb4fb2d13dde103d575"</span> 2 leaderboard Heather 3
<span class="s2">"{</span><span class="se">\"</span><span class="s2">item</span><span class="se">\"</span><span class="s2">:[</span><span class="se">\"</span><span class="s2">Andy</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Dolly</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Cathy</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Heather</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Gilbert</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Lilly</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Dinesh</span><span class="se">\"</span><span class="s2">],</span><span class="se">\"</span><span class="s2">rank</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">6</span><span class="se">\"</span><span class="s2">}"</span>
</code></pre></div></div>
<h4 id="redistemplate--lettuce를-이용">RedisTemplate &amp; Lettuce를 이용</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">retrieveLeaderBoard</span><span class="o">(</span><span class="nc">LeaderBoardReqVO</span> <span class="n">leaderBoardReqVO</span><span class="o">)</span> <span class="o">{</span>
    	<span class="nc">DefaultRedisScript</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisScript</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultRedisScript</span><span class="o">&lt;&gt;();</span>
    	<span class="nc">Resource</span> <span class="n">resource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathResource</span><span class="o">(</span><span class="n">leaderBoard</span><span class="o">);</span>
    	<span class="n">redisScript</span><span class="o">.</span><span class="na">setScriptSource</span><span class="o">(</span><span class="k">new</span> <span class="nc">ResourceScriptSource</span><span class="o">(</span><span class="n">resource</span><span class="o">));</span>
    	<span class="n">redisScript</span><span class="o">.</span><span class="na">setResultType</span><span class="o">(</span><span class="nc">Object</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"retrieveLeaderBoard:{}"</span><span class="o">,</span> <span class="n">leaderBoardReqVO</span><span class="o">);</span>
    	<span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[]</span> <span class="o">{</span><span class="n">leaderBoardReqVO</span><span class="o">.</span><span class="na">getUser</span><span class="o">()};</span>
    	<span class="nc">Object</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">redisScript</span><span class="o">,</span>  <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">leaderBoardReqVO</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">leaderBoardReqVO</span><span class="o">.</span><span class="na">getUser</span><span class="o">()),</span> <span class="n">leaderBoardReqVO</span><span class="o">.</span><span class="na">getCount</span><span class="o">());</span>
    	
    	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"retrieveLeaderBoard ret:{}"</span><span class="o">,</span> <span class="n">ret</span><span class="o">);</span>
    	
    	<span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<h2 id="swagger-ui에서-호출">Swagger UI에서 호출</h2>

<p><img src="/assets/images/cache/31-cache-leaderboard-swagger.png" alt="m1s1-r1s2-r3s3" /></p>

<p>[수행결과과]<br />
<img src="/assets/images/cache/32-cache-result-leaderboard.png" alt="m1s1-r1s2-r3s3" /></p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="Lua" /><summary type="html"><![CDATA[Springboot Lettuce기반 Lua를 호출하여 결과값을 List 받는 방법을 공유합니다. Lua를 를 이용해서 Boolean, Long 타입은 별다른 어려움없이 응답을 받을 수 있습니다. 그러나 String이나 List같은 경우는 RedisTemplate 기본 설정으로는 결과를 받을 수 없고 다음과 같은 오류를 만나게 될 것입니다. 이것은 GenericJackson2JsonRedisSerializer에서 byte[]를 deserialization을 하지 못해서 발생하는 에러입니다.]]></summary></entry></feed>