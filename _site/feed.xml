<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-07T05:02:02+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cloud Native Journey</title><subtitle>Software Engineer/Architect</subtitle><author><name>Jaeguk Yun</name></author><entry><title type="html">Getting Start Redis using Jupyter Notebook - 설치</title><link href="http://localhost:4000/cache/setup-jupyter/" rel="alternate" type="text/html" title="Getting Start Redis using Jupyter Notebook - 설치" /><published>2023-03-29T00:00:00+09:00</published><updated>2023-03-29T00:00:00+09:00</updated><id>http://localhost:4000/cache/setup-jupyter</id><content type="html" xml:base="http://localhost:4000/cache/setup-jupyter/"><![CDATA[<p>Jupyter Notebook을 이용하여 Redis를 실습할 수 있는 환경을 구성합니다.</p>

<h2 id="setup-redis-on-docker">Setup Redis on Docker</h2>
<p>설치형 redis를 하지않고 학습용으로 최적의 환경인 docker를 사용하여 간단히 Redis를 실행합니다.
아래의 docker-compose.yaml 파일을 작성하고 작성된 폴더위치에서 다음과 같이 docker-compose를 실행하여 redis를 실행합니다.
그러면 redis docker image를 pull 받아서 background로 실행합니다.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.7'</span>
<span class="na">services</span><span class="pi">:</span>
    <span class="na">redis</span><span class="pi">:</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">redis:alpine</span>
      <span class="na">command</span><span class="pi">:</span> <span class="s">redis-server --port </span><span class="m">6379</span>
      <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">name=redis"</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">mode=standalone"</span>
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">6379:6379</span>
</code></pre></div></div>
<h4 id="run-redis">Run redis</h4>
<p>docker-compose 를 사용하여 redis를 실행합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div></div>

<h2 id="setup-jupyter-using-docker">Setup Jupyter using Docker</h2>
<p>Jupyter notebook을 이용하여 GUI 환경에서 Python을 이용하여 Redis를 실습할 수 있습니다.<br />
아래의 <a href="https://yoonjk.github.io/docker/jupyter/">링크</a>를 통해 Jupyter Notebook을 docker-compose 파일을 작성하고 아래와 같이 실행합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
docker logs <span class="nt">-f</span> jupyter
</code></pre></div></div>

<p>브라우저에서 http://localhost:0000 으로 접속하면 패스워드 변경화면이 나타납니다.<br />
위에서 docker log에서 token 값을 확인 후<br />
<img src="/assets/images/cache/01-cache-jupyter-log.png" alt="Jupyter log" /></p>

<p>아래와 같이 token값을 입력하고 패스워드를 입력하고 Log in and set new password 버튼을 클릭합니다.</p>

<p><img src="/assets/images/cache/02-cache-setup-a-password.png" alt="Jupyter log" /></p>

<p>Jupyter Home 화면이 아래와 같이 출력됩니다.
<img src="/assets/images/cache/03-cache-jupyter-home.png" alt="Jupyter log" /></p>

<p>Notebook category에서 python3를 선택합니다.<br />
<img src="/assets/images/cache/04-cache-python3-notebook.png" alt="Jupyter log" /></p>

<p>python에서 redis를 연결하기 위해 redis-py module을 설치해야 합니다. 다음과 같이 notebook에 입력하고 실행버튼을 클릭하여 redis-py module을 설치합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">!</span>pip <span class="nb">install </span>redis
</code></pre></div></div>

<p><img src="/assets/images/cache/05-cache-pip-install-redis.png" alt="Jupyter log" /></p>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="jupyter" /><summary type="html"><![CDATA[Jupyter Notebook을 이용하여 Redis를 실습할 수 있는 환경을 구성합니다.]]></summary></entry><entry><title type="html">Getting Start Redis using Jupyter Notebook - get/set</title><link href="http://localhost:4000/cache/getting-starting-jupyter/" rel="alternate" type="text/html" title="Getting Start Redis using Jupyter Notebook - get/set" /><published>2023-03-29T00:00:00+09:00</published><updated>2023-03-29T00:00:00+09:00</updated><id>http://localhost:4000/cache/getting-starting-jupyter</id><content type="html" xml:base="http://localhost:4000/cache/getting-starting-jupyter/"><![CDATA[<p>Jupyter Notebook을 환경에서 Python을 이용하여 Redis를 알아봅니다. redis-py를 이용하여 redis를 연결하고, 다음과 같이 데이터를 set/get을 수행하여 결과를 확인합니다.</p>
<h2 id="connect">Connect</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">redis</span>

<span class="n">redisClient</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">'localhost'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">6379</span><span class="p">,</span> <span class="n">decode_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">redisClient</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="s">'foo'</span><span class="p">,</span> <span class="s">'bar'</span><span class="p">)</span>
<span class="n">redisClient</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'foo'</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="cache" /><category term="redis" /><category term="jupyter" /><summary type="html"><![CDATA[Jupyter Notebook을 환경에서 Python을 이용하여 Redis를 알아봅니다. redis-py를 이용하여 redis를 연결하고, 다음과 같이 데이터를 set/get을 수행하여 결과를 확인합니다. Connect ```python import redis]]></summary></entry><entry><title type="html">DTO에서 null인 항목은 json에서 제거</title><link href="http://localhost:4000/springboot/remove-null-dto/" rel="alternate" type="text/html" title="DTO에서 null인 항목은 json에서 제거" /><published>2023-03-28T00:00:00+09:00</published><updated>2023-03-28T00:00:00+09:00</updated><id>http://localhost:4000/springboot/remove-null-dto</id><content type="html" xml:base="http://localhost:4000/springboot/remove-null-dto/"><![CDATA[<h2 id="dto에서-null인-항목은-json에서-제거">DTO에서 null인 항목은 json에서 제거</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ToString</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CodeDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>

    <span class="nd">@JsonInclude</span><span class="o">(</span><span class="nc">Include</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">codeName</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="Advice" /><summary type="html"><![CDATA[DTO에서 null인 항목은 json에서 제거 ```java @ToString @Getter @Setter public class CodeDto { private int code;]]></summary></entry><entry><title type="html">Docker을 이용하여 Jupyter 실행</title><link href="http://localhost:4000/docker/jupyter/" rel="alternate" type="text/html" title="Docker을 이용하여 Jupyter 실행" /><published>2023-03-27T00:00:00+09:00</published><updated>2023-03-27T00:00:00+09:00</updated><id>http://localhost:4000/docker/jupyter</id><content type="html" xml:base="http://localhost:4000/docker/jupyter/"><![CDATA[<h2 id="run-jupyter-using-docker">Run Jupyter using docker</h2>

<p>Docker 기반 Jupyter 실행<br />
유형1</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nt">-p</span> 10000:8888 <span class="nt">-v</span> <span class="s2">"</span><span class="k">${</span><span class="nv">PWD</span><span class="k">}</span><span class="s2">"</span>:/home/jovyan/work jupyter/datascience-notebook
</code></pre></div></div>

<p>유형2</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-p</span> 10000:8888 jupyter/scipy-notebook
</code></pre></div></div>

<h2 id="run-jupyter-using-docker-compose">Run Jupyter using docker-compose</h2>
<p>docker-compose를 사용하여 Jupyter를 실행합니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.9"</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">jupyter</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">jupyter</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">jupyter/datascience-notebook</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">10000:8888"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${PWD}:/home/jovyan/work</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="Jupyter" /><summary type="html"><![CDATA[Run Jupyter using docker]]></summary></entry><entry><title type="html">Controller에서 응답을 암호화하여 내보내기 - ResponseBodyAdvice</title><link href="http://localhost:4000/springboot/responsebodyadvice/" rel="alternate" type="text/html" title="Controller에서 응답을 암호화하여 내보내기 - ResponseBodyAdvice" /><published>2023-03-24T00:00:00+09:00</published><updated>2023-03-24T00:00:00+09:00</updated><id>http://localhost:4000/springboot/responsebodyadvice</id><content type="html" xml:base="http://localhost:4000/springboot/responsebodyadvice/"><![CDATA[<h2 id="responsebodyadvice">ResponseBodyAdvice</h2>
<p>Http Response를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로를 ReponseBodyAdvice 입니다.
  ReturnValueHandler는 RestController에는 적용할 수 없습니다. RequestBodyAdvice는 그러한 제약사항이 없습니다.
  적용하는 방법은 RequestBodyAdvice와 유사합니다.</p>

<p><img src="/assets/images/springboot/04-spring-filter-interceptor-aop-resolver-advice.png" alt="filter interceptor aop" /></p>

<h2 id="responsebodyadvice를-상속받아-구현">ResponseBodyAdvice를 상속받아 구현</h2>
<p>Http 요청을 했을 때 body 데이터를 제어하고자 할 떄 RequestBodyAdvice를 상속받아 아래와 같이 3개의 Method를 구현해야 합니다.</p>
<ul>
  <li>public boolean supports(…)</li>
  <li>public Object beforeBodyWrite(…)</li>
</ul>

<p>supports에서는 대상 Controller나 대상 Parameter Type에 따라 대상을 선택할 수 있습니다. 
beforeBodyWrite 는 사용자 Controller에서 받은 return 값을 가공할 수 있는 영역입니다.
선택된 converter를 이용하여 json으로 변환하기 직전에 호출되는 것이다.<br />
사용하는 주요 용도로 아래와 같이</p>
<ul>
  <li>로깅</li>
  <li>Decrypt</li>
</ul>

<p>로 사용할 수 있는 영역입니다. 다음 예제는 ResponseBodyAdvice를 Decrypt 로 사용하고 있습니다.</p>

<h2 id="responsebodyadvice를---예시">ResponseBodyAdvice를 - 예시</h2>
<p>아래의 예제는 ResponseBodyAdvice를 구현한 EncryptResponseBodyAdvice입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.core.MethodParameter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.MediaType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.converter.HttpMessageConverter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.server.ServerHttpRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.server.ServerHttpResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.lang.Nullable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestControllerAdvice</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.demo.microservices.controller.UserController</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.demo.microservices.util.AESUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="nd">@RestControllerAdvice</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EncryptAdviceController</span> <span class="kd">implements</span> <span class="nc">ResponseBodyAdvice</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;{</span>
	<span class="cm">/**
	 * Whether this component supports the given controller method return type
	 * and the selected {@code HttpMessageConverter} type.
	 * @param returnType the return type
	 * @param converterType the selected converter type
	 * @return {@code true} if {@link #beforeBodyWrite} should be invoked;
	 * {@code false} otherwise
	 */</span>
	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">returnType</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">converterType</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------ beforeBodyRead ------------ "</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------ supports"</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">returnType</span><span class="o">.</span><span class="na">getContainingClass</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="nc">UserController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="cm">/**
	 * Invoked after an {@code HttpMessageConverter} is selected and just before
	 * its write method is invoked.
	 * @param body the body to be written
	 * @param returnType the return type of the controller method
	 * @param selectedContentType the content type selected through content negotiation
	 * @param selectedConverterType the converter type selected to write to the response
	 * @param request the current request
	 * @param response the current response
	 * @return the body that was passed in or a modified (possibly new) instance
	 */</span>
	<span class="nd">@Nullable</span>
	<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">beforeBodyWrite</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="nc">Object</span> <span class="n">body</span><span class="o">,</span> <span class="nc">MethodParameter</span> <span class="n">returnType</span><span class="o">,</span> <span class="nc">MediaType</span> <span class="n">selectedContentType</span><span class="o">,</span>
			<span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">selectedConverterType</span><span class="o">,</span>
			<span class="nc">ServerHttpRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">ServerHttpResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
		<span class="nc">String</span> <span class="n">responseMessage</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="nc">AESUtil</span> <span class="n">aesUtil</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AESUtil</span><span class="o">();</span>
        
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">responseMessage</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
	    <span class="kt">byte</span><span class="o">[]</span> <span class="n">encRawData</span> <span class="o">=</span> <span class="n">aesUtil</span><span class="o">.</span><span class="na">encrypt</span><span class="o">(</span><span class="n">responseMessage</span><span class="o">).</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
	    <span class="n">response</span><span class="o">.</span><span class="na">getBody</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="n">encRawData</span><span class="o">);</span>
	    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"encData:{}"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">encRawData</span><span class="o">));</span>
	    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"orgBody:{}"</span><span class="o">,</span><span class="n">body</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
		<span class="o">}</span>
		
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="Advice" /><summary type="html"><![CDATA[ResponseBodyAdvice Http Response를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로를 ReponseBodyAdvice 입니다. ReturnValueHandler는 RestController에는 적용할 수 없습니다. RequestBodyAdvice는 그러한 제약사항이 없습니다. 적용하는 방법은 RequestBodyAdvice와 유사합니다.]]></summary></entry><entry><title type="html">Http 요청을 복호화하여 Controller에 전달하기 - RequestBodyAdvice</title><link href="http://localhost:4000/springboot/requestbodyadvisor/" rel="alternate" type="text/html" title="Http 요청을 복호화하여 Controller에 전달하기 - RequestBodyAdvice" /><published>2023-03-24T00:00:00+09:00</published><updated>2023-03-24T00:00:00+09:00</updated><id>http://localhost:4000/springboot/requestbodyadvisor</id><content type="html" xml:base="http://localhost:4000/springboot/requestbodyadvisor/"><![CDATA[<p>화</p>
<h2 id="requestbodyadvice">RequestBodyAdvice</h2>
<p>Http Request를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로 RequestBodyAdvice 입니다.
  ArgumentRoslver는 RestController에는 약간의 제약사항이 있으나 RequestBodyAdvice는 그러한 제약사항이 없습니다.
  적용하는 방법은 ArgumentResolver와 유사하고 점도 섬세한 제어가 가능합니다.</p>

<p><img src="/assets/images/springboot/04-spring-filter-interceptor-aop-resolver-advice.png" alt="filter interceptor aop" /></p>

<h2 id="requestbodyadvice를-상속받아-구현">RequestBodyAdvice를 상속받아 구현</h2>
<p>Http 요청을 했을 때 body 데이터를 제어하고자 할 떄 RequestBodyAdvice를 상속받아 아래와 같이 3개의 Method를 구현해야 합니다.</p>
<ul>
  <li>public boolean supports(…)</li>
  <li>public HttpInputMessage beforeBodyRead(…) throws IOException</li>
  <li>public Object afterBodyRead(…)</li>
</ul>

<p>supports에서는 대상 Controller나 대상 Parameter Type에 따라 대상을 선택할 수 있습니다. 
beforeBodyRead 는 Http Body를 읽기전에 처리하거나 afterBodyRead 는 Http Body를 읽은후에 처리합니다.<br />
beforeBodyRead에서는 inputMessage의 getHeader와 getBody를 읽어서와 원하는 작업을 할 수 있수 있습니다.
afterBodyRead는  Controller의 Input Type을 body로 넘어오며 그것을 가공할 수 있습니다.</p>

<h2 id="requestbodyadvice---예시">RequestBodyAdvice - 예시</h2>
<p>아래의 예제는 RequestBodyAdvice를 구현한 DecryptRequestBodyAdvice입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.ByteArrayInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.Type</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.core.MethodParameter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.HttpHeaders</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.HttpInputMessage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.converter.HttpMessageConverter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestControllerAdvice</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.demo.microservices.controller.UserController</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.demo.microservices.util.AESUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.demo.microservices.util.IOUtils</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="nd">@RestControllerAdvice</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecryptRequestBodyController</span> <span class="kd">implements</span> <span class="nc">RequestBodyAdvice</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">decodingBody</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">rawData</span><span class="o">;</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">methodParameter</span><span class="o">,</span> <span class="nc">Type</span> <span class="n">targetType</span><span class="o">,</span>
			<span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">converterType</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------ DecryptRequestBodyController ------------ "</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"supports:{}"</span><span class="o">,</span> <span class="n">methodParameter</span><span class="o">.</span><span class="na">getContainingClass</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="nc">UserController</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
		<span class="k">return</span> <span class="n">methodParameter</span><span class="o">.</span><span class="na">getContainingClass</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="nc">UserController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">HttpInputMessage</span> <span class="nf">beforeBodyRead</span><span class="o">(</span><span class="nc">HttpInputMessage</span> <span class="n">inputMessage</span><span class="o">,</span> <span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="nc">Type</span> <span class="n">targetType</span><span class="o">,</span>
			<span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">converterType</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------ beforeBodyRead ------------ "</span><span class="o">);</span>

		<span class="nc">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">inputMessage</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">();</span>
		<span class="nc">AESUtil</span> <span class="n">aesUtil</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AESUtil</span><span class="o">();</span>

		<span class="k">try</span> <span class="o">{</span>
			<span class="nc">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">inputMessage</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
			<span class="n">rawData</span> <span class="o">=</span> <span class="nc">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
			<span class="n">decodingBody</span> <span class="o">=</span> <span class="n">aesUtil</span><span class="o">.</span><span class="na">decrypt</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">rawData</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
			<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"decodingBody:{}"</span><span class="o">,</span> <span class="n">decodingBody</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="k">return</span> <span class="k">new</span> <span class="nf">DecodeHttpInputMessage</span><span class="o">(</span><span class="n">headers</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ByteArrayInputStream</span><span class="o">(</span><span class="n">decodingBody</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">afterBodyRead</span><span class="o">(</span><span class="nc">Object</span> <span class="n">body</span><span class="o">,</span> <span class="nc">HttpInputMessage</span> <span class="n">inputMessage</span><span class="o">,</span> <span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="nc">Type</span> <span class="n">targetType</span><span class="o">,</span>
			<span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">converterType</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------ afterBodyRead ------------ "</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"body:{}"</span><span class="o">,</span> <span class="n">body</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">body</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">handleEmptyBody</span><span class="o">(</span><span class="nc">Object</span> <span class="n">body</span><span class="o">,</span> <span class="nc">HttpInputMessage</span> <span class="n">inputMessage</span><span class="o">,</span> <span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span>
			<span class="nc">Type</span> <span class="n">targetType</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">converterType</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"handleEmptyBody "</span><span class="o">,</span> <span class="n">targetType</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"body:{}"</span><span class="o">,</span> <span class="n">body</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"targetType:{}"</span><span class="o">,</span> <span class="n">targetType</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">body</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>DecodeHttpInputMessage.java 파일입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.http.HttpHeaders</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.HttpInputMessage</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecodeHttpInputMessage</span> <span class="kd">implements</span> <span class="nc">HttpInputMessage</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">HttpHeaders</span> <span class="n">headers</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">InputStream</span> <span class="n">body</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">DecodeHttpInputMessage</span><span class="o">(</span><span class="nc">HttpHeaders</span> <span class="n">headers</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">body</span> <span class="o">=</span> <span class="n">body</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">HttpHeaders</span> <span class="nf">getHeaders</span><span class="o">()</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="k">return</span> <span class="n">headers</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">InputStream</span> <span class="nf">getBody</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="k">return</span> <span class="n">body</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="Advice" /><summary type="html"><![CDATA[화 RequestBodyAdvice Http Request를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로 RequestBodyAdvice 입니다. ArgumentRoslver는 RestController에는 약간의 제약사항이 있으나 RequestBodyAdvice는 그러한 제약사항이 없습니다. 적용하는 방법은 ArgumentResolver와 유사하고 점도 섬세한 제어가 가능합니다.]]></summary></entry><entry><title type="html">ArgumentResolver</title><link href="http://localhost:4000/springboot/argumentResolver/" rel="alternate" type="text/html" title="ArgumentResolver" /><published>2023-03-13T00:00:00+09:00</published><updated>2023-03-13T00:00:00+09:00</updated><id>http://localhost:4000/springboot/argumentResolver</id><content type="html" xml:base="http://localhost:4000/springboot/argumentResolver/"><![CDATA[<h2 id="argumentresolver">ArgumentResolver</h2>
<p>Http Request를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로 ArgumentResolver 입니다.
  ArgumentRoslver는 Request 데이터를 가공하여 Constroller에 전달하고 싶을 때 사용합니다.
  제어할 때상으로는 아래와 같은 유형을 대상으로 ArgumentResolver를 적용할 수 있습니다.</p>

<ul>
  <li>적용대상 Controller</li>
  <li>Annotation 이용</li>
  <li>Argument Type 등</li>
</ul>

<p><img src="/assets/images/springboot/04-spring-filter-interceptor-aop-resolver-advice.png" alt="filter interceptor aop" /></p>

<h2 id="handlermethodargumentresolver-상속하여-구현">HandlerMethodArgumentResolver 상속하여 구현</h2>
<p>ArgumentResolver를 이용하여 Http 요청의 데이터를 가공하고 싶을 때는 HandlerMethodArgumentResolver 상속받아 구현하면 됩니다. HandlerMethodArgumentResolver는 아래의 2개의 Method를 구현해야 합니다.</p>

<ul>
  <li>public boolean supportsParameter(MethodParameter parameter)</li>
  <li>public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,
        NativeWebRequest webReq터est, WebDataBinderFactory binderFactory) throws Exception</li>
</ul>

<p>첫번째는 ArgumentResolver를 적용할 대상을 선정하는 부분입니다. 여기에서 대상 Controller나 Annotation인 경우 return 을 true로 반환하면 resolveArgument 가 실행되어 webRequest에서 데이터를 읽어서 원하는 형식의 데이터를 만들어 반환하면 됩니다.</p>

<p>## 예시</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.core.MethodParameter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.support.WebDataBinderFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.context.request.NativeWebRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.method.support.HandlerMethodArgumentResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.method.support.ModelAndViewContainer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.demo.microservices.annotation.Decrypted</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.demo.microservices.util.AESUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.demo.microservices.util.IOUtils</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecryptArgumentResolver</span> <span class="kd">implements</span> <span class="nc">HandlerMethodArgumentResolver</span> <span class="o">{</span>
	

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"supportsParameter:{}"</span><span class="o">,</span> <span class="n">parameter</span><span class="o">.</span><span class="na">getContainingClass</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="nc">Decrypted</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
        		<span class="n">parameter</span><span class="o">.</span><span class="na">getParameterType</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Map</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="nc">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span>
			<span class="nc">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="nc">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
		<span class="nc">HttpServletRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">();</span>
		<span class="kt">byte</span><span class="o">[]</span> <span class="n">rawData</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="nc">String</span> <span class="n">decodingBody</span><span class="o">;</span>
		<span class="nc">Map</span> <span class="n">reqMap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		
        <span class="k">try</span> <span class="o">{</span>
        	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"decodingBody:"</span><span class="o">);</span>
            <span class="nc">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
            <span class="n">rawData</span> <span class="o">=</span> <span class="nc">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"rawData:{}"</span><span class="o">,</span> <span class="n">rawData</span><span class="o">);</span>
            <span class="nc">AESUtil</span> <span class="n">aesUtil</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AESUtil</span><span class="o">();</span>
            <span class="n">decodingBody</span> <span class="o">=</span> <span class="n">aesUtil</span><span class="o">.</span><span class="na">decrypt</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">rawData</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
            <span class="n">reqMap</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">decodingBody</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"decodingBody:{}"</span><span class="o">,</span> <span class="n">decodingBody</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
		<span class="k">return</span> <span class="n">reqMap</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="Resolver" /><summary type="html"><![CDATA[ArgumentResolver Http Request를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로 ArgumentResolver 입니다. ArgumentRoslver는 Request 데이터를 가공하여 Constroller에 전달하고 싶을 때 사용합니다. 제어할 때상으로는 아래와 같은 유형을 대상으로 ArgumentResolver를 적용할 수 있습니다.]]></summary></entry><entry><title type="html">AOP(Aspect Oriented Programming) PointCut 표현식</title><link href="http://localhost:4000/springboot/aop-pointcut-detail/" rel="alternate" type="text/html" title="AOP(Aspect Oriented Programming) PointCut 표현식" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/aop-pointcut-detail</id><content type="html" xml:base="http://localhost:4000/springboot/aop-pointcut-detail/"><![CDATA[<h2 id="pointcut-의-표현식">PointCut 의 표현식</h2>
<p><strong>리턴타입  패키지경로  클래스지정  메소드지정</strong></p>

<p><strong>예시)</strong></p>
<ul>
  <li>execution(* com.demo.microservices..*.*Controller.*(..))</li>
  <li>execution(* com.demo.microservices..*.*Service.*(..))</li>
</ul>

<table>
  <thead>
    <tr>
      <th>JoinPoint</th>
      <th>PointCut Spec</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>execution</td>
      <td>*	com.demo.microservices..*.*Controller.*(..)	)</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>리턴타입</th>
      <th>패키지</th>
      <th>클래스명</th>
      <th>매소드명</th>
      <th>매개변수</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>*</td>
      <td>com.demo.microservices..*.</td>
      <td>*Controller.</td>
      <td>*(..)	)</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p><strong>리턴타입</strong> :</p>
<ul>
  <li>* : 모든 리턴타입 허용</li>
  <li>void : 리턴타입이 void인 메소드 선택</li>
  <li>!void : 리턴타압이 void가 아닌 메소드 선택</li>
</ul>

<p><strong>패키지경로</strong> :</p>
<ul>
  <li>com.demo.microservice : 지정한 패키지만 선택</li>
  <li>com.demo.microservices.. : 지정한 패턴의 모든패키지 선택</li>
  <li>com.demo.microservices..controller : 마지막 패키지 이름이 controller로 끝나는 패키지 선택</li>
</ul>

<p><strong>클래스지정</strong></p>
<ul>
  <li>UserController : 지정한 클래스만 선택</li>
  <li>*Controller : 이정한 패턴으로 시작하는 클래스 선택</li>
  <li>Controller+ : 지정한 클래로 파생된 모든 자식 클래스를 선택. 또는 인터페이스로 구현한 모든 클래스</li>
</ul>

<p><strong>메소드</strong></p>
<ul>
  <li>*(..) : 모든 메소드 선택</li>
  <li>update*(..) : 메소드명이 update로 시작하는 모든 메소드 선택</li>
</ul>

<p><strong>매개변수 지정</strong></p>
<ul>
  <li>(..) : 모든 매개변수</li>
  <li>(*) : 반드시 1개의 매개변수를 가지는 메소드</li>
  <li>(com.demo.microservices.model.UserVO) : 매개변수로 UserVO 를 가지는 메소드만 선택</li>
  <li>(!om.demo.microservices.model.UserVO) : 매개변수로 UserVO 를 가지지 않는 메소드를 선택</li>
  <li>(Integer, ..) : 1개 이상의 매개변수를 가지고, 첫번째 매개변수 타입이 Integer인 메소드만 선택</li>
  <li>(Integer, *) : 반드시 2개의 매개변수를 가지고, 첫번째 타입이 Integer인 메소드만 선택</li>
</ul>

<h2 id="참조">참조</h2>
<p><a href="https://sjh836.tistory.com/157">빨간색코딩</a><br />
<a href="http://closer27.github.io/backend/2017/08/03/spring-aop/">어느 개발자의 한적한 공간</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="aop" /><category term="pointcut" /><summary type="html"><![CDATA[PointCut 의 표현식 리턴타입 패키지경로 클래스지정 메소드지정]]></summary></entry><entry><title type="html">AOP(Aspect Oriented Programming) 예시</title><link href="http://localhost:4000/springboot/aop-examples/" rel="alternate" type="text/html" title="AOP(Aspect Oriented Programming) 예시" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/aop-examples</id><content type="html" xml:base="http://localhost:4000/springboot/aop-examples/"><![CDATA[<h2 id="aop-예시">AOP 예시</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Aspect</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AspectConfig</span> <span class="o">{</span>
	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"@annotation(org.springframework.web.bind.annotation.GetMapping)"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">getMapping</span><span class="o">()</span> <span class="o">{</span>
		
	<span class="o">}</span>
	
	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"@annotation(org.springframework.web.bind.annotation.PostMapping)"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">postMapping</span><span class="o">()</span> <span class="o">{</span>
		
	<span class="o">}</span>
	
	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"@annotation(org.springframework.web.bind.annotation.RequestMapping)"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">requestMapping</span><span class="o">()</span> <span class="o">{</span>
		
	<span class="o">}</span>
	
	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"execution(* com.demo.microservices..*.*Service.*(..))"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">serviceExcution</span><span class="o">()</span> <span class="o">{</span>
		
	<span class="o">}</span>
	
	<span class="nd">@Around</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"serviceExcution()"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span>  <span class="n">pjt</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- Around logging Start -------------"</span><span class="o">);</span>
		
		<span class="nc">Object</span> <span class="n">retValue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">retValue</span> <span class="o">=</span> <span class="n">pjt</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"error:{}"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
			
		<span class="o">}</span>

		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"--------------"</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">" return val:{}"</span><span class="o">,</span> <span class="n">retValue</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- Around logging end -------------"</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">retValue</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="nd">@Before</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"serviceExcution()"</span><span class="o">)</span> 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jointPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- Before logging -------------"</span> <span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@AfterReturning</span><span class="o">(</span><span class="n">pointcut</span> <span class="o">=</span> <span class="s">"serviceExcution()"</span><span class="o">,</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">"result"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterRuturning</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- AfterReturning logging -------------"</span> <span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">" result :{}"</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"----------------------------------------"</span> <span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@After</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"serviceExcution()"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- After logging -------------"</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@AfterThrowing</span><span class="o">(</span><span class="n">pointcut</span> <span class="o">=</span> <span class="s">"serviceExcution()"</span><span class="o">,</span> <span class="n">throwing</span> <span class="o">=</span> <span class="s">"e"</span><span class="o">)</span> 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterThrowing</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- AfterThrowing logging -------------"</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">" throwable :{}"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"----------------------------------------"</span> <span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="aop" /><summary type="html"><![CDATA[AOP 예시]]></summary></entry><entry><title type="html">AOP(Aspect Oriented Programming) 구성요소</title><link href="http://localhost:4000/springboot/aop-2/" rel="alternate" type="text/html" title="AOP(Aspect Oriented Programming) 구성요소" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/aop-2</id><content type="html" xml:base="http://localhost:4000/springboot/aop-2/"><![CDATA[<h2 id="aop-구성요소">AOP 구성요소</h2>
<p>특정지정에 제어하고 싶은 대상에 제어하고자 하는 기능을 구현하는 AOP에 대해 알아보았습ㄴ다.
이번에는 좀더 용어에 대해 상세하게 알아보겠습니다. <br />
AOP의 구성요소는</p>
<ul>
  <li>Aspect</li>
  <li>Advice</li>
  <li>PointCut</li>
  <li>JoinPoint</li>
</ul>

<p>로 되어 있습니다.</p>

<h4 id="aspect">Aspect</h4>
<p>Aspect는 AspectConfig 기능처럼 제어하고자 하는 모듈의 묶음을 의미하며, 이를 위해 어노테이션 @Aspect를 추가합니다.</p>

<h4 id="advice">Advice</h4>
<p>Advice는 특정 지점에서 trigger 되었을 때 실행되는 operation 입니다.<br />
예를 들면 operation이 실행되지는 시점은 다음과 같습니다.</p>
<ul>
  <li>시적전/후 : @Around</li>
  <li>시작전(Before) : @Before</li>
  <li>성공처리 후 : @AfterReturning</li>
  <li>에러발생시 : @AfterThrowing</li>
  <li>처리종료 후 항상 실행 : @After</li>
</ul>

<h4 id="joinpoint">JoinPoint</h4>
<p>JoinPoint는 어떤 Operation을 대상으로 할지 정의하는 것입니다.
Springframework의 AOP는 operation or method 단위로 JoinPoint를 지원합니다.<br />
대표적인 것이 execution, @Annotation 이 있습니다. 이중에서 execution JoinPoint가 가장 많이 사용되고 있습니다.</p>

<h4 id="pointcut">PointCut</h4>
<p>어느 시점(Operation or method)에 AOP 모듈을 trigger할지 정의하는 JoinPoint의 상세 스펙 또는 표현식(Expression)입니다.</p>

<h4 id="기타">기타</h4>
<ul>
  <li>
    <p>Weaving(위빙): Weaving은 애플리케이션의 Design/Runtime 등 시점에 Aspect를 적용하는 것<br />
springframework는 Runtime 시점에 Weaving 합니다.</p>
  </li>
  <li>
    <p>target : Aspect가 적용되는 객체를 의미합니다.</p>
  </li>
</ul>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="aop" /><summary type="html"><![CDATA[AOP 구성요소 특정지정에 제어하고 싶은 대상에 제어하고자 하는 기능을 구현하는 AOP에 대해 알아보았습ㄴ다. 이번에는 좀더 용어에 대해 상세하게 알아보겠습니다. AOP의 구성요소는 Aspect Advice PointCut JoinPoint]]></summary></entry></feed>