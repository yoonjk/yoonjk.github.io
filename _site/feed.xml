<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-05T07:21:25+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cloud Native Journey</title><subtitle>Software Engineer/Architect</subtitle><author><name>Jaeguk Yun</name></author><entry><title type="html">배너 추가</title><link href="http://localhost:4000/springboot/banner/" rel="alternate" type="text/html" title="배너 추가" /><published>2023-03-03T00:00:00+09:00</published><updated>2023-03-03T00:00:00+09:00</updated><id>http://localhost:4000/springboot/banner</id><content type="html" xml:base="http://localhost:4000/springboot/banner/"><![CDATA[<h2 id="배너-파일">배너 파일</h2>
<p>Springboot의 왼쪽 하단에 있는 dashboard tab에서 springboot를 시작하면 console 로그에 자신만의 로고를 출력하고 싶을 때가 있습니다. 이때 베너를 추가하는 방법에 설명합니다.</p>

<h2 id="배너-생성">배너 생성</h2>
<p>Springboot에서 배너를 추가하기 위해서 resources 폴더 하위에 banner.txt 파일을 생성해서 내용을 추가하면 springboot가 시작되면서 텍스트를 읽어 출력합니다.</p>

<p><img src="/assets/images/springboot/01-springboot-banner.png" alt="banner" /></p>

<h2 id="배너-텍스트-생성-및-복사">배너 텍스트 생성 및 복사</h2>

<p>아래의 <a href="http://patorjk.com/software/taag/">배너 링크 사이트</a>에서 배너를 작성해서 banner.txt에 내용을 붙여넣기 하면 쉽게 배너를 만들 수 있습니다.</p>

<p><a href="http://patorjk.com/software/taag/">http://patorjk.com/software/taag/</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="banner" /><summary type="html"><![CDATA[배너 파일 Springboot의 왼쪽 하단에 있는 dashboard tab에서 springboot를 시작하면 console 로그에 자신만의 로고를 출력하고 싶을 때가 있습니다. 이때 베너를 추가하는 방법에 설명합니다.]]></summary></entry><entry><title type="html">mysql docker-compose 파ㄹ</title><link href="http://localhost:4000/docker/mysql-docker-compose/" rel="alternate" type="text/html" title="mysql docker-compose 파ㄹ" /><published>2023-03-01T00:00:00+09:00</published><updated>2023-03-01T00:00:00+09:00</updated><id>http://localhost:4000/docker/mysql-docker-compose</id><content type="html" xml:base="http://localhost:4000/docker/mysql-docker-compose/"><![CDATA[<h2 id="mysql-docker-compose-파일">mysql docker-compose 파일</h2>

<p>mysql docker-compose 파일입니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> data
vi docker-compose.yaml
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span> <span class="c1"># 파일규격버전</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span> <span class="c1"># 서비스이름</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:8.0.23</span> <span class="c1"># 이미지</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">mysql</span> <span class="c1"># 컨테이너 이름</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span> <span class="c1"># 포트 설정  외부:내부</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MYSQL_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1234qwer"</span> <span class="c1"># 패스워드설정</span>
      <span class="na">MYSQL_DATABASE</span><span class="pi">:</span> <span class="s2">"</span><span class="s">demo"</span>
      <span class="na">MYSQL_USER</span><span class="pi">:</span> <span class="s2">"</span><span class="s">user00"</span>
      <span class="na">MYSQL_PASSWORD</span><span class="pi">:</span> <span class="s2">"</span><span class="s">admin1234"</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">--character-set-server=utf8</span> <span class="c1"># 인코딩</span>
      <span class="pi">-</span> <span class="s">--collation-server=utf8_general_ci</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./data:/dev/docker/db/mysql-db01</span> <span class="c1"># 마운트 설정</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="mysql" /><summary type="html"><![CDATA[mysql docker-compose 파일]]></summary></entry><entry><title type="html">redis docker-compose 파ㄹ</title><link href="http://localhost:4000/docker/redis-docker-compose/" rel="alternate" type="text/html" title="redis docker-compose 파ㄹ" /><published>2023-03-01T00:00:00+09:00</published><updated>2023-03-01T00:00:00+09:00</updated><id>http://localhost:4000/docker/redis-docker-compose</id><content type="html" xml:base="http://localhost:4000/docker/redis-docker-compose/"><![CDATA[<h2 id="redis-docker-compose-파일">Redis docker-compose 파일</h2>

<p>redis docker-compose 파일입니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.7'</span>
<span class="na">services</span><span class="pi">:</span>
    <span class="na">redis</span><span class="pi">:</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">redis:alpine</span>
      <span class="na">command</span><span class="pi">:</span> <span class="s">redis-server --port </span><span class="m">6379</span>
      <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">name=redis"</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">mode=standalone"</span>
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">6379:6379</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="redis" /><summary type="html"><![CDATA[Redis docker-compose 파일]]></summary></entry><entry><title type="html">nginx as Reverse Proxy for Jenkins</title><link href="http://localhost:4000/devops/nginx-as-a-reverse-proxy-for-jenkins/" rel="alternate" type="text/html" title="nginx as Reverse Proxy for Jenkins" /><published>2023-02-24T00:00:00+09:00</published><updated>2023-02-24T00:00:00+09:00</updated><id>http://localhost:4000/devops/nginx%20as%20a%20reverse%20proxy%20for%20jenkins</id><content type="html" xml:base="http://localhost:4000/devops/nginx-as-a-reverse-proxy-for-jenkins/"><![CDATA[<p>Jenkins를 Nginx Reverse Proxy를 설정하여 접근하는 것을 설명합니다.</p>

<h2 id="nginx-설치">Nginx 설치</h2>
<p>nginx를 설치하기 위해 사전에 필요한 package를 아래와 같이 설치합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install</span> <span class="nt">-y</span> yum-utils
yum <span class="nb">install</span> <span class="nt">-y</span> epel-release
</code></pre></div></div>

<p>nginx를 설치합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install</span> <span class="nt">-y</span> nginx
</code></pre></div></div>

<p>nginx의 status를 확인합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>● nginx.service - The nginx HTTP and reverse proxy server
   Loaded: loaded <span class="o">(</span>/usr/lib/systemd/system/nginx.service<span class="p">;</span> disabled<span class="p">;</span> vendor preset: disabled<span class="o">)</span>
   Active: inactive <span class="o">(</span>dead<span class="o">)</span>
</code></pre></div></div>
<h2 id="nginx-시작">nginx 시작</h2>
<p>jenkins.service 파일에서 Environment의 JENKINS_PORT=9080으로 변경합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl start nginx
</code></pre></div></div>

<p>nginx가 정상적으로 실행되었는지 확인합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>● nginx.service - The nginx HTTP and reverse proxy server
   Loaded: loaded <span class="o">(</span>/usr/lib/systemd/system/nginx.service<span class="p">;</span> disabled<span class="p">;</span> vendor preset: disabled<span class="o">)</span>
   Active: active <span class="o">(</span>running<span class="o">)</span> since Fri 2023-02-24 08:13:06 CST<span class="p">;</span> 28s ago
  Process: 49962 <span class="nv">ExecStart</span><span class="o">=</span>/usr/sbin/nginx <span class="o">(</span><span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>0/SUCCESS<span class="o">)</span>
  Process: 49958 <span class="nv">ExecStartPre</span><span class="o">=</span>/usr/sbin/nginx <span class="nt">-t</span> <span class="o">(</span><span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>0/SUCCESS<span class="o">)</span>
  Process: 49956 <span class="nv">ExecStartPre</span><span class="o">=</span>/usr/bin/rm <span class="nt">-f</span> /run/nginx.pid <span class="o">(</span><span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>0/SUCCESS<span class="o">)</span>
 Main PID: 49964 <span class="o">(</span>nginx<span class="o">)</span>
   CGroup: /system.slice/nginx.service
           ├─49964 nginx: master process /usr/sbin/ngin
           ├─49965 nginx: worker proces
           └─49966 nginx: worker proces

Feb 24 08:13:06 virtualserver01.HyukSeoung-Choi-s-Account.cloud systemd[1]: Starting The nginx HTTP and reverse proxy server...
Feb 24 08:13:06 virtualserver01.HyukSeoung-Choi-s-Account.cloud nginx[49958]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
Feb 24 08:13:06 virtualserver01.HyukSeoung-Choi-s-Account.cloud nginx[49958]: nginx: configuration file /etc/nginx/nginx.conf <span class="nb">test </span>is successful
Feb 24 08:13:06 virtualserver01.HyukSeoung-Choi-s-Account.cloud systemd[1]: Started The nginx HTTP and reverse proxy server.
</code></pre></div></div>

<p>nginx configuration 테스트합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nginx <span class="nt">-t</span>
</code></pre></div></div>
<p>google.com에서 <a href="https://www.jenkins.io/doc/book/system-administration/reverse-proxy-configuration-nginx/">jenkins reverse proxy nginx</a> 키워드로 검색해서 나온 결과중에<br />
첫번째 검색결과항목을 클릭합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upstream jenkins <span class="o">{</span>
  keepalive 32<span class="p">;</span> <span class="c"># keepalive connections</span>
  server 127.0.0.1:8080<span class="p">;</span> <span class="c"># jenkins ip and port</span>
<span class="o">}</span>

<span class="c"># Required for Jenkins websocket agents</span>
map <span class="nv">$http_upgrade</span> <span class="nv">$connection_upgrade</span> <span class="o">{</span>
  default upgrade<span class="p">;</span>
  <span class="s1">''</span> close<span class="p">;</span>
<span class="o">}</span>

server <span class="o">{</span>
  listen          80<span class="p">;</span>       <span class="c"># Listen on port 80 for IPv4 requests</span>

  server_name     jenkins.example.com<span class="p">;</span>  <span class="c"># replace 'jenkins.example.com' with your server domain name</span>

  <span class="c"># this is the jenkins web root directory</span>
  <span class="c"># (mentioned in the output of "systemctl cat jenkins")</span>
  root            /var/run/jenkins/war/<span class="p">;</span>

  access_log      /var/log/nginx/jenkins.access.log<span class="p">;</span>
  error_log       /var/log/nginx/jenkins.error.log<span class="p">;</span>

  <span class="c"># pass through headers from Jenkins that Nginx considers invalid</span>
  ignore_invalid_headers off<span class="p">;</span>

  location ~ <span class="s2">"^/static/[0-9a-fA-F]{8}</span><span class="se">\/</span><span class="s2">(.*)$"</span> <span class="o">{</span>
    <span class="c"># rewrite all static files into requests to the root</span>
    <span class="c"># E.g /static/12345678/css/something.css will become /css/something.css</span>
    rewrite <span class="s2">"^/static/[0-9a-fA-F]{8}</span><span class="se">\/</span><span class="s2">(.*)"</span> /<span class="nv">$1</span> last<span class="p">;</span>
  <span class="o">}</span>

  location /userContent <span class="o">{</span>
    <span class="c"># have nginx handle all the static requests to userContent folder</span>
    <span class="c"># note : This is the $JENKINS_HOME dir</span>
    root /var/lib/jenkins/<span class="p">;</span>
    <span class="k">if</span> <span class="o">(!</span><span class="nt">-f</span> <span class="nv">$request_filename</span><span class="o">){</span>
      <span class="c"># this file does not exist, might be a directory or a /**view** url</span>
      rewrite <span class="o">(</span>.<span class="k">*</span><span class="o">)</span> /<span class="nv">$1</span> last<span class="p">;</span>
      <span class="nb">break</span><span class="p">;</span>
    <span class="o">}</span>
    sendfile on<span class="p">;</span>
  <span class="o">}</span>

  location / <span class="o">{</span>
      sendfile off<span class="p">;</span>
      proxy_pass         http://jenkins<span class="p">;</span>
      proxy_redirect     default<span class="p">;</span>
      proxy_http_version 1.1<span class="p">;</span>

      <span class="c"># Required for Jenkins websocket agents</span>
      proxy_set_header   Connection        <span class="nv">$connection_upgrade</span><span class="p">;</span>
      proxy_set_header   Upgrade           <span class="nv">$http_upgrade</span><span class="p">;</span>

      proxy_set_header   Host              <span class="nv">$host</span><span class="p">;</span>
      proxy_set_header   X-Real-IP         <span class="nv">$remote_addr</span><span class="p">;</span>
      proxy_set_header   X-Forwarded-For   <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
      proxy_set_header   X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
      proxy_max_temp_file_size 0<span class="p">;</span>

      <span class="c">#this is the maximum upload size</span>
      client_max_body_size       10m<span class="p">;</span>
      client_body_buffer_size    128k<span class="p">;</span>

      proxy_connect_timeout      90<span class="p">;</span>
      proxy_send_timeout         90<span class="p">;</span>
      proxy_read_timeout         90<span class="p">;</span>
      proxy_buffering            off<span class="p">;</span>
      proxy_request_buffering    off<span class="p">;</span> <span class="c"># Required for HTTP CLI commands</span>
      proxy_set_header Connection <span class="s2">""</span><span class="p">;</span> <span class="c"># Clear for keepalive</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>위의 내용을 클립보드에 복사하고 jenkins.conf 파링에 붙여넣기 합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /etc/nginx/conf.d/
vi jenkins.conf
</code></pre></div></div>

<p>jenkins.conf에서 아래의 내용으로 변경합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root            /var/cache/jenkins/war/<span class="p">;</span>
</code></pre></div></div>

<p>nginx configuration을 테스트하고 nginx를 재시작합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nginx <span class="nt">-t</span>
systemctl restart nginx
</code></pre></div></div>

<p>browser에서 jenkins server에  80 port로 접속합니다.<br />
만약 502 Bad Gateway가 발생하면 아래의 명령어를 실행합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setenforce permissive
</code></pre></div></div>

<p>jenkins server에 접속하여 Manage jenkins &gt; Configure System 에 접속하여 jenkins URL을 변경합니다.</p>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><category term="nginx" /><summary type="html"><![CDATA[Jenkins를 Nginx Reverse Proxy를 설정하여 접근하는 것을 설명합니다.]]></summary></entry><entry><title type="html">Jenkins Port 변경</title><link href="http://localhost:4000/devops/change-jenkins-port/" rel="alternate" type="text/html" title="Jenkins Port 변경" /><published>2023-02-24T00:00:00+09:00</published><updated>2023-02-24T00:00:00+09:00</updated><id>http://localhost:4000/devops/change-jenkins-port</id><content type="html" xml:base="http://localhost:4000/devops/change-jenkins-port/"><![CDATA[<h2 id="jenkins-port-확인-및-복사">Jenkins Port 확인 및 복사</h2>
<p>Jenkins Default Port를 확인하기 위해 아래와 같이 명령어를 실행합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl edit jenkins <span class="nt">--full</span>
</code></pre></div></div>
<p>JENKINS_PORT를 검색해서  아래의 내용을 clipboard에 복사합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">Environment</span><span class="o">=</span><span class="s2">"JENKINS_PORT=8080"</span>
</code></pre></div></div>

<h2 id="jenkins-port-변경">Jenkins Port 변경</h2>
<p>jenkins.service 파일에서 Environment의 JENKINS_PORT=9080으로 변경합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl edit jenkins.service
<span class="nv">Environment</span><span class="o">=</span><span class="s2">"JENKINS_PORT=9080"</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl restart jenkins
</code></pre></div></div>

<p>위에서 지정한 Port로 접속해서 Port가 변경된 것을 확인합니다.</p>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><summary type="html"><![CDATA[Jenkins Port 확인 및 복사 Jenkins Default Port를 확인하기 위해 아래와 같이 명령어를 실행합니다. systemctl edit jenkins --full JENKINS_PORT를 검색해서 아래의 내용을 clipboard에 복사합니다. Environment="JENKINS_PORT=8080"]]></summary></entry><entry><title type="html">Jenkins 서버 재시작 방법</title><link href="http://localhost:4000/devops/how-to-restart-jenkins/" rel="alternate" type="text/html" title="Jenkins 서버 재시작 방법" /><published>2023-02-24T00:00:00+09:00</published><updated>2023-02-24T00:00:00+09:00</updated><id>http://localhost:4000/devops/how-to-restart-jenkins</id><content type="html" xml:base="http://localhost:4000/devops/how-to-restart-jenkins/"><![CDATA[<h2 id="jenkins-port-확인-및-복사">Jenkins Port 확인 및 복사</h2>
<p>Jenkins 를 재시작하는 방법은 3가지 있습니다.</p>
<ul>
  <li>systemctl 사용</li>
  <li>browser에서 restart</li>
  <li>browser에서 safeRestart</li>
</ul>

<h2 id="systemctl-사용">Systemctl 사용</h2>
<p>systemctl 명령어로 사용하는 경우 Jenkins Job이 실행중인 것이 있더라도 jenkins를 즉시 재시작합니다.<br />
Jenkins 가 재시작 이후 그존 실행중인 job은 다시 재개합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart jenkins
</code></pre></div></div>
<h2 id="browser에서-restart">browser에서 restart</h2>
<p>Jenkins를 로그인 해서 browser url에서 your-jenkins/restart를 입력하면 다음과 같이 재시작 여부를 묻는 메시지가 출력됩니다.</p>

<p>Are you sure you want to restart Jenkins?</p>

<p>Yes 버튼을 클릭합니다.</p>

<h2 id="browser에서-saferestart">browser에서 safeRestart</h2>
<p>browser에서 safeRestart를 수행하면 다음과 같이 메시지가 출력됩니다. 기존 수행중인 Job 은 중단되고, Jenkins가 재시작하면 다시 재게합니다.<br />
Yes 버튼을 클릭합니다.</p>

<p>Are you sure you want to restart Jenkins? Jenkins will restart once all running jobs are finished. (Pipeline builds may prevent Jenkins from restarting for a short period of time in some cases, but if so, they will be paused at the next available opportunity and then resumed after Jenkins restarts.)</p>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><summary type="html"><![CDATA[Jenkins Port 확인 및 복사 Jenkins 를 재시작하는 방법은 3가지 있습니다. systemctl 사용 browser에서 restart browser에서 safeRestart]]></summary></entry><entry><title type="html">Jenkins-Prometheus/Grafana 설치</title><link href="http://localhost:4000/devops/jenkins-with-grafana/" rel="alternate" type="text/html" title="Jenkins-Prometheus/Grafana 설치" /><published>2023-02-19T00:00:00+09:00</published><updated>2023-02-19T00:00:00+09:00</updated><id>http://localhost:4000/devops/jenkins%20with%20grafana</id><content type="html" xml:base="http://localhost:4000/devops/jenkins-with-grafana/"><![CDATA[<h2 id="jenkins-와-prometheusgrafana-여녜">Jenkins 와 Prometheus/Grafana 여녜</h2>

<p>Jenkins Controller와 Agent를 를 모너터링하기 위해 Prometheus Plugin을 설치하고 Jenkins에서 수집한 
Metrics정보를 기반으로 Prometheus를 통해 Metrics 정보를 주시적으로 수집하고, 수집된 정보를 기반으로 Grafana에 Visual하게
모니터링합니다.</p>

<h2 id="prometheus-metrics-plugin-설치">Prometheus metrics plugin 설치</h2>

<p>Manage Jenkins &gt; Manage Plugins &gt; Available Plugins에서 Prometheus metrics Plugins을 선택, 
Install without restart를 클릭해서 Plugin을 설치합니다.</p>

<p><img src="/assets/images/jenkins/01-prometheus-plugin.png" alt="gitlab-ce" /></p>

<h2 id="prometheus-설정">Prometheus 설정</h2>
<p>prometheus.yml 파일을 작성합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>global:
  scrape_interval:     15s <span class="c"># By default, scrape targets every 15 seconds.</span>
  evaluation_interval: 15s
  scrape_timeout:      10s

  <span class="c"># Attach these labels to any time series or alerts when communicating with</span>
  <span class="c"># external systems (federation, remote storage, Alertmanager).</span>
  external_labels:
    monitor: <span class="s1">'codelab-monitor'</span>

<span class="c"># A scrape configuration containing exactly one endpoint to scrape:</span>
<span class="c"># Here it's Prometheus itself.</span>
scrape_configs:
  <span class="c"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span>
  - job_name: <span class="s1">'prometheus'</span>

    <span class="c"># Override the global default and scrape targets from this job every 5 seconds.</span>
    scrape_interval: 5s

    static_configs:
      - targets: <span class="o">[</span><span class="s1">'localhost:9090'</span><span class="o">]</span>
  - job_name: <span class="s1">'jenkins'</span>
    metrics_path: /prometheus/
    static_configs:
      - targets: <span class="o">[</span><span class="s1">'Your-JenkinsIP:8080'</span><span class="o">]</span>
</code></pre></div></div>

<h2 id="prometheusgrafana-설정">Prometheus/Grafana 설정</h2>
<p>Prometheus/Grafana 폴더를 binding하기 위해 폴더를 생성합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> prometheus grafana/provisioning grafana/volume
</code></pre></div></div>
<p>grafana.ini 파일을 작성합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app_mode <span class="o">=</span> production
instance_name <span class="o">=</span> virtualserver01.HyukSeoung-Choi-s-Account.cloud

<span class="c">#################################### Server ########################</span>
protocol <span class="o">=</span> http
http_addr <span class="o">=</span>
http_port <span class="o">=</span> 3000

<span class="c">#################################### Database #######################</span>
<span class="o">[</span>database]
<span class="nb">type</span> <span class="o">=</span> mysql
host <span class="o">=</span> db:3306
name <span class="o">=</span> grafana
user <span class="o">=</span> grafana
password <span class="o">=</span> grafana


<span class="c">#################################### Logging ########################</span>
<span class="o">[</span>log]
mode <span class="o">=</span> console
level <span class="o">=</span> info

<span class="c">#################################### Alerting ########################</span>
<span class="o">[</span>alerting]
enabled <span class="o">=</span> <span class="nb">true</span>
</code></pre></div></div>

<p><img src="/assets/images/jenkins/02-prometheus-folder.png" alt="gitlab-ce" /></p>

<h2 id="prometheusgrafana-작성">Prometheus/Grafana 작성</h2>
<p>Prometheus/Grafana docker-compose 파일을 작성합니다.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.9"</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">monitering</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">bridge</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">mysql-data</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">grafana-data</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">prometheus-data</span><span class="pi">:</span> <span class="pi">{}</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:5.7</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MYSQL_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">grafana</span>
      <span class="na">MYSQL_DATABASE</span><span class="pi">:</span> <span class="s">grafana</span>
      <span class="na">MYSQL_USER</span><span class="pi">:</span> <span class="s">grafana</span>
      <span class="na">MYSQL_PASSWORD</span><span class="pi">:</span> <span class="s">grafana</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mysql-data:/var/lib/mysql</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">monitering</span>
    <span class="na">logging</span><span class="pi">:</span>
      <span class="na">driver</span><span class="pi">:</span> <span class="s2">"</span><span class="s">json-file"</span>
      <span class="na">options</span><span class="pi">:</span>
        <span class="na">max-size</span><span class="pi">:</span> <span class="s2">"</span><span class="s">8m"</span>
        <span class="na">max-file</span><span class="pi">:</span> <span class="s2">"</span><span class="s">10"</span>

  <span class="na">node-exporter</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">prom/node-exporter:latest</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">node-exporter</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">/proc:/host/proc:ro</span>
      <span class="pi">-</span> <span class="s">/sys:/host/sys:ro</span>
      <span class="pi">-</span> <span class="s">/:/rootfs:ro</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--path.procfs=/host/proc'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--path.rootfs=/rootfs'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--path.sysfs=/host/sys'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9100:9100"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">monitering</span>

  <span class="na">prometheus</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">prom/prometheus:latest</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">prometheus</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span>
      <span class="pi">-</span> <span class="s">prometheus-data:/prometheus</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--config.file=/etc/prometheus/prometheus.yml'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--storage.tsdb.path=/prometheus'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--web.console.libraries=/etc/prometheus/console_libraries'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--web.console.templates=/etc/prometheus/consoles'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--web.enable-lifecycle'</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9090:9090"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">monitering</span>

  <span class="na">grafana</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">grafana</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">grafana/grafana</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s2">"</span><span class="s">104"</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3000:3000"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./grafana/grafana.ini:/etc/grafana/grafana.ini:ro</span>
      <span class="pi">-</span> <span class="s">grafana-data:/var/lib/grafana</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">prometheus</span>
      <span class="pi">-</span> <span class="s">db</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">monitering</span>
    <span class="na">logging</span><span class="pi">:</span>
      <span class="na">driver</span><span class="pi">:</span> <span class="s2">"</span><span class="s">json-file"</span>
      <span class="na">options</span><span class="pi">:</span>
        <span class="na">max-size</span><span class="pi">:</span> <span class="s2">"</span><span class="s">8m"</span>
        <span class="na">max-file</span><span class="pi">:</span> <span class="s2">"</span><span class="s">10"</span>
</code></pre></div></div>

<h2 id="prometheusgrafana-실행">Prometheus/Grafana 실행</h2>
<p>docker-compose.yaml 파일이 있는 폴더에서  docker-compose를 실행합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><category term="prometheus" /><category term="grafana" /><summary type="html"><![CDATA[Jenkins 와 Prometheus/Grafana 여녜]]></summary></entry><entry><title type="html">Jenkins-Grafana 설정</title><link href="http://localhost:4000/devops/grafana-setup/" rel="alternate" type="text/html" title="Jenkins-Grafana 설정" /><published>2023-02-19T00:00:00+09:00</published><updated>2023-02-19T00:00:00+09:00</updated><id>http://localhost:4000/devops/grafana%20setup</id><content type="html" xml:base="http://localhost:4000/devops/grafana-setup/"><![CDATA[<h2 id="grafana-로그인">Grafana 로그인</h2>
<p>Grafana에 로그인하고, 비밀번호를 변경합니다.<br />
<img src="/assets/images/jenkins/03-grafana-login.png" alt="gitlab-ce" /></p>

<h2 id="prometheus-설정">Prometheus 설정</h2>
<p>Grafana에 로그인하면 다음과 같이 화면이 출력됩니다.<br />
<img src="/assets/images/jenkins/04-grafana-first.png" alt="gitlab-ce" /></p>

<p>설정을 선택하고, Grafana에 datasource를 추가하기 위해 Add data source를 클릭합니다.<br />
<img src="/assets/images/jenkins/05-grafana-add-datasource.png" alt="gitlab-ce" /></p>

<p>Prometheus datasource를 선택합니다.<br />
<img src="/assets/images/jenkins/06-grafana-prometheus-datasource.png" alt="gitlab-ce" /></p>

<p>Prometheus datasource를 설정합니다.<br />
<img src="/assets/images/jenkins/06-grafana-prometheus-setting.png" alt="gitlab-ce" /></p>

<p>Prometheus save-test 버튼을 클릭하면 Data source is working 메시지를 출력됩니다.<br />
![gitlab-ce](/assets/images/jenkins/07-grafana-prometheus-save-test.png</p>

<h2 id="jenkins-dashboard-선택">Jenkins dashboard 선택</h2>

<p><a href="https://grafana.com/grafana/dashboards/">https://grafana.com/grafana/dashboards/</a> 에서 download jenkins dashboard를 선택합니다.</p>

<p><img src="/assets/images/jenkins/08-grafana-select-dashboard.png" alt="gitlab-ce" /></p>

<p>Jenkins Dashbaord Id를 clipboard에 복사합니다.<br />
<img src="/assets/images/jenkins/09-grafana-copy-clipboard.png" alt="gitlab-ce" /></p>

<p>Grafana에 Jenkins Dashboard ID를 반입합니다.<br />
<img src="/assets/images/jenkins/10-grafana-import-id.png" alt="gitlab-ce" /></p>

<p>Dashboard ID를 load합니다.<br />
<img src="/assets/images/jenkins/11-grafana-load.png" alt="gitlab-ce" /></p>

<p>Dashboard ID를 load합니다.<br />
<img src="/assets/images/jenkins/11-grafana-load.png" alt="gitlab-ce" /></p>

<p>Prometheus 항목에서 Prometheus-jenkins를 선택하고 import 버튼을 클릭합니다.<br />
<img src="/assets/images/jenkins/12-grafana-import-prometheus.png" alt="gitlab-ce" /></p>

<p>Jenkins Dashboard가 import 된 화면이 출력됩니다.<br />
<img src="/assets/images/jenkins/12-grafana-import-prometheus.png" alt="gitlab-ce" /></p>

<p>Jenkins Dashboard 첫 화면이 출력됩니다.<br />
<img src="/assets/images/jenkins/13-grafana-first-logon.png" alt="gitlab-ce" /></p>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><category term="prometheus" /><category term="grafana" /><summary type="html"><![CDATA[Grafana 로그인 Grafana에 로그인하고, 비밀번호를 변경합니다.]]></summary></entry><entry><title type="html">Helm 설치</title><link href="http://localhost:4000/kubernetes/install-helm/" rel="alternate" type="text/html" title="Helm 설치" /><published>2023-02-18T00:00:00+09:00</published><updated>2023-02-18T00:00:00+09:00</updated><id>http://localhost:4000/kubernetes/install%20helm</id><content type="html" xml:base="http://localhost:4000/kubernetes/install-helm/"><![CDATA[<h2 id="helm-cli를--설치">Helm CLI를  설치</h2>
<p>Helm Chart를 설치하기 위해 Helm CLI를 설치합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> curl <span class="nt">-fsSL</span> <span class="nt">-o</span> get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
<span class="nb">chmod </span>700 get_helm.sh
./get_helm.sh
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="kubernetes" /><category term="helm" /><category term="헬치" /><summary type="html"><![CDATA[Helm CLI를 설치 Helm Chart를 설치하기 위해 Helm CLI를 설치합니다. curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 chmod 700 get_helm.sh ./get_helm.sh]]></summary></entry><entry><title type="html">Jenkins master/slave 구성</title><link href="http://localhost:4000/devops/jenkins-controller-and-agent/" rel="alternate" type="text/html" title="Jenkins master/slave 구성" /><published>2023-02-18T00:00:00+09:00</published><updated>2023-02-18T00:00:00+09:00</updated><id>http://localhost:4000/devops/jenkins%20controller%20and%20agent</id><content type="html" xml:base="http://localhost:4000/devops/jenkins-controller-and-agent/"><![CDATA[<h2 id="jenkins-설치">Jenkins 설치</h2>

<p>Jenkins Master/Slave는 Controller/Agent로 명칭을 수정해서 글을 post합니다.</p>

<p><a href="https://yoonjk.github.io/devops/setup-jenkins/">Jenkins 설치 따라하기</a>를 참조해서 Jenkins를 설치합니다.</p>

<h2 id="jenkins-agent-개요">Jenkins Agent 개요</h2>

<p>Jenkins Pipeline을 remote Node에서 실행할 Agent를 추가합니다.<br />
Jenkins Agent는 다음과 같이 유형의 Agent가 있습니다.</p>

<ul>
  <li>Server 기반의 Agent</li>
  <li>Docker Container</li>
  <li>Kubernetes Dynamic Pod Agent</li>
</ul>

<p>Server 기반 Agent도 JNLP 기반 Agent와 ssh 기반 Agent가 있습니다.
JNLP기반 Agent는 분산된 서버에 agent.jar를 설치하고, 
java agent를 실행하고 Jenkins Master(Controller)와 연될되어 Pipeline을 실행합니다.</p>

<p>Docker Container 기반 Agent는 선언형 Pipeline에서 각 stage별로 적합한 container를 설정하여 docker를 실행합니다.</p>

<p>Dynmaic Kubernetes Pod Agent는 pipeline을 Kubernetes cluster에 Pod로 실행하고, 종료되면 Pod가 소별하는 방식입니다.</p>

<h2 id="jenkins-agent-node">Jenkins Agent Node</h2>
<p>Agent Node에 jenkins 계정을 생성하고, jenkins 패스워드를 지정합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>useradd jenkins
su - jenkins
<span class="nb">mkdir</span> <span class="nt">-p</span> .ssh
<span class="nb">exit
</span>passwd jenkins
</code></pre></div></div>

<h2 id="jenkins-controller-node">Jenkins Controller Node</h2>
<p>Jenkins Controller에서 인증서를 생성합니다.  <br />
<img src="/assets/images/jenkins/22-jenkins-master-agent.png" alt="New Node" /></p>

<p>공개 키를 Agent Node에 복사합니다.
Are you sure you want to continue connecting (yes/no)? yes를 입력합니다.<br />
Agent Node에서 ~/.ssh 폴더에 authorized_keys 파일이 생성된 것을 확인합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp  ~/.ssh/id_rsa.pub jenkins@Your-AgentNodeIP:/home/jenkins/.ssh/authorized_keys
</code></pre></div></div>
<p><img src="/assets/images/jenkins/22-jenkins-scp-credentials.png" alt="New Node" /></p>

<h2 id="jenkins-agent-node-1">Jenkins Agent Node</h2>
<p>Agent Node에서 .ssh 폴더와 authorized_keys의 접근권한을 설정합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>700 .ssh
<span class="nb">chmod </span>644 ~/.ssh/authorized_keys
</code></pre></div></div>
<h2 id="jenkins-controller-node-1">Jenkins Controller Node</h2>
<p>Jenkins Controller Node에서 ssh로 Jenkins Agent로 접속하여 비밀번호를 없이 접속되는지 확인합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh jenkins@Your-Jenkins-AgentIP
</code></pre></div></div>

<p><img src="/assets/images/jenkins/22-jenkins-ssh-connect.png" alt="New Node" /></p>

<h2 id="agent-환경구성">Agent 환경구성</h2>

<p>Manage Jenkins를 선택하고, Manage Nodes and Clouds를 선택<br />
<img src="/assets/images/jenkins/23-jenkins-manage-nodes-clouds.png" alt="New Node" /></p>

<p>New Node를 선택합니다.<br />
<img src="/assets/images/jenkins/24-jenkins-new-agent.png" alt="New Node" /></p>

<p>Agent에 name, label agent root directory를 설정합니다.
Number of executors는 Agent의 vcpu 개수만큼 지정합니다.    <br />
<img src="/assets/images/jenkins/25-jenkins-agent-root-dir.png" alt="New Node" /></p>

<p>Agent Node IP 설정 및 ssh로 접속하기 위해 credentials을 설정합니다.<br />
<img src="/assets/images/jenkins/24-jenkins-launch-method.png" alt="New Node" /></p>

<p>Add credentials을 선택합니다.<br />
<img src="/assets/images/jenkins/26-jenkins-add-credentials.png" alt="New Node" /></p>

<p>Kind 선택항목에서 username with private key 를 선택하고, ID, Description, username을 설정합니다.<br />
<img src="/assets/images/jenkins/28-jenkins-username-with-private-key.png" alt="New Node" /></p>

<p>Private Key 항목에서 Enter directly를 선택하고, Add 버튼을 클릭합니다. <br />
<img src="/assets/images/jenkins/27-jenkins-private-key-enter-directly.png" alt="New Node" /></p>

<p>Jenkins Controller Node에서 생성한 private key 인증서의 내용을 복사하여 붙여넣기하고 저장합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa
</code></pre></div></div>
<p>Jenkins Controller Node에서  ~/.ssh/id_rsa 인증서 내용을 복사합니다.<br />
<img src="/assets/images/jenkins/29-jenkins-copy-id_rsa.png" alt="New Node" /></p>

<p>id_rsa 인증서 내용을 붙여넣기하고 Add버튼클 클릭합니다.<br />
<img src="/assets/images/jenkins/29-jenkins-paste-private-key-and-save.png" alt="New Node" /></p>

<p>Jenkins Agent에서 Credentials을 선택하고, Host Key Verification Strategy 에서 Manually trusted key Verification Strategy를 선택하고, 저장버튼을 클릭합니다.<br />
<img src="/assets/images/jenkins/30-jenkins-select-credentials.png" alt="New Node" /></p>

<p>Jenkins Controller 인 Built-in-Node를 선택해서 Number of executors의 항목을 0으로 설정하고 저장합니다.</p>

<p><img src="/assets/images/jenkins/31-jenkins-build-in-node.png" alt="New Node" /></p>

<p>Manage Jenkins &gt; Global Tool Configuration에서 Maven installations 세션에서 
maven을 다음과 같이 추가합니다.<br />
<img src="/assets/images/jenkins/32-jenkins-global-tool-config-maven.png" alt="New Node" /></p>

<p>Manage Jenkins &gt; Manage Nodes and Clouds &gt; linux agent를 선택
Configure 를 선택해서 Node Properties 섹션에서 maven을 설정하고 저장합니다. <br />
<img src="/assets/images/jenkins/33-jenkins-linux-agent-tool-location.png" alt="New Node" /></p>

<p>Jenkins Agent Node에서 다음의 명령어를 실행합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>sysctl user.max_user_namespaces<span class="o">=</span>15000
</code></pre></div></div>
<p><img src="/assets/images/jenkins/34-jenkins-max_user_namespace.png" alt="New Node" /></p>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><category term="master" /><category term="slave" /><summary type="html"><![CDATA[Jenkins 설치]]></summary></entry></feed>