<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-30T20:35:46+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cloud Native Journey</title><subtitle>Software Engineer/Architect</subtitle><author><name>Jaeguk Yun</name></author><entry><title type="html">리모트 서버에서 Harbor 서버에 docker login</title><link href="http://localhost:4000/docker/%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-Harbor-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="리모트 서버에서 Harbor 서버에 docker login" /><published>2023-01-29T00:00:00+09:00</published><updated>2023-01-29T00:00:00+09:00</updated><id>http://localhost:4000/docker/%EB%A6%AC%EB%AA%A8%ED%8A%B8%20%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C%20Harbor%20%EC%97%90%20%EB%A1%9C%EA%B7%B8%EC%9D%B8%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/docker/%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-Harbor-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8%ED%95%98%EA%B8%B0/"><![CDATA[<h2 id="리모트-서버에서-harbor-서버에-docker-login">리모트 서버에서 Harbor 서버에 docker login</h2>

<p>리모트 서버는 Centos7을 기준으로 합니다.</p>

<p>Harbor Container Registry를 구축하고 리모트 서버에서 docker login 하기 위해 환경을 설정합니다.</p>

<h2 id="step-1-setup-docker-engine">Step 1: Setup Docker Engine</h2>

<p>Docker Engine 설치는 아래 링크를 따라 설치과정을 참고해주세요</p>

<p><a href="https://yoonjk.github.io/docker/docker/">Docker Engine 설치</a></p>

<h2 id="step-2--jfrog-artifactory-docker-image-를-download">Step 2 : JFrog Artifactory Docker Image 를 download</h2>

<p>hosts file 파일에 domain을 등록합니다.</p>

<p>Harbor 설치서버의 사설 도메인 서버 이름이 server1.example.com 라고 가정하고 경우</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"119.81.103.68 server1.example.com"</span> <span class="o">&gt;&gt;</span> /etc/hosts
</code></pre></div></div>

<h2 id="step-3--harbor-에서-제공하는-ca-인증서를-복사">Step 3 : Harbor 에서 제공하는 CA 인증서를 복사</h2>

<p>Harbor 에서 제공하는 CA 인증서를 복사하고, 인증서 참조 디렉토리에 복사합니다.<br />
ca 인증서가 /root/certs 폴더에 있다고 가정합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>scp root@119.81.103.68:/root/certs/ca.crt <span class="nb">.</span>

<span class="nb">sudo cp </span>ca.crt /etc/pki/ca-trust/source/anchors/

update-ca-trust extract
</code></pre></div></div>

<h2 id="step-4-restart-docker-engine-및-로그인">Step 4: Restart Docker Engine 및 로그인</h2>
<p>Docker Engine을 재시작합니다.</p>

<p>Harbor Domain 이 server1.example.com 이라고 가정하고,<br />
로그인 사용자가 user01로 생성되어 있다면 다음과 같이 수행합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart docker
docker login <span class="nt">-u</span> user01 <span class="nt">-p</span> XXXX server1.example.com

WARNING! Using <span class="nt">--password</span> via the CLI is insecure. Use <span class="nt">--password-stdin</span><span class="nb">.</span>
WARNING! Your password will be stored unencrypted <span class="k">in</span> /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="Harbor" /><summary type="html"><![CDATA[리모트 서버에서 Harbor 서버에 docker login]]></summary></entry><entry><title type="html">Docker Engine 설치 on Centos7</title><link href="http://localhost:4000/docker/docker/" rel="alternate" type="text/html" title="Docker Engine 설치 on Centos7" /><published>2023-01-29T00:00:00+09:00</published><updated>2023-01-29T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker</id><content type="html" xml:base="http://localhost:4000/docker/docker/"><![CDATA[<h2 id="jfrog-on-docker">JFrog on Docker</h2>
<p>Centos7 기반 Docker Engine을 설치합니다.</p>

<h2 id="step-1-upgrade-os-package">Step 1: Upgrade OS package</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dnf upgrade <span class="nt">-y</span>
</code></pre></div></div>

<h2 id="step-2--install-docker-engine">Step 2 : Install Docker engine</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> yum-utils

</code></pre></div></div>
<p>Docker CE repsoitory정보를 download 합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum-config-manager <span class="nt">--add-repo</span> https://download.docker.com/linux/centos/docker-ce.repo
</code></pre></div></div>
<p>For Docker CE edition:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull docker.bintray.io/jfrog/artifactory-cpp-ce

yum <span class="nb">install</span> <span class="nt">-y</span> docker-ce docker-ce-cli containerd
</code></pre></div></div>

<p>Docker 를 시작합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start docker
</code></pre></div></div>

<p>Docker가 정상 설치되었는지 확인하기 위해 hello-world docker image를 download 받습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull hello-world
</code></pre></div></div>

<h2 id="step-3--install-docker-compose">Step 3 : Install docker-compose</h2>
<p>Docker compose를 download 받아서 설정합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">DOCKER_CONFIG</span><span class="o">=</span>/usr/local/lib/docker 
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$DOCKER_CONFIG</span>/cli-plugins

curl <span class="nt">-SL</span> https://github.com/docker/compose/releases/download/v2.14.2/docker-compose-linux-x86_64 <span class="nt">-o</span> <span class="nv">$DOCKER_CONFIG</span>/cli-plugins/docker-compose

<span class="nb">chmod</span> +x <span class="nv">$DOCKER_CONFIG</span>/cli-plugins/docker-compose
</code></pre></div></div>

<p>~/.bash_profile에  DOCER_CONFIG 환경변수를 추가하고 path에 DOCKER_CONFIG를 추가하고 저장합니다</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.bash_profile 

<span class="nv">DOCKER_CONFIG</span><span class="o">=</span>/usr/local/lib/docker
<span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$HOME</span>/bin:<span class="nv">$DOCKER_CONFIG</span>/cli-plugins
</code></pre></div></div>

<p>docker-compose가  정상적으로 설치되었는지 docker-compose 명령어를 실행해 봅니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose version
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="docker" /><category term="docker-compose" /><summary type="html"><![CDATA[JFrog on Docker Centos7 기반 Docker Engine을 설치합니다.]]></summary></entry><entry><title type="html">Docker 기반 JFrog 설치</title><link href="http://localhost:4000/docker/jfrog/" rel="alternate" type="text/html" title="Docker 기반 JFrog 설치" /><published>2023-01-29T00:00:00+09:00</published><updated>2023-01-29T00:00:00+09:00</updated><id>http://localhost:4000/docker/jfrog</id><content type="html" xml:base="http://localhost:4000/docker/jfrog/"><![CDATA[<h2 id="jfrog-on-docker">JFrog on Docker</h2>
<p>Docker 기반 JFrog를 설치합니다.</p>

<h2 id="step-1-install-docker-engine-on-centos7">Step 1: Install Docker Engine on Centos7</h2>

<p><a href="https://docs.docker.com/engine/install/">Docker</a> 설치 방법은 다음을 참고하세요.</p>

<p><a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p>

<h2 id="step-2--jfrog-artifactory-docker-image-를-download">Step 2 : JFrog Artifactory Docker Image 를 download</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull docker.bintray.io/jfrog/artifactory-oss:latest
</code></pre></div></div>

<p>For CE edition:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull docker.bintray.io/jfrog/artifactory-cpp-ce


docker images

docker images <span class="s2">"*/jfrog/*"</span>
<span class="nt">-------------------------------------------------------------------------------------------</span>
REPOSITORY                                   TAG       IMAGE ID       CREATED       SIZE
docker.bintray.io/jfrog/artifactory-cpp-ce   latest    407fa40e86ef   2 weeks ago   1.55GB
docker.bintray.io/jfrog/artifactory-oss      latest    e337af54f237   2 weeks ago   1.48G

</code></pre></div></div>
<h2 id="step-3--create-data-directory">Step 3 : Create Data Directory</h2>
<p>컨테이너에서 사용되는 데이터가 영구적으로 저장하기 위해 시스템에 데이터 디렉토리를 생성합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> <span class="nt">-p</span> /jfrog/artifactory
<span class="nb">sudo chown</span> <span class="nt">-R</span> 1030 /jfrog/
</code></pre></div></div>

<h2 id="step-4-start-jfrog-artifactory-container">Step 4: Start JFrog Artifactory container</h2>
<p>Artifactory 컨테이너를 시작하려면 다음 명령을 사용하십시오.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--name</span> artifactory <span class="nt">-d</span> <span class="nt">-p</span> 8081:8081 <span class="nt">-p</span> 8082:8082 <span class="se">\</span>
<span class="nt">-v</span> /jfrog/artifactory:/var/opt/jfrog/artifactory <span class="se">\</span>
docker.bintray.io/jfrog/artifactory-oss:latest


docker ps
<span class="nt">---------------------------------------------------------------------------</span>
CONTAINER ID   IMAGE                                            COMMAND                  CREATED         STATUS         PORTS                                                           NAMES
29c549fecd50   docker.bintray.io/jfrog/artifactory-oss:latest   <span class="s2">"/entrypoint-artifac…"</span>   9 minutes ago   Up 9 minutes   0.0.0.0:8081-8082-&gt;8081-8082/tcp, :::8081-8082-&gt;8081-8082/tcp   artifactory
</code></pre></div></div>

<h2 id="step-5--running-jfrog-artifactory-container-with-systemd">Step 5 : Running JFrog Artifactory container with Systemd</h2>

<p>Systemd는 CentOS 7의 기본 초기화 시스템입니다. 이를 사용하여 JFrog Artifactory 컨테이너를 시스템 시작시 
시작할 수 있도록 관리할 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/systemd/system/artifactory.service
</code></pre></div></div>

<p>아래 내용을 추가합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Unit]
<span class="nv">Description</span><span class="o">=</span>Setup Systemd script <span class="k">for </span>Artifactory Container
<span class="nv">After</span><span class="o">=</span>network.target

<span class="o">[</span>Service]
<span class="nv">Restart</span><span class="o">=</span>always
<span class="nv">ExecStartPre</span><span class="o">=</span>-/usr/bin/docker <span class="nb">kill </span>artifactory
<span class="nv">ExecStartPre</span><span class="o">=</span>-/usr/bin/docker <span class="nb">rm </span>artifactory
<span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/docker run <span class="nt">--name</span> artifactory <span class="nt">-p</span> 8081:8081 <span class="nt">-p</span> 8082:8082 <span class="se">\</span>
  <span class="nt">-v</span> /jfrog/artifactory:/var/opt/jfrog/artifactory <span class="se">\</span>
  docker.bintray.io/jfrog/artifactory-oss:latest
<span class="nv">ExecStop</span><span class="o">=</span>-/usr/bin/docker <span class="nb">kill </span>artifactory
<span class="nv">ExecStop</span><span class="o">=</span>-/usr/bin/docker <span class="nb">rm </span>artifactory

<span class="o">[</span>Install]
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target

</code></pre></div></div>

<p>Reload systemd.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
</code></pre></div></div>

<p>systemd를 이용하여 Artifactory Container를 시작합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start artifactory
</code></pre></div></div>

<p>시스템이 재시작될 때 JFrog를 시작할 수 있도록 활성화합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>artifactory
</code></pre></div></div>

<p>JFrog 서비스가 실행중인지 상태를 확인합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl status artifactory
</code></pre></div></div>

<p>서비스의 포트 binding 을 확인합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ss <span class="nt">-tunelp</span> | <span class="nb">grep </span>8081
</code></pre></div></div>

<h2 id="step-6-web-ui에서-artifactory-서버에-접근">Step 6: WEB UI에서 Artifactory 서버에 접근</h2>

<p>JFrog Artifactory에 접근하기 위해 브라우저 URL에서 8081 포트로 접근합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://자신의 서버 IP 또는 localhost:8081/artifactory
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="JFrog" /><summary type="html"><![CDATA[JFrog on Docker Docker 기반 JFrog를 설치합니다.]]></summary></entry><entry><title type="html">Install MiniKube for Jenkins</title><link href="http://localhost:4000/kubernetes/install-minikube/" rel="alternate" type="text/html" title="Install MiniKube for Jenkins" /><published>2023-01-24T00:00:00+09:00</published><updated>2023-01-24T00:00:00+09:00</updated><id>http://localhost:4000/kubernetes/install-minikube</id><content type="html" xml:base="http://localhost:4000/kubernetes/install-minikube/"><![CDATA[<h2 id="pre-requisites---install-docker">Pre-requisites - Install Docker</h2>

<p>yum utils을 설치합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> yum-utils
</code></pre></div></div>

<p>Docker repository 정보를 download 받습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum-config-manager <span class="se">\</span>
<span class="nt">--add-repo</span> <span class="se">\</span>
https://download.docker.com/linux/centos/docker-ce.repo
</code></pre></div></div>

<p>최신 버전의 Docker Engine, containerd를 설치하거나 다음 단계로 이동하여 특정 버전을 설치합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> docker-ce docker-ce-cli containerd.io
</code></pre></div></div>

<p>docker를 시작합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start docker
</code></pre></div></div>

<p>docker daemon이 정상 설치되었는지 hello-world docker image를 pull하기 위해 다음 명령어를 수행하여 확인합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull hello-world 
</code></pre></div></div>

<p>[수행결과]
<img src="/assets/images/jenkins/07-jenkins-docker-hello-world.png" alt="docker pull hello-world" /></p>

<p>docker images를 수행하여 아래와 같이 출력되는 확인합니다</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker images
</code></pre></div></div>

<p>[수행결과]
<img src="/assets/images/jenkins/08-jenkins-docker-images.png" alt="docker pull hello-world" /></p>

<h2 id="install-minikube">Install MiniKube</h2>

<p>minikube를 download 하고 minikube를 설치합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-LO</span> https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
<span class="nb">sudo mv </span>minikube-linux-amd64 /usr/local/bin/minikube
<span class="nb">chmod</span> +x /usr/local/bin/minikube
</code></pre></div></div>

<p>minikube를 다음과 같이 시작합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube start <span class="nt">--driver</span><span class="o">=</span>docker <span class="nt">--force</span>
</code></pre></div></div>

<p>kubectl CLI download 합니다</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-L</span> <span class="s2">"https://dl.k8s.io/release/</span><span class="si">$(</span>curl <span class="nt">-L</span> <span class="nt">-s</span> https://dl.k8s.io/release/stable.txt<span class="si">)</span><span class="s2">/bin/linux/amd64/kubectl"</span> <span class="nt">-o</span> /usr/local/bin/kubectl

<span class="nb">chmod</span> +x /usr/local/bin/kubectl

kubectl get po <span class="nt">-A</span>
</code></pre></div></div>

<h2 id="configure-for-connecting-jenkins">Configure for connecting Jenkins</h2>

<p>jenkins에서 minikube에 접속하기 위해  Kubernetes 의 credentials 정보가 있는 $HOME/.kube/config 파일을 확인합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less ~/.kube/config
</code></pre></div></div>

<p><img src="/assets/images/jenkins/09-jenkins-kube-config.png" alt="kube-config" /></p>

<p>위의 cluster CA 정보의 client 인증서 파일 경로를 데이터의 내용으로 변경 합니다
<img src="/assets/images/jenkins/10-jenkins-kube-config-2.png" alt="kube-config" /></p>

<p>아래의 명령어로 ca.crt, client.crt, client.key 파일의 내용을 다음의 명령어로 변환합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /root/.minikube/ca.crt|base64 <span class="nt">-w0</span><span class="p">;</span><span class="nb">echo
cat</span> /root/.minikube/profiles/minikube/client.crt|base64 <span class="nt">-w0</span><span class="p">;</span><span class="nb">echo
cat</span> /root/.minikube/profiles/minikube/client.key|base64 <span class="nt">-w0</span><span class="p">;</span><span class="nb">echo</span>
</code></pre></div></div>

<p>certificate-authority =&gt; certificate-authority-data로 변경
client-certificate =&gt; client-certificate-data 로 변경
client-key =&gt; client-key-data 로 변경</p>

<p><img src="/assets/images/jenkins/11-jenkins-change-kube-config.png" alt="kube-config" /></p>

<p>default namespace의 pod 목록이 조회되는지 다음과 같이 확인합니다.</p>

<p>kubectl get pods</p>

<p>[수행결과]
No resources found in default namespace.</p>]]></content><author><name>Jaeguk Yun</name></author><category term="kubernetes" /><category term="minikube" /><summary type="html"><![CDATA[Pre-requisites - Install Docker]]></summary></entry><entry><title type="html">Docker 기반 Bitbucket 설치</title><link href="http://localhost:4000/docker/altassian-bitbucket-jira/" rel="alternate" type="text/html" title="Docker 기반 Bitbucket 설치" /><published>2023-01-24T00:00:00+09:00</published><updated>2023-01-24T00:00:00+09:00</updated><id>http://localhost:4000/docker/altassian-bitbucket-jira</id><content type="html" xml:base="http://localhost:4000/docker/altassian-bitbucket-jira/"><![CDATA[<h2 id="bitbucket-on-docker">Bitbucket on Docker</h2>
<p>Docker 기반 Bitbucket 입니다.</p>

<pre><code class="language-YAML">version: '3'
networks:
 jenkins-net:
    driver: bridge

services:
  bitbucket:
    container_name: bitbucket
    image: atlassian/bitbucket-server:latest
    environment:
      - 'BITBUCKET_PROXY_PORT='
      - 'BITBUCKET_PROXY_SCHEME='
      - 'BITBUCKET_DELAYED_START='
      - 'DOCKER_WAIT_HOST=postgres'
      - 'DOCKER_WAIT_PORT=5432'
    networks:
      - jenkins-net
    ports:
      - "8990:7990"

  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - ./data:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_USER=postgres'
      # CHANGE THE PASSWORD!
      - 'POSTGRES_PASSWORD=admin1234'
      - 'POSTGRES_DB=bitbucket'
      - 'POSTGRES_ENCODING=UTF8'
    networks:
      - jenkins-net
    ports:
      - "5432:5432"
</code></pre>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="bitbucket" /><summary type="html"><![CDATA[Bitbucket on Docker Docker 기반 Bitbucket 입니다.]]></summary></entry><entry><title type="html">Jenkins 시작</title><link href="http://localhost:4000/devops/start-up-jenkins/" rel="alternate" type="text/html" title="Jenkins 시작" /><published>2023-01-24T00:00:00+09:00</published><updated>2023-01-24T00:00:00+09:00</updated><id>http://localhost:4000/devops/start-up%20jenkins</id><content type="html" xml:base="http://localhost:4000/devops/start-up-jenkins/"><![CDATA[<h2 id="start-up-jenkins">Start-up Jenkins</h2>
<p>Jenkins server에 접속하기 brower에서 해당 서버의 http://localhost:8080 포트 접속합니다.</p>

<p>Jenkins에 접속하면 Jenkins admin 초기 패스워드를 입력하는 화면이 출력됩니다</p>

<p>터미널에서 다음과 같이 명령을 수행하여 Jenkins  admin 초기 로그인 비밀번호를 확인하고, 초기 패스워드를 입력합니다.</p>

<p><img src="/assets/images/jenkins/03-jenkins-initial-admin.png" alt="Jenkins Getting started" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /var/lib/jenkins/secrets/initialAdminPassword
</code></pre></div></div>

<p>[수행결과]
a0f289xxxxxxxxxcd8fbb7</p>

<p>Jenkins 패스워드 입력화면에 복사한 패스워드를 입력하고 Continue 버튼을 클릭하고, Install suggested plugins를 선택합니다</p>

<p><img src="/assets/images/jenkins/04-jenkins-getting-started.png" alt="Jenkins Getting started" /></p>

<p>Jenkins Plugins이 다음과 같이 설치됩니다</p>

<p><img src="/assets/images/jenkins/05-jenkins-install-plugins.png" alt="Install Jenkins Plugins" /></p>

<p>Jenkins Admin 계정을 생성합니다. Save and Continue 버튼을 클릭합니다</p>

<p><img src="/assets/images/jenkins/06-jenkins-create-admin.png" alt="Create Admin" /></p>

<p>Instance Configuration 확인하고, Save and Finish 버튼을 클릭하고, Start using Jenkins 버튼을 클릭합니다.</p>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><summary type="html"><![CDATA[Start-up Jenkins Jenkins server에 접속하기 brower에서 해당 서버의 http://localhost:8080 포트 접속합니다.]]></summary></entry><entry><title type="html">Jenkins 설치 따라하기</title><link href="http://localhost:4000/devops/setup-jenkins/" rel="alternate" type="text/html" title="Jenkins 설치 따라하기" /><published>2023-01-24T00:00:00+09:00</published><updated>2023-01-24T00:00:00+09:00</updated><id>http://localhost:4000/devops/setup%20jenkins</id><content type="html" xml:base="http://localhost:4000/devops/setup-jenkins/"><![CDATA[<h2 id="jenkins-pipeline-이란">Jenkins Pipeline 이란?</h2>
<p>Jenkins Pipeline은 지속적인 업데이트 파이프라인을 구현하고 Jenkins에 통합하는 것을 지원하는 플러그인의 집합이다. 이 과정에서 소프트웨어를 빌드하고 여러 단계의 테스트, 배포를 진행한다. 
Pipeline은 Pipeline Domain Specific Language라는 문법을 통해 마치 코드를 작성하는 것과 같이 Pipeline을 통해 간단한 배포 파이프라인부터 복잡한 배포  파이프라인을 코드로 모델링하기 위한 확장 가능한 도구 집합을 제공합니다.
. 
Jenkins 파이프 라인의 정의는 프로젝트의 소스 제어 저장소에 commit될 수 있는 텍스트 파일 (Jenkinsfile이라고 함)에 저장합니다.</p>

<ul>
  <li><strong>Install Jenkins on Linux(Centos)</strong></li>
</ul>

<p>Jenkins를 설치하기 전에 사전에 JDK와 Maven을 설치합니다. 
상세한 설치 정보는 다음의 링크를 참조합니다.</p>

<p>https://www.jenkins.io/doc/book/installing/linux/</p>

<p>java-11-openjdk을 설치합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf upgrade <span class="nt">-y</span>
<span class="nb">sudo </span>dnf <span class="nb">install</span> <span class="nt">-y</span> java-11-openjdk
</code></pre></div></div>

<p>다음의 링크를 접속하여 Maven 설치합니다.
https://maven.apache.org/download.cgi 에서 최근  maven 링크를 복사합니다</p>

<figure style="width: 100%" class="align-left">
  <img src="http://localhost:4000/assets/images/jenkins/01-jenkins-install-maven.png" alt="" />
  <figcaption></figcaption>
</figure>

<p>설치하고자 하는 경로에 압축파일을 다운 받아 압축을 해제한 후, 해당 폴더가 위치한 곳을 MAVEN_HOME으로 설정합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://dlcdn.apache.org/maven/maven-3/3.8.7/binaries/apache-maven-3.8.7-bin.tar.gz

<span class="nb">tar </span>xvzf apache-maven-3.8.7-bin.tar.gz <span class="nt">-C</span> /usr/local
</code></pre></div></div>

<p>~/.bash_profile을 vi editor로 열어MAVEN_HOME 환경정보를 추가합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/local/apache-maven-3.8.7 
<span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$MAVEN_HOME</span>/bin 
</code></pre></div></div>

<p>bash profile을 설정하고 저장하고, bash_profile을 최신으로 적용합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bash_profile 
</code></pre></div></div>

<p>maven 설정되었는지 다음의 명령어로 수행하여 아래의 내용이 출력되는지 확인합니다.</p>

<p>mvn</p>

<p>[수행결과]
<img src="/assets/images/jenkins/02-jenkins-mvn.png" alt="transparent black overlay" /></p>

<p>다음과 같이Git 설치합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf <span class="nb">install</span> <span class="nt">-y</span> git
</code></pre></div></div>

<p>레포지터리에 젠킨스 레드햇 안정화 버전 레포지터리를 추가합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://pkg.jenkins.io/redhat-stable/jenkins.repo <span class="nt">-O</span> /etc/yum.repos.d/jenkins.repo 
</code></pre></div></div>

<p>rpm에 젠킨스를 추가합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>rpm <span class="nt">--import</span> https://pkg.jenkins.io/redhat-stable/jenkins.io.key
</code></pre></div></div>

<p>Jenkins 를 다음과 같이 설치합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf <span class="nb">install</span> <span class="nt">-y</span> jenkins
</code></pre></div></div>

<p>OS 부팅 시 Jenkins 서비스가 시작되도록 설정합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>jenkins
</code></pre></div></div>

<p>다음 명령을 사용하여 Jenkins 서비스를 시작합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start jenkins
</code></pre></div></div>

<p>다음 명령을 사용하여 Jenkins 서비스의 상태를 확인할 수 있습니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status jenkins
</code></pre></div></div>

<p>docker container image 빌드를 위해 빌드 툴인 Podman을 설치합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install</span> <span class="nt">-y</span> podman 
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><summary type="html"><![CDATA[Jenkins Pipeline 이란? Jenkins Pipeline은 지속적인 업데이트 파이프라인을 구현하고 Jenkins에 통합하는 것을 지원하는 플러그인의 집합이다. 이 과정에서 소프트웨어를 빌드하고 여러 단계의 테스트, 배포를 진행한다. Pipeline은 Pipeline Domain Specific Language라는 문법을 통해 마치 코드를 작성하는 것과 같이 Pipeline을 통해 간단한 배포 파이프라인부터 복잡한 배포 파이프라인을 코드로 모델링하기 위한 확장 가능한 도구 집합을 제공합니다. . Jenkins 파이프 라인의 정의는 프로젝트의 소스 제어 저장소에 commit될 수 있는 텍스트 파일 (Jenkinsfile이라고 함)에 저장합니다.]]></summary></entry><entry><title type="html">Jenkins Kubernetes Plugin 설치 및 환경구성</title><link href="http://localhost:4000/devops/install-kubernetes-plugin/" rel="alternate" type="text/html" title="Jenkins Kubernetes Plugin 설치 및 환경구성" /><published>2023-01-24T00:00:00+09:00</published><updated>2023-01-24T00:00:00+09:00</updated><id>http://localhost:4000/devops/install%20kubernetes%20plugin</id><content type="html" xml:base="http://localhost:4000/devops/install-kubernetes-plugin/"><![CDATA[<h2 id="jenkins-kubernetes-plugin-설치">Jenkins Kubernetes Plugin 설치</h2>
<p>Jenkins Agent로 Kubernetes에 실행하기 위해 Kubernetes Plugin을 Jenkins에 설치하여 환경을 구성합니다.</p>

<p>Jenkins UI에서 Manage Jenkins &gt; System Configuration &gt; Manage Plugins &gt;Available plugins 메뉴를 클릭합니다</p>

<p>Plugins 검색 입력 필드에서 Kubernetes 입력하고 다음과 같은 첫번째  Kubernetes [V] 선택, 왼쪽 하단에 Install without restart 버튼을 클릭합니다</p>

<p><img src="/assets/images/jenkins/12-jenkins-install-kubernetes-plugin.png" alt="Install Kubernetes Plugin" /></p>

<p>아래의 [v] “Restart Jenkins when installation is complete and no jobs are running” 버튼을 선택하여 jenkins를 재시작 합니다. admin 계정으로 로드인을 합니다</p>

<p>Manage Jenkins &gt; System Configuration &gt; Manage Nodes and Clouds를 선택합니다.</p>

<p>Configure Clouds를 선택하고, Combo 박스에서 Kubernetes를 선택합니다.</p>

<p><img src="/assets/images/jenkins/13-jenkins-add-new-cloud.png" alt="Install Kubernetes Plugin" /></p>

<p>Kubernetes 접속하기 위한 Credentials 정보를 입력하면이 다음과 같이 출력됩니다. Kubernetes Cloud details 버튼을 클릭하면 상세 입력창이 출력됩니다.</p>
<figure style="width: 5%; height: 20%; " class="align-center">
  <img src="http://localhost:4000/assets/images/jenkins/14-jenkins-configure-clouds.png " alt="" />
  <figcaption></figcaption>
</figure>

<p>Kubernetes Namespace section에 jenkins 를 입력합니다
<img src="/assets/images/jenkins/15-jenkins-kubernetes-namespace.png" alt="Kubernetes Namespace" /></p>

<p>Configure Clouds에서 Credentials &gt; Add 버튼을 클릭합니다
<img src="/assets/images/jenkins/16-jenkins-add-jenkins.png" alt="add jenkins in Credentials" /></p>

<p>Add Credentials 입력창에서 credentials 정보를 다음과 같이 입력합니다.<br />
File은 자신의 VM 서버의 root 계정의. $HOME/.kube/config 파일을 선택합니다.<br />
.kube/config 파일을 자신의 laptop에 download 받아서 choose file 버튼을 클릭하여 download 받은 config파일을 선택합니다.<br />
<img src="/assets/images/jenkins/17-jenkins-add-credentials.png" alt="add Credentials" /></p>

<p>Credentials Section 에서 위에서 입력한 mykubeconfig를 선택하고, Test Connection버튼을 클릭하여 minikube 연결을 테스트합니다. 다음의 메시지처럼 정상 출력되는지 확인합니다.
“Connected to Kubernetes v1.xx.x”로 표시 되는지 확인합니다</p>
<figure style="width: 50%; height: 20%; " class="align-center">
  <img src="http://localhost:4000/assets/images/jenkins/18-jenkins-connected.png " alt="" />
  <figcaption></figcaption>
</figure>

<p>WebSocket 항목을 선택합니다.<br />
[v] WebSocket</p>

<p>Pod Label Section에서key / value값을 다음과 같이 입력합니다.</p>

<figure style="width: 100%; height: 100%; " class="align-center">
  <img src="http://localhost:4000/assets/images/jenkins/19-jenkins-pod-labels.png " alt="" />
  <figcaption></figcaption>
</figure>

<p>Pod Templates Section 다음과 같이 입력합니다</p>
<figure style="width: 50%; height: 100%; " class="align-center">
  <img src="http://localhost:4000/assets/images/jenkins/20-jenkins-pod-templates.png " alt="" />
  <figcaption></figcaption>
</figure>

<p>Container Section은 다음과 같이 입력하고 저장버튼을 클릭합니다.<br />
Name : jnlp-slave<br />
Docker image : jenkinsci/jnlp-slave:latest<br />
Working directory : /home/jenkins/agent<br />
Command to run : /bin/sh -c .</p>

<figure style="width: 50%; height: 100%; " class="align-center">
  <img src="http://localhost:4000/assets/images/jenkins/21-jenkins-container-templates.png " alt="" />
  <figcaption></figcaption>
</figure>

<p>Jenkins agent가 실행할 jenkins namespace를 다음과 같이 생성합니다.</p>

<p>kubectl create ns jenkins</p>

<p>Jenkins Console Output 화면에서 다음과 같은 메시지가 출력되면 “Message: namespaces “jenkins” not found”  위 Jenkins namespace를 생성하지 않아서 발생하는 에러입니다.</p>

<p>터미널창에서 default namespace에 app을 설치할 수 있는 권한을 cluster-admin 권한으로 jenkins에 부여합니다.
kubectl create clusterrolebinding jenkins-admin  –clusterrole cluster-admin –serviceaccount jenkins:default</p>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><summary type="html"><![CDATA[Jenkins Kubernetes Plugin 설치 Jenkins Agent로 Kubernetes에 실행하기 위해 Kubernetes Plugin을 Jenkins에 설치하여 환경을 구성합니다.]]></summary></entry><entry><title type="html">Docker 기반 Jira 설치</title><link href="http://localhost:4000/docker/altassian-jira/" rel="alternate" type="text/html" title="Docker 기반 Jira 설치" /><published>2023-01-24T00:00:00+09:00</published><updated>2023-01-24T00:00:00+09:00</updated><id>http://localhost:4000/docker/altassian-jira</id><content type="html" xml:base="http://localhost:4000/docker/altassian-jira/"><![CDATA[<h2 id="jira-on-docker">Jira on Docker</h2>
<p>Docker 기반 Jira 입니다.</p>

<pre><code class="language-YAML">version: '3'
networks:
 jenkins-net:
    driver: bridge

services:
  jira:
    container_name: jira
    image: atlassian/jira-software:latest
    networks:
      - jenkins-net
    ports:
      - "9010:8080"

  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - ./data:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_USER=postgres'
      # CHANGE THE PASSWORD!
      - 'POSTGRES_PASSWORD=admin1234'
      - 'POSTGRES_DB=jira'
      - 'POSTGRES_ENCODING=UTF8'
    networks:
      - jenkins-net
    ports:
      - "5432:5432"
</code></pre>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="jira" /><summary type="html"><![CDATA[Jira on Docker Docker 기반 Jira 입니다.]]></summary></entry><entry><title type="html">Airflow Hooks - MySQL</title><link href="http://localhost:4000/workflow/Airflow-hooks-mysql/" rel="alternate" type="text/html" title="Airflow Hooks - MySQL" /><published>2022-12-18T00:00:00+09:00</published><updated>2022-12-18T00:00:00+09:00</updated><id>http://localhost:4000/workflow/Airflow%20hooks-mysql</id><content type="html" xml:base="http://localhost:4000/workflow/Airflow-hooks-mysql/"><![CDATA[<h2 id="airflow-hooks---mysql">Airflow Hooks - MySQL</h2>

<p>MySqlHook 예제입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">airflow</span> <span class="kn">import</span> <span class="n">DAG</span> 
<span class="kn">from</span> <span class="nn">airflow.operators.python</span> <span class="kn">import</span> <span class="n">PythonOperator</span>
<span class="kn">from</span> <span class="nn">airflow.operators.empty</span> <span class="kn">import</span> <span class="n">EmptyOperator</span> 
<span class="kn">from</span> <span class="nn">airflow.providers.mysql.hooks.mysql</span> <span class="kn">import</span> <span class="n">MySqlHook</span> 
<span class="c1"># utils
</span><span class="kn">from</span> <span class="nn">airflow.utils.dates</span> <span class="kn">import</span> <span class="n">days_ago</span> 
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">timedelta</span> 
<span class="kn">from</span> <span class="nn">tempfile</span> <span class="kn">import</span> <span class="n">NamedTemporaryFile</span> 
<span class="kn">import</span> <span class="nn">csv</span><span class="p">,</span> <span class="n">logging</span> 

<span class="n">default_args</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'start_date'</span><span class="p">:</span> <span class="n">days_ago</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
  <span class="s">'retries'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="s">'retry_delay'</span><span class="p">:</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">5</span><span class="p">),</span>
  <span class="s">'schedule_interval'</span><span class="p">:</span> <span class="s">'@daily'</span><span class="p">,</span>
  <span class="s">'catchup'</span><span class="p">:</span> <span class="bp">False</span>
<span class="p">}</span>

<span class="n">MYSQL_CONN_ID</span> <span class="o">=</span><span class="s">'mysql-conn'</span>

<span class="k">def</span> <span class="nf">export_db_to_dsv</span><span class="p">():</span>
  <span class="n">logging</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Staring mysql_hook"</span><span class="p">)</span>
  <span class="n">hook</span> <span class="o">=</span> <span class="n">MySqlHook</span><span class="p">(</span><span class="n">conn_id</span> <span class="o">=</span> <span class="n">MYSQL_CONN_ID</span><span class="p">)</span>
  <span class="n">conn</span> <span class="o">=</span> <span class="n">hook</span><span class="p">.</span><span class="n">get_conn</span><span class="p">()</span> 
  <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>
  <span class="n">cursor</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">'use demo'</span><span class="p">)</span>
  <span class="n">cursor</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">'select * from users'</span><span class="p">)</span>
  
  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'/opt/airflow/data/employee.csv'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span> 
    <span class="n">csv_writer</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="n">writer</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> 
    <span class="n">csv_writer</span><span class="p">.</span><span class="n">writerow</span><span class="p">([</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">cursor</span><span class="p">.</span><span class="n">dscription</span><span class="p">])</span>
    <span class="n">csv_writer</span><span class="p">.</span><span class="n">writerows</span><span class="p">(</span><span class="n">cursor</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">flush</span><span class="p">()</span>
    <span class="n">cursor</span><span class="p">.</span><span class="n">close</span><span class="p">()</span> 
    <span class="n">conn</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">logging</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'Saved data in csv file: %s'</span><span class="p">,</span> <span class="s">'/opt/airflow/data/employee.csv'</span><span class="p">)</span>
    
<span class="k">with</span> <span class="n">DAG</span><span class="p">(</span>
  <span class="n">dag_id</span> <span class="o">=</span> <span class="s">'mysql-hook-db-to-csv'</span><span class="p">,</span>
  <span class="n">default_args</span> <span class="o">=</span> <span class="n">default_args</span><span class="p">,</span>
  <span class="n">tags</span> <span class="o">=</span> <span class="p">[</span><span class="s">'training'</span><span class="p">]</span>
<span class="p">)</span> <span class="k">as</span> <span class="n">dag</span><span class="p">:</span> 
  <span class="n">export_task</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"mysql_to_csv"</span><span class="p">,</span>
        <span class="n">python_callable</span><span class="o">=</span><span class="n">export_db_to_dsv</span>
  <span class="p">)</span>
  
  <span class="n">start</span> <span class="o">=</span> <span class="n">EmptyOperator</span><span class="p">(</span><span class="n">task_id</span><span class="o">=</span><span class="s">'start'</span><span class="p">)</span>
  <span class="n">end</span> <span class="o">=</span> <span class="n">EmptyOperator</span><span class="p">(</span><span class="n">task_id</span><span class="o">=</span><span class="s">'end'</span><span class="p">)</span> 
  
  <span class="n">start</span> <span class="o">&gt;&gt;</span> <span class="n">export_task</span> <span class="o">&gt;&gt;</span> <span class="n">end</span>  
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="workflow" /><category term="airflow" /><summary type="html"><![CDATA[Airflow Hooks - MySQL]]></summary></entry></feed>