<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-11T21:41:35+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cloud Native Journey</title><subtitle>Software Engineer/Architect</subtitle><author><name>Jaeguk Yun</name></author><entry><title type="html">Mybatis에 멀티 로우 insert or update</title><link href="http://localhost:4000/springboot/upsert-mybatis-multi-row/" rel="alternate" type="text/html" title="Mybatis에 멀티 로우 insert or update" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-11T00:00:00+09:00</updated><id>http://localhost:4000/springboot/upsert-mybatis-multi-row</id><content type="html" xml:base="http://localhost:4000/springboot/upsert-mybatis-multi-row/"><![CDATA[<h2 id="mybatis-한번에-여러건-insert-or-update">Mybatis 한번에 여러건 Insert or Update</h2>
<p>Mybatis에서 한번에 여러건의 데이터를 insert 또는 update하기 기능을 Mybatis는 이를 지원하고 있다.
이 기능을 이용하여 약간의 성능에 도움을 받을 수 있습니다.</p>

<p>Mybatis에서 여러건의 데이터를 Insert or Update 예제입니다.</p>

<ul>
  <li>다음은 Controller 입니다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Slf4j</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
	<span class="nd">@Autowired</span>
	<span class="kd">private</span> <span class="nc">SampleUserDao</span> <span class="n">sampleUserDao</span><span class="o">;</span>

	<span class="nd">@ApiOperation</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"bulkload"</span><span class="o">)</span>
	<span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"/users/bulkload"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="o">&lt;?&gt;</span> <span class="n">bulkloadUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SampleUser</span><span class="o">&gt;</span> <span class="n">userList</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">sampleUserDao</span><span class="o">.</span><span class="na">bulkloadUsers</span><span class="o">(</span><span class="n">userList</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="k">return</span> <span class="nc">Response</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="s">"Success"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>다음은 Mapper 입니다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SampleUserDao</span> <span class="o">{</span>	
	
	<span class="cm">/**
	 * 사용자 목록을 입력받아 bulkload합니다.
	 * @return
	 * @throws Exception
	 */</span>
	<span class="kt">int</span> <span class="nf">bulkloadUsers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">SampleUser</span><span class="o">&gt;</span> <span class="n">userList</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>다음은 VO(Value Object) 입니다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.ToString</span><span class="o">;</span>

<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ToString</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleUser</span> <span class="o">{</span>
	 <span class="kd">private</span> <span class="nc">String</span>  <span class="n">userId</span> 		<span class="o">;</span> <span class="c1">// 사용자 ID</span>
	 <span class="kd">private</span> <span class="nc">String</span>  <span class="n">userNm</span> 		<span class="o">;</span> <span class="c1">// 사용자 이름</span>
	 <span class="kd">private</span> <span class="nc">String</span>  <span class="n">addr</span> 		    <span class="o">;</span> <span class="c1">// 주소 </span>
	 <span class="kd">private</span> <span class="nc">String</span>  <span class="n">cellPhone</span> 	    <span class="o">;</span> <span class="c1">// 핸드폰 </span>
	 <span class="kd">private</span> <span class="nc">String</span>  <span class="n">agreeInform</span>    <span class="o">;</span> <span class="c1">// 고객정보 동의 여부 </span>
	 <span class="kd">private</span> <span class="nc">String</span>  <span class="n">birthDt</span> 	    <span class="o">;</span> <span class="c1">// 생년 월일 </span>
<span class="o">}</span>

</code></pre></div></div>

<p>다음의 그 Mybatis Mapper 파일 예제입니다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.demo.microservices.dao.SampleUserDao"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"bulkloadUsers"</span> <span class="na">parameterType=</span><span class="s">"list"</span><span class="nt">&gt;</span>
		insert into tb_user00 (
		    user_id,
		    user_nm,
		    addr,
		    cell_phone,
		    agree_inform,
		    birth_dt
		) values 
		foreach collection="list" item="item" separator=","&gt;
		(
		    #{item.userId},
		    #{item.userNm},
		    #{item.addr},
		    #{item.cellPhone},
		    #{item.agreeInform},
		    #{item.birthDt}
		)
		<span class="nt">&lt;/foreach&gt;</span> 	
		on duplicate key update 
		    user_nm = values(user_nm),
		    addr = values(addr),
		    cell_phone = values(cell_phone),
		    agree_inform = values(agree_inform),
		    birth_dt = values(birth_dt)
	<span class="nt">&lt;/insert&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="mybatis" /><summary type="html"><![CDATA[Mybatis 한번에 여러건 Insert or Update Mybatis에서 한번에 여러건의 데이터를 insert 또는 update하기 기능을 Mybatis는 이를 지원하고 있다. 이 기능을 이용하여 약간의 성능에 도움을 받을 수 있습니다.]]></summary></entry><entry><title type="html">CacheMager 사용하여 data 캐시하는 방법</title><link href="http://localhost:4000/springboot/how-to-cache-data-from-db-in-springboot/" rel="alternate" type="text/html" title="CacheMager 사용하여 data 캐시하는 방법" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-11T00:00:00+09:00</updated><id>http://localhost:4000/springboot/how-to-cache%20data%20from%20db%20in%20springboot</id><content type="html" xml:base="http://localhost:4000/springboot/how-to-cache-data-from-db-in-springboot/"><![CDATA[<h2 id="cachemanager-의존성-추가">cacheManager 의존성 추가</h2>
<p>Springboot 에서 data를 Cache를 하고자 하는 경우 Solution을 시용하는 경우 Redis를 고려합니다.<br />
그러나 Redis 를 사용할 정도의 애플리케이션 아닌 경우 Local Cache만으로 충분한 경우 Singleton 패턴으로 구현할 수도 있지만 이미 만들어진 CacheManager를 사용하면 편리합니다.</p>

<p>Springboot에서 cacheManager를 사용하기 위해서 maven 빌드 환경에서 pom.xml에 아래의 의존성을 추가합니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">		</span><span class="s">&lt;dependency&gt;</span>
<span class="err">			</span><span class="s">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span>
<span class="err">			</span><span class="s">&lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span>
<span class="err">		</span><span class="s">&lt;/dependency&gt;</span>
</code></pre></div></div>
<h2 id="cachemanager-bean-등록">cacheManager Bean 등록</h2>
<p>CacheManager를 사용하기 위해 먼저 CacheManager Bean을 등록합니다.<br />
@EnableCaching을 어노테이션을 추가하고 SimpleCacheManager를 생성하고 CacheManager에 cache하고자 하는 대상에 대해 cacheName 을 등록합니다. 아래는 user 정보와 product 정보를 cache하기 위해서 cache name을 users, products으로 cache name을 등록하였습니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableCaching</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CacheManagerConfig</span> <span class="kd">extends</span> <span class="nc">CachingConfigurerSupport</span> <span class="o">{</span>

	<span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">CacheManager</span> <span class="nf">cacheManager</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">SimpleCacheManager</span> <span class="n">cacheManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SimpleCacheManager</span><span class="o">();</span>
        <span class="n">cacheManager</span><span class="o">.</span><span class="na">setCaches</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
          <span class="k">new</span> <span class="nf">ConcurrentMapCache</span><span class="o">(</span><span class="s">"users"</span><span class="o">),</span> 
          <span class="k">new</span> <span class="nf">ConcurrentMapCache</span><span class="o">(</span><span class="s">"products"</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">cacheManager</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="cachemanager-service-구현">cacheManager Service 구현</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ProductService</span> <span class="n">productService</span><span class="o">;</span>
	
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/products/{productId}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;?&gt;</span> <span class="n">findByProduct</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">productId</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">ProductVo</span> <span class="n">product</span> <span class="o">=</span> <span class="n">productService</span><span class="o">.</span><span class="na">findByProductId</span><span class="o">(</span><span class="n">productId</span><span class="o">);</span>
		
		<span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;(</span><span class="n">product</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Service에서 productId를 조회했을 때 @Cacheable 오노테이션을 사용하여 Product Id가 조회된 결과를 Caching합니다. 두번째 같은 product id를 조회하면 Cache된 정보가 조회됩니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductService</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ProductDao</span> <span class="n">productDao</span><span class="o">;</span>
	
	<span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"products"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">ProductVo</span> <span class="nf">findByProductId</span><span class="o">(</span><span class="nc">String</span> <span class="n">productId</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">ProductVo</span> <span class="n">product</span> <span class="o">=</span> <span class="n">productDao</span><span class="o">.</span><span class="na">findByProductId</span><span class="o">(</span><span class="n">productId</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"product:{}"</span><span class="o">,</span> <span class="n">product</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">product</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>관련 소스는 아래 <a href="https://gitlab.com/nexweb/sample-service.git">링크</a>에 boot-startup branch에 있습니다.</p>

<p><a href="https://gitlab.com/nexweb/sample-service.git">https://gitlab.com/nexweb/sample-service.git</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="cacheManager" /><summary type="html"><![CDATA[cacheManager 의존성 추가 Springboot 에서 data를 Cache를 하고자 하는 경우 Solution을 시용하는 경우 Redis를 고려합니다. 그러나 Redis 를 사용할 정도의 애플리케이션 아닌 경우 Local Cache만으로 충분한 경우 Singleton 패턴으로 구현할 수도 있지만 이미 만들어진 CacheManager를 사용하면 편리합니다.]]></summary></entry><entry><title type="html">load-on-startup</title><link href="http://localhost:4000/springboot/springboot-load-on-startup/" rel="alternate" type="text/html" title="load-on-startup" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-11T00:00:00+09:00</updated><id>http://localhost:4000/springboot/springboot-load-on-startup</id><content type="html" xml:base="http://localhost:4000/springboot/springboot-load-on-startup/"><![CDATA[<h2 id="load-on-startup">load-on-startup</h2>
<p>Springboot 시작시 첫 호출이 느린 경우 application.yml에 해당 내용 추가 합니다.</p>

<p>application.yml 파일입니다.</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">mvc</span><span class="pi">:</span>
    <span class="na">servlet</span><span class="pi">:</span>
      <span class="na">load-on-startup</span><span class="pi">:</span> <span class="m">1</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="load-on-startup" /><summary type="html"><![CDATA[load-on-startup Springboot 시작시 첫 호출이 느린 경우 application.yml에 해당 내용 추가 합니다.]]></summary></entry><entry><title type="html">MacOS openJDK 1.8 설치하기</title><link href="http://localhost:4000/springboot/mac-jdk-switch/" rel="alternate" type="text/html" title="MacOS openJDK 1.8 설치하기" /><published>2023-03-06T00:00:00+09:00</published><updated>2023-03-06T00:00:00+09:00</updated><id>http://localhost:4000/springboot/mac-jdk-switch</id><content type="html" xml:base="http://localhost:4000/springboot/mac-jdk-switch/"><![CDATA[<h2 id="open-jdk">open jdk</h2>
<p>mac에서 open jdk를 설치합니다</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew tap AdoptOpenJDK/openjdk

brew <span class="nb">install</span> <span class="nt">--cask</span> adoptopenjdk8
</code></pre></div></div>
<h2 id="switch-jdk-18-to-11">switch jdk 1.8 to 11</h2>
<p>jdk를 여러 버전을 설치한 경우 jdk를 필요에 따라 switch하고자 하는 경우 다음과 같이 합니다.<br />
vi로 ~/.zshrc 파일을 편집하고 아래의 항목을 추가합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="sb">`</span>/usr/libexec/java_home <span class="nt">-v</span> 1.8<span class="sb">`</span>
</code></pre></div></div>

<p>zsh profile을 적용합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.zshrc
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="openjdk" /><summary type="html"><![CDATA[open jdk mac에서 open jdk를 설치합니다]]></summary></entry><entry><title type="html">배너 추가</title><link href="http://localhost:4000/springboot/banner/" rel="alternate" type="text/html" title="배너 추가" /><published>2023-03-03T00:00:00+09:00</published><updated>2023-03-03T00:00:00+09:00</updated><id>http://localhost:4000/springboot/banner</id><content type="html" xml:base="http://localhost:4000/springboot/banner/"><![CDATA[<h2 id="배너-파일">배너 파일</h2>
<p>Springboot의 왼쪽 하단에 있는 dashboard tab에서 springboot를 시작하면 console 로그에 자신만의 로고를 출력하고 싶을 때가 있습니다. 이때 베너를 추가하는 방법에 설명합니다.</p>

<h2 id="배너-생성">배너 생성</h2>
<p>Springboot에서 배너를 추가하기 위해서 resources 폴더 하위에 banner.txt 파일을 생성해서 내용을 추가하면 springboot가 시작되면서 텍스트를 읽어 출력합니다.</p>

<p><img src="/assets/images/springboot/01-springboot-banner.png" alt="banner" /></p>

<h2 id="배너-텍스트-생성-및-복사">배너 텍스트 생성 및 복사</h2>

<p>아래의 <a href="http://patorjk.com/software/taag/">배너 링크 사이트</a>에서 배너를 작성해서 banner.txt에 내용을 붙여넣기 하면 쉽게 배너를 만들 수 있습니다.</p>

<p><a href="http://patorjk.com/software/taag/">http://patorjk.com/software/taag/</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="banner" /><summary type="html"><![CDATA[배너 파일 Springboot의 왼쪽 하단에 있는 dashboard tab에서 springboot를 시작하면 console 로그에 자신만의 로고를 출력하고 싶을 때가 있습니다. 이때 베너를 추가하는 방법에 설명합니다.]]></summary></entry><entry><title type="html">mac 에서 jdk switch</title><link href="http://localhost:4000/docker/jdk-switch-on-mac/" rel="alternate" type="text/html" title="mac 에서 jdk switch" /><published>2023-03-02T00:00:00+09:00</published><updated>2023-03-02T00:00:00+09:00</updated><id>http://localhost:4000/docker/jdk%20switch-on-mac</id><content type="html" xml:base="http://localhost:4000/docker/jdk-switch-on-mac/"><![CDATA[<h2 id="jdk-11-or-8-switch">jdk 11 or 8 switch</h2>

<p>java 기반 개발을 하면서 jdk 다양한 버전이 필요해서 설치하는 경우 있습니다. jdk를 switch하고자 하는 경우
다음과 같이 .zshrc에 추가해서 사용합니다.</p>

<p>~/.zshrc 파일을 editor로 열어서 다음과 같이 JAVA_HOME을 추가하면 됩니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.zshrc
<span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="sb">`</span>/usr/libexec/java_home <span class="nt">-v</span> 1.8<span class="sb">`</span>

</code></pre></div></div>

<p>.zshrc 다시 적용합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.zshrc
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="jdk" /><category term="mac" /><summary type="html"><![CDATA[jdk 11 or 8 switch]]></summary></entry><entry><title type="html">docker-compose로 redis standalone으로 실행</title><link href="http://localhost:4000/docker/redis-docker-compose/" rel="alternate" type="text/html" title="docker-compose로 redis standalone으로 실행" /><published>2023-03-01T00:00:00+09:00</published><updated>2023-03-01T00:00:00+09:00</updated><id>http://localhost:4000/docker/redis-docker-compose</id><content type="html" xml:base="http://localhost:4000/docker/redis-docker-compose/"><![CDATA[<h2 id="redis-docker-compose-파일">Redis docker-compose 파일</h2>

<p>redis docker-compose 파일입니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.7'</span>
<span class="na">services</span><span class="pi">:</span>
    <span class="na">redis</span><span class="pi">:</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">redis:alpine</span>
      <span class="na">command</span><span class="pi">:</span> <span class="s">redis-server --port </span><span class="m">6379</span>
      <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">name=redis"</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">mode=standalone"</span>
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">6379:6379</span>
</code></pre></div></div>

<p>docker-compose.yaml 파일이 있는 곳에서 docker-compose를 실행합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up -d
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="redis" /><summary type="html"><![CDATA[Redis docker-compose 파일]]></summary></entry><entry><title type="html">mysql docker-compose 로 실행하기</title><link href="http://localhost:4000/docker/mysql-docker-compose/" rel="alternate" type="text/html" title="mysql docker-compose 로 실행하기" /><published>2023-03-01T00:00:00+09:00</published><updated>2023-03-01T00:00:00+09:00</updated><id>http://localhost:4000/docker/mysql-docker-compose</id><content type="html" xml:base="http://localhost:4000/docker/mysql-docker-compose/"><![CDATA[<h2 id="mysql-docker-compose-파일">mysql docker-compose 파일</h2>

<p>mysql docker-compose 파일입니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> data
vi docker-compose.yaml
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span> <span class="c1"># 파일규격버전</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span> <span class="c1"># 서비스이름</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:8.0.23</span> <span class="c1"># 이미지</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">mysql</span> <span class="c1"># 컨테이너 이름</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span> <span class="c1"># 포트 설정  외부:내부</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MYSQL_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1234qwer"</span> <span class="c1"># 패스워드설정</span>
      <span class="na">MYSQL_DATABASE</span><span class="pi">:</span> <span class="s2">"</span><span class="s">demo"</span>
      <span class="na">MYSQL_USER</span><span class="pi">:</span> <span class="s2">"</span><span class="s">user00"</span>
      <span class="na">MYSQL_PASSWORD</span><span class="pi">:</span> <span class="s2">"</span><span class="s">admin1234"</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">--character-set-server=utf8</span> <span class="c1"># 인코딩</span>
      <span class="pi">-</span> <span class="s">--collation-server=utf8_general_ci</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./data:/dev/docker/db/mysql-db01</span> <span class="c1"># 마운트 설정</span>
</code></pre></div></div>

<p>docker-compose.yaml 파일이 있는 곳에서 docker-compose를 실행합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up -d
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="mysql" /><summary type="html"><![CDATA[mysql docker-compose 파일]]></summary></entry><entry><title type="html">docker-compose로 postgreSQL 실행</title><link href="http://localhost:4000/docker/redis-docker-compose-copy/" rel="alternate" type="text/html" title="docker-compose로 postgreSQL 실행" /><published>2023-03-01T00:00:00+09:00</published><updated>2023-03-01T00:00:00+09:00</updated><id>http://localhost:4000/docker/redis-docker-compose%20copy</id><content type="html" xml:base="http://localhost:4000/docker/redis-docker-compose-copy/"><![CDATA[<h2 id="postgressql-docker-compose-파일">PostgresSQL docker-compose 파일</h2>
<p>새로운 응용 프로그램을 만들 때 PostgreSQL을 데이터베이스 엔진으로 자주 사용합니다. 빠르고 사용하기 쉬우 며 인터넷상의 거의 모든 프로그래밍 언어 및 플랫폼과 매우 잘 통합됩니다.<br />
Windows 시스템을 실행하지 않고 macOS 또는 Linux에서 PostgreSQL 데이터베이스를 실행해야하는 경우 Docker를 사용할 수 있습니다. 몇 가지 간단한 명령만으로 도커에서 PostgreSQL을 시작하는 것은 매우 쉽습니다.</p>

<p>이 글은 매우 간단하고 따라하기 쉽습니다. docker-compose 파일을 작성하여 standalone PostgreSQL 데이터베이스를 실행할 수 있습니다.</p>

<p>컨테이너에서 데이터베이스를 실행하는 것은 개발 환경뿐만 아니라 프로덕션 환경에서도 매우 이상적입니다. 호스팅 환경의 전체 아키텍처를 변경하지 않고도 쉽게 확장하고 사용자의 요구에 맞게 조정할 수 있습니다.
스마트한 방식으로 작업하는 경우(열심히 작업하지 않고 스마트하게 작업) 데이터베이스를 CI/CD 파이프라인에 통합하여 애플리케이션과 연결된 데이터베이스가 항상 있고 팀의 다른 개발자도 수많은 소프트웨어를 로컬로 다운로드하여 설치하지 않고도 개발 머신에서 새로운 기능을 테스트할 수 있도록 합니다.</p>

<h2 id="도커-작성을-사용하여-postgresql을-실행하는-방법">도커 작성을 사용하여 PostgreSQL을 실행하는 방법</h2>
<p>도커 작성을 사용하여 인프라를 코드로 지정하면 PostgreSQL을 시작하는 것은 매우 쉽습니다.<br />
아래는 PostgreSQL을 쉽게 시작하고 실행하는 방법을 보여주는 전체 docker-compose.yaml 파일입니다. 
여기에는  데이터베이스 데이터에 대한 로컬 볼륨(경로)을 자동으로 생성하는 볼륨 섹션이 포함되어 있습니다. 이렇게 하면 컨테이너가 다시 시작되어도 데이터가 손실되지 않습니다. 일반적으로 모든 데이터는 컨테이너 내부의 메모리에 있지만 이렇게하면 유지할 수 있습니다.</p>

<h2 id="username-and-password-설정">username and password 설정</h2>

<p>항상 환경 변수 내에서 민감한 데이터를 구성하여 작성 파일 내부에 노출되지 않도록 합니다. 이렇게 하면 다른 개발자가 내 자격 증명을 몰라도 작성 파일을 공유 할 수 있습니다.<br />
환경. 구성해야 하는 변수는 다음과 같습니다.</p>
<ul>
  <li>POSTGRES_USER</li>
  <li>POSTGRES_PASSWORD
필요에 따라 자격 증명을 설정할 수 있습니다. 다음은 데모를 위한 작성 파일 내의 자격 증명입니다.</li>
</ul>

<p>postgreSQL docker-compose 파일입니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.5'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">postgres</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">postgres</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:latest</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">POSTGRES_USER</span><span class="pi">:</span> <span class="s">postgres</span>
      <span class="na">POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">admin1234</span>
      <span class="na">PGDATA</span><span class="pi">:</span> <span class="s">/data/postgres</span>
    <span class="na">volumes</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s">postgres-db:/data/postgres</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5432:5432"</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">postgres-db</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
</code></pre></div></div>
<p>위의 코드를 자신의 도커 작성 파일에 복사 할 수 있습니다.  이 데모에서 내 이름을 docker-compose.yaml로 지정했습니다</p>

<p>docker-compose.yaml 파일이 있는 곳에서 docker-compose를 실행합니다.<br />
Mac 또는 Linux (GUI) 컴퓨터를 사용하는 경우 터미널을 불러와 작성 파일을 저장 한 폴더 내에서 아래 명령을 실행할 수 있습니다. 하드 코어이고 CLI에서만 작업하는 경우 아래 명령을 실행합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div></div>
<p>이렇게 하면 Docker Hub에서 최신 버전의 PostgreSQL을 가져옵니다.<br />
컨테이너가 실행 중인지 확인하려면 터미널에서 다음 명령을 실행할 수 있습니다. 그러면 모든 Docker 프로세스가 나열됩니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps
</code></pre></div></div>
<p>또는</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose ps
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="docker" /><category term="postgresSQL" /><summary type="html"><![CDATA[PostgresSQL docker-compose 파일 새로운 응용 프로그램을 만들 때 PostgreSQL을 데이터베이스 엔진으로 자주 사용합니다. 빠르고 사용하기 쉬우 며 인터넷상의 거의 모든 프로그래밍 언어 및 플랫폼과 매우 잘 통합됩니다. Windows 시스템을 실행하지 않고 macOS 또는 Linux에서 PostgreSQL 데이터베이스를 실행해야하는 경우 Docker를 사용할 수 있습니다. 몇 가지 간단한 명령만으로 도커에서 PostgreSQL을 시작하는 것은 매우 쉽습니다.]]></summary></entry><entry><title type="html">Jenkins 서버 재시작 방법</title><link href="http://localhost:4000/devops/how-to-restart-jenkins/" rel="alternate" type="text/html" title="Jenkins 서버 재시작 방법" /><published>2023-02-24T00:00:00+09:00</published><updated>2023-02-24T00:00:00+09:00</updated><id>http://localhost:4000/devops/how-to-restart-jenkins</id><content type="html" xml:base="http://localhost:4000/devops/how-to-restart-jenkins/"><![CDATA[<h2 id="jenkins-port-확인-및-복사">Jenkins Port 확인 및 복사</h2>
<p>Jenkins 를 재시작하는 방법은 3가지 있습니다.</p>
<ul>
  <li>systemctl 사용</li>
  <li>browser에서 restart</li>
  <li>browser에서 safeRestart</li>
</ul>

<h2 id="systemctl-사용">Systemctl 사용</h2>
<p>systemctl 명령어로 사용하는 경우 Jenkins Job이 실행중인 것이 있더라도 jenkins를 즉시 재시작합니다.<br />
Jenkins 가 재시작 이후 그존 실행중인 job은 다시 재개합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart jenkins
</code></pre></div></div>
<h2 id="browser에서-restart">browser에서 restart</h2>
<p>Jenkins를 로그인 해서 browser url에서 your-jenkins/restart를 입력하면 다음과 같이 재시작 여부를 묻는 메시지가 출력됩니다.</p>

<p>Are you sure you want to restart Jenkins?</p>

<p>Yes 버튼을 클릭합니다.</p>

<h2 id="browser에서-saferestart">browser에서 safeRestart</h2>
<p>browser에서 safeRestart를 수행하면 다음과 같이 메시지가 출력됩니다. 기존 수행중인 Job 은 중단되고, Jenkins가 재시작하면 다시 재게합니다.<br />
Yes 버튼을 클릭합니다.</p>

<p>Are you sure you want to restart Jenkins? Jenkins will restart once all running jobs are finished. (Pipeline builds may prevent Jenkins from restarting for a short period of time in some cases, but if so, they will be paused at the next available opportunity and then resumed after Jenkins restarts.)</p>]]></content><author><name>Jaeguk Yun</name></author><category term="devops" /><category term="jenkins" /><summary type="html"><![CDATA[Jenkins Port 확인 및 복사 Jenkins 를 재시작하는 방법은 3가지 있습니다. systemctl 사용 browser에서 restart browser에서 safeRestart]]></summary></entry></feed>