<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-25T12:49:53+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cloud Native Journey</title><subtitle>Software Engineer/Architect</subtitle><author><name>Jaeguk Yun</name></author><entry><title type="html">RequestBodyAdvice</title><link href="http://localhost:4000/springboot/requestbodyadvisor/" rel="alternate" type="text/html" title="RequestBodyAdvice" /><published>2023-03-24T00:00:00+09:00</published><updated>2023-03-24T00:00:00+09:00</updated><id>http://localhost:4000/springboot/requestbodyadvisor</id><content type="html" xml:base="http://localhost:4000/springboot/requestbodyadvisor/"><![CDATA[<h2 id="requestbodyadvice">RequestBodyAdvice</h2>
<p>Http Request를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로 RequestBodyAdvice 입니다.
  ArgumentRoslver는 RestController에는 약간의 제약사항이 있으나 RequestBodyAdvice는 그러한 제약사항이 없습니다.
  적용하는 방법은 ArgumentResolver와 유사하자 좀더 상세하고 제어가 가능합니다.</p>

<p><img src="/assets/images/springboot/04-spring-filter-interceptor-aop-resolver-advice.png" alt="filter interceptor aop" /></p>

<h2 id="requestbodyadvice를-상속받아-구현">RequestBodyAdvice를 상속받아 구현</h2>
<p>Http 요청을 했을 때 body 데이터를 제어하고자 할 떄 RequestBodyAdvice를 상속받아 아래와 같이 3개의 Method를 구현해야 합니다.</p>
<ul>
  <li>public boolean supports(MethodParameter methodParameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?» converterType)</li>
  <li>public HttpInputMessage beforeBodyRead(HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?» converterType) throws IOException</li>
  <li>public Object afterBodyRead(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?» converterType)</li>
</ul>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="Advice" /><summary type="html"><![CDATA[RequestBodyAdvice Http Request를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로 RequestBodyAdvice 입니다. ArgumentRoslver는 RestController에는 약간의 제약사항이 있으나 RequestBodyAdvice는 그러한 제약사항이 없습니다. 적용하는 방법은 ArgumentResolver와 유사하자 좀더 상세하고 제어가 가능합니다.]]></summary></entry><entry><title type="html">ArgumentResolver</title><link href="http://localhost:4000/springboot/argumentResolver/" rel="alternate" type="text/html" title="ArgumentResolver" /><published>2023-03-13T00:00:00+09:00</published><updated>2023-03-13T00:00:00+09:00</updated><id>http://localhost:4000/springboot/argumentResolver</id><content type="html" xml:base="http://localhost:4000/springboot/argumentResolver/"><![CDATA[<h2 id="argumentresolver">ArgumentResolver</h2>
<p>Http Request를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로 ArgumentResolver 입니다.
  ArgumentRoslver는 Request 데이터를 가공하여 Constroller에 전달하고 싶을 때 사용합니다.
  제어할 때상으로는 아래와 같은 유형을 대상으로 ArgumentResolver를 적용할 수 있습니다.</p>

<ul>
  <li>적용대상 Controller</li>
  <li>Annotation 이용</li>
  <li>Argument Type 등</li>
</ul>

<p><img src="/assets/images/springboot/04-spring-filter-interceptor-aop-resolver-advice.png" alt="filter interceptor aop" /></p>

<h2 id="handlermethodargumentresolver-상속하여-구현">HandlerMethodArgumentResolver 상속하여 구현</h2>
<p>ArgumentResolver를 이용하여 Http 요청의 데이터를 가공하고 싶을 때는 HandlerMethodArgumentResolver 상속받아 구현하면 됩니다. HandlerMethodArgumentResolver는 아래의 2개의 Method를 구현해야 합니다.</p>

<ul>
  <li>public boolean supportsParameter(MethodParameter parameter)</li>
  <li>public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,
        NativeWebRequest webReq터est, WebDataBinderFactory binderFactory) throws Exception</li>
</ul>

<p>첫번째는 ArgumentResolver를 적용할 대상을 선정하는 부분입니다. 여기에서 대상 Controller나 Annotation인 경우 return 을 true로 반환하면 resolveArgument 가 실행되어 webRequest에서 데이터를 읽어서 원하는 형식의 데이터를 만들어 반환하면 됩니다.</p>

<p>## 예시</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.core.MethodParameter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.support.WebDataBinderFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.context.request.NativeWebRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.method.support.HandlerMethodArgumentResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.method.support.ModelAndViewContainer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.demo.microservices.annotation.Decrypted</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.demo.microservices.util.AESUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.demo.microservices.util.IOUtils</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecryptArgumentResolver</span> <span class="kd">implements</span> <span class="nc">HandlerMethodArgumentResolver</span> <span class="o">{</span>
	

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"supportsParameter:{}"</span><span class="o">,</span> <span class="n">parameter</span><span class="o">.</span><span class="na">getContainingClass</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="nc">Decrypted</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
        		<span class="n">parameter</span><span class="o">.</span><span class="na">getParameterType</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Map</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="nc">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span>
			<span class="nc">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="nc">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
		<span class="nc">HttpServletRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">();</span>
		<span class="kt">byte</span><span class="o">[]</span> <span class="n">rawData</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="nc">String</span> <span class="n">decodingBody</span><span class="o">;</span>
		<span class="nc">Map</span> <span class="n">reqMap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		
        <span class="k">try</span> <span class="o">{</span>
        	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"decodingBody:"</span><span class="o">);</span>
            <span class="nc">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
            <span class="n">rawData</span> <span class="o">=</span> <span class="nc">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"rawData:{}"</span><span class="o">,</span> <span class="n">rawData</span><span class="o">);</span>
            <span class="nc">AESUtil</span> <span class="n">aesUtil</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AESUtil</span><span class="o">();</span>
            <span class="n">decodingBody</span> <span class="o">=</span> <span class="n">aesUtil</span><span class="o">.</span><span class="na">decrypt</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">rawData</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
            <span class="n">reqMap</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">decodingBody</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"decodingBody:{}"</span><span class="o">,</span> <span class="n">decodingBody</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
		<span class="k">return</span> <span class="n">reqMap</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="Resolver" /><summary type="html"><![CDATA[ArgumentResolver Http Request를 제어 또는 가공(Decrpt)할 수 있는 또 하나의 영역중 하나가 바로 ArgumentResolver 입니다. ArgumentRoslver는 Request 데이터를 가공하여 Constroller에 전달하고 싶을 때 사용합니다. 제어할 때상으로는 아래와 같은 유형을 대상으로 ArgumentResolver를 적용할 수 있습니다.]]></summary></entry><entry><title type="html">AOP(Aspect Oriented Programming) 란?</title><link href="http://localhost:4000/springboot/aop/" rel="alternate" type="text/html" title="AOP(Aspect Oriented Programming) 란?" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/aop</id><content type="html" xml:base="http://localhost:4000/springboot/aop/"><![CDATA[<h2 id="aop-개요">AOP 개요</h2>

<p><img src="/assets/images/springboot/04-spring-filter-interceptor-aop-resolver-advice.png" alt="filter interceptor aop" /></p>

<p>AOP 란 관점 지향 프로그래밍입니다. 처음에 관점 지향이라고 하면 쉽게 머리속에 그려지지 않습니다.
개발을 하면서 layer 아래와 같이 Three layer로 구성하여 구현할 때 layer별로 아래와 같은 기능을 처리해야 하는 경우</p>
<ul>
  <li>logging</li>
  <li>security</li>
  <li>에러 공통처리 등<br />
Filter나, Intereptor, AOP를 고려합니다. AOP는 가장 상세하게 처리를 제어할 수 있습니다.</li>
</ul>

<p>다시 본론으로 돌와서 관점지향이란 수많은 트랜잭션이 흘러가고 있을 떄 특정 지점에서 무엇인가 제어하고 싶을 떄 
처리하는 지점을 모듈로 구현하기 쉽게 지원하는게 AOP입니다.</p>

<p><img src="/assets/images/springboot/02-spring-aop.png" alt="aop" /></p>

<h2 id="aop-사용하기-위해서-필요한-것">AOP 사용하기 위해서 필요한 것</h2>
<ul>
  <li>Spring Boot AOP Dependency 추가</li>
  <li>클래스(빈)를 하나 생성하고 @Aspect 어노테이션 추가</li>
  <li>AOP 모듈 구현</li>
</ul>

<h4 id="spring-boot-aop-dependency-추가">Spring Boot AOP Dependency 추가</h4>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-aop<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h4 id="aop-관련-클래스를-만들기위해-클래스빈를-하나-생성하고-aspect-어노테이션-붙이기">AOP 관련 클래스를 만들기위해 클래스(빈)를 하나 생성하고 @Aspect 어노테이션 붙이기</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Aspect</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AspectConfig</span> <span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>

<h4 id="특정-지점을-제어하고자-하는-기능을-작성">특정 지점을 제어하고자 하는 기능을 작성</h4>
<p>아래 코드에서 제어하고자 하는 특정 지점은</p>
<ul>
  <li>모든 constroller의 operation이 실행될 때</li>
  <li>operation 실행되기 전/후에 로그를 출력하는 모듈 
AOP기능으로 가장 많이 사용하는 로그 출력하는 AOP 예제입니다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@Component</span>
<span class="nd">@Aspect</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AspectConfig</span> <span class="o">{</span>
  <span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(* com.demo.microservices.controller.*Controller.*(..))"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">logPrint</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"-------------------------------------"</span><span class="o">)</span>
      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Before Execute Method!"</span><span class="o">);</span>
      <span class="nc">Object</span> <span class="n">proceed</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"After Execute Method!!!!"</span><span class="o">);</span>
      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"-------------------------------------"</span><span class="o">)</span>

      <span class="k">return</span> <span class="n">proceed</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="aop" /><summary type="html"><![CDATA[AOP 개요]]></summary></entry><entry><title type="html">AOP(Aspect Oriented Programming) PointCut</title><link href="http://localhost:4000/springboot/aop-pointcut/" rel="alternate" type="text/html" title="AOP(Aspect Oriented Programming) PointCut" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/aop-pointcut</id><content type="html" xml:base="http://localhost:4000/springboot/aop-pointcut/"><![CDATA[<h2 id="pointcut-의-이해">PointCut 의 이해</h2>
<p>어느 시점(Operation or method)에 AOP 모듈을 trigger할지 정의하는 JoinPoint의 상세 스펙 또는 표현식(Expression) 으로
설명하였습니다. 아래 그림으로 표현하다면 주황색의 내용으로 이해하면 좋을 것 같습니다.</p>
<ul>
  <li>주황색 유형 : JoinPoint</li>
  <li>주황색 표현식(E) : PointCut</li>
  <li>주황색 내용 : Advice</li>
</ul>

<p><img src="/assets/images/springboot/03-spring-aop-pointcut.png" alt="ponintcut" /></p>

<table>
  <thead>
    <tr>
      <th>JoinPoint</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>execution</td>
      <td>메소드 실행 조인 포인트를 매칭한다. 스프링 AOP에서 가장 많이 사용하고, 기능도 복잡</td>
    </tr>
    <tr>
      <td>within</td>
      <td>특정 타입 내의 조인 포인트를 매칭.</td>
    </tr>
    <tr>
      <td>args</td>
      <td>인자가 주어진 타입의 인스턴스인 조인 포인트</td>
    </tr>
    <tr>
      <td>this</td>
      <td>스프링 빈 객체(스프링 AOP 프록시)를 대상으로 하는 조인 포인트</td>
    </tr>
    <tr>
      <td>target</td>
      <td>Target 객체(스프링 AOP 프록시가 가르키는 실제 대상)를 대상으로 하는 조인 포인트</td>
    </tr>
    <tr>
      <td>@target</td>
      <td>실행 객체의 클래스에 주어진 타입의 애노테이션이 있는 조인 포인트</td>
    </tr>
    <tr>
      <td>@within</td>
      <td>주어진 애노테이션이 있는 타입 내 조인 포인트</td>
    </tr>
    <tr>
      <td>@annotation</td>
      <td>메서드가 주어진 애노테이션을 가지고 있는 조인 포인트를 매칭</td>
    </tr>
    <tr>
      <td>@args</td>
      <td>전달된 실제 인수의 런타임 타입이 주어진 타입의 애노테이션을 갖는 조인 포인트</td>
    </tr>
    <tr>
      <td>bean</td>
      <td>스프링 전용 포인트컷 지시자, 빈의 이름으로 포인트컷을 지정한다.</td>
    </tr>
  </tbody>
</table>

<h2 id="참고">참고</h2>
<p><a href="https://velog.io/@gmtmoney2357/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%8A%A4%ED%94%84%EB%A7%81-AOP-%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7-%EC%A7%80%EC%8B%9C%EC%9E%90">SeungTaek</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="aop" /><category term="pointcut" /><summary type="html"><![CDATA[PointCut 의 이해 어느 시점(Operation or method)에 AOP 모듈을 trigger할지 정의하는 JoinPoint의 상세 스펙 또는 표현식(Expression) 으로 설명하였습니다. 아래 그림으로 표현하다면 주황색의 내용으로 이해하면 좋을 것 같습니다. 주황색 유형 : JoinPoint 주황색 표현식(E) : PointCut 주황색 내용 : Advice]]></summary></entry><entry><title type="html">AOP(Aspect Oriented Programming) PointCut 표현식</title><link href="http://localhost:4000/springboot/aop-pointcut-detail/" rel="alternate" type="text/html" title="AOP(Aspect Oriented Programming) PointCut 표현식" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/aop-pointcut-detail</id><content type="html" xml:base="http://localhost:4000/springboot/aop-pointcut-detail/"><![CDATA[<h2 id="pointcut-의-표현식">PointCut 의 표현식</h2>
<p><strong>리턴타입  패키지경로  클래스지정  메소드지정</strong></p>

<p><strong>예시)</strong></p>
<ul>
  <li>execution(* com.demo.microservices..*.*Controller.*(..))</li>
  <li>execution(* com.demo.microservices..*.*Service.*(..))</li>
</ul>

<table>
  <thead>
    <tr>
      <th>JoinPoint</th>
      <th>PointCut Spec</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>execution</td>
      <td>*	com.demo.microservices..*.*Controller.*(..)	)</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>리턴타입</th>
      <th>패키지</th>
      <th>클래스명</th>
      <th>매소드명</th>
      <th>매개변수</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>*</td>
      <td>com.demo.microservices..*.</td>
      <td>*Controller.</td>
      <td>*(..)	)</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p><strong>리턴타입</strong> :</p>
<ul>
  <li>* : 모든 리턴타입 허용</li>
  <li>void : 리턴타입이 void인 메소드 선택</li>
  <li>!void : 리턴타압이 void가 아닌 메소드 선택</li>
</ul>

<p><strong>패키지경로</strong> :</p>
<ul>
  <li>com.demo.microservice : 지정한 패키지만 선택</li>
  <li>com.demo.microservices.. : 지정한 패턴의 모든패키지 선택</li>
  <li>com.demo.microservices..controller : 마지막 패키지 이름이 controller로 끝나는 패키지 선택</li>
</ul>

<p><strong>클래스지정</strong></p>
<ul>
  <li>UserController : 지정한 클래스만 선택</li>
  <li>*Controller : 이정한 패턴으로 시작하는 클래스 선택</li>
  <li>Controller+ : 지정한 클래로 파생된 모든 자식 클래스를 선택. 또는 인터페이스로 구현한 모든 클래스</li>
</ul>

<p><strong>메소드</strong></p>
<ul>
  <li>*(..) : 모든 메소드 선택</li>
  <li>update*(..) : 메소드명이 update로 시작하는 모든 메소드 선택</li>
</ul>

<p><strong>매개변수 지정</strong></p>
<ul>
  <li>(..) : 모든 매개변수</li>
  <li>(*) : 반드시 1개의 매개변수를 가지는 메소드</li>
  <li>(com.demo.microservices.model.UserVO) : 매개변수로 UserVO 를 가지는 메소드만 선택</li>
  <li>(!om.demo.microservices.model.UserVO) : 매개변수로 UserVO 를 가지지 않는 메소드를 선택</li>
  <li>(Integer, ..) : 1개 이상의 매개변수를 가지고, 첫번째 매개변수 타입이 Integer인 메소드만 선택</li>
  <li>(Integer, *) : 반드시 2개의 매개변수를 가지고, 첫번째 타입이 Integer인 메소드만 선택</li>
</ul>

<h2 id="참조">참조</h2>
<p><a href="https://sjh836.tistory.com/157">빨간색코딩</a><br />
<a href="http://closer27.github.io/backend/2017/08/03/spring-aop/">어느 개발자의 한적한 공간</a></p>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="aop" /><category term="pointcut" /><summary type="html"><![CDATA[PointCut 의 표현식 리턴타입 패키지경로 클래스지정 메소드지정]]></summary></entry><entry><title type="html">AOP(Aspect Oriented Programming) 예시</title><link href="http://localhost:4000/springboot/aop-examples/" rel="alternate" type="text/html" title="AOP(Aspect Oriented Programming) 예시" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/aop-examples</id><content type="html" xml:base="http://localhost:4000/springboot/aop-examples/"><![CDATA[<h2 id="aop-예시">AOP 예시</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Aspect</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AspectConfig</span> <span class="o">{</span>
	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"@annotation(org.springframework.web.bind.annotation.GetMapping)"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">getMapping</span><span class="o">()</span> <span class="o">{</span>
		
	<span class="o">}</span>
	
	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"@annotation(org.springframework.web.bind.annotation.PostMapping)"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">postMapping</span><span class="o">()</span> <span class="o">{</span>
		
	<span class="o">}</span>
	
	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"@annotation(org.springframework.web.bind.annotation.RequestMapping)"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">requestMapping</span><span class="o">()</span> <span class="o">{</span>
		
	<span class="o">}</span>
	
	<span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"execution(* com.demo.microservices..*.*Service.*(..))"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">serviceExcution</span><span class="o">()</span> <span class="o">{</span>
		
	<span class="o">}</span>
	
	<span class="nd">@Around</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"serviceExcution()"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span>  <span class="n">pjt</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- Around logging Start -------------"</span><span class="o">);</span>
		
		<span class="nc">Object</span> <span class="n">retValue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">retValue</span> <span class="o">=</span> <span class="n">pjt</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"error:{}"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
			
		<span class="o">}</span>

		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"--------------"</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">" return val:{}"</span><span class="o">,</span> <span class="n">retValue</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- Around logging end -------------"</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">retValue</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="nd">@Before</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"serviceExcution()"</span><span class="o">)</span> 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jointPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- Before logging -------------"</span> <span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@AfterReturning</span><span class="o">(</span><span class="n">pointcut</span> <span class="o">=</span> <span class="s">"serviceExcution()"</span><span class="o">,</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">"result"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterRuturning</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- AfterReturning logging -------------"</span> <span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">" result :{}"</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"----------------------------------------"</span> <span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@After</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"serviceExcution()"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- After logging -------------"</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@AfterThrowing</span><span class="o">(</span><span class="n">pointcut</span> <span class="o">=</span> <span class="s">"serviceExcution()"</span><span class="o">,</span> <span class="n">throwing</span> <span class="o">=</span> <span class="s">"e"</span><span class="o">)</span> 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterThrowing</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------- AfterThrowing logging -------------"</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">" throwable :{}"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"----------------------------------------"</span> <span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="aop" /><summary type="html"><![CDATA[AOP 예시]]></summary></entry><entry><title type="html">AOP(Aspect Oriented Programming) 구성요소</title><link href="http://localhost:4000/springboot/aop-2/" rel="alternate" type="text/html" title="AOP(Aspect Oriented Programming) 구성요소" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/aop-2</id><content type="html" xml:base="http://localhost:4000/springboot/aop-2/"><![CDATA[<h2 id="aop-구성요소">AOP 구성요소</h2>
<p>특정지정에 제어하고 싶은 대상에 제어하고자 하는 기능을 구현하는 AOP에 대해 알아보았습ㄴ다.
이번에는 좀더 용어에 대해 상세하게 알아보겠습니다. <br />
AOP의 구성요소는</p>
<ul>
  <li>Aspect</li>
  <li>Advice</li>
  <li>PointCut</li>
  <li>JoinPoint</li>
</ul>

<p>로 되어 있습니다.</p>

<h4 id="aspect">Aspect</h4>
<p>Aspect는 AspectConfig 기능처럼 제어하고자 하는 모듈의 묶음을 의미하며, 이를 위해 어노테이션 @Aspect를 추가합니다.</p>

<h4 id="advice">Advice</h4>
<p>Advice는 특정 지점에서 trigger 되었을 때 실행되는 operation 입니다.<br />
예를 들면 operation이 실행되지는 시점은 다음과 같습니다.</p>
<ul>
  <li>시적전/후 : @Around</li>
  <li>시작전(Before) : @Before</li>
  <li>성공처리 후 : @AfterReturning</li>
  <li>에러발생시 : @AfterThrowing</li>
  <li>처리종료 후 항상 실행 : @After</li>
</ul>

<h4 id="joinpoint">JoinPoint</h4>
<p>JoinPoint는 어떤 Operation을 대상으로 할지 정의하는 것입니다.
Springframework의 AOP는 operation or method 단위로 JoinPoint를 지원합니다.<br />
대표적인 것이 execution, @Annotation 이 있습니다. 이중에서 execution JoinPoint가 가장 많이 사용되고 있습니다.</p>

<h4 id="pointcut">PointCut</h4>
<p>어느 시점(Operation or method)에 AOP 모듈을 trigger할지 정의하는 JoinPoint의 상세 스펙 또는 표현식(Expression)입니다.</p>

<h4 id="기타">기타</h4>
<ul>
  <li>
    <p>Weaving(위빙): Weaving은 애플리케이션의 Design/Runtime 등 시점에 Aspect를 적용하는 것<br />
springframework는 Runtime 시점에 Weaving 합니다.</p>
  </li>
  <li>
    <p>target : Aspect가 적용되는 객체를 의미합니다.</p>
  </li>
</ul>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="aop" /><summary type="html"><![CDATA[AOP 구성요소 특정지정에 제어하고 싶은 대상에 제어하고자 하는 기능을 구현하는 AOP에 대해 알아보았습ㄴ다. 이번에는 좀더 용어에 대해 상세하게 알아보겠습니다. AOP의 구성요소는 Aspect Advice PointCut JoinPoint]]></summary></entry><entry><title type="html">인터셉터(Interceptor) 란?</title><link href="http://localhost:4000/springboot/interceptor/" rel="alternate" type="text/html" title="인터셉터(Interceptor) 란?" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/interceptor</id><content type="html" xml:base="http://localhost:4000/springboot/interceptor/"><![CDATA[<h2 id="인터셉터의-이해">인터셉터의 이해</h2>
<p>인터셉터는 “무엇인가를 가로챈다”라는 의미입니다. Filter가 실행된 이후 인터셉터는 Controller가 호출 전/후에 무엇인가 제어 하고자할 때 사용합니다. 그리고 Filter가 WebContainer에서 동작하는 반면에 인터셉터는 Spring Container에서 동작하는 차이점이 있습니다.
대표적인 사용 목적은 logging과 인증처리에 많이 사용합니다.</p>

<p><img src="/assets/images/springboot/04-spring-filter-interceptor-aop-resolver-advice.png" alt="filter interceptor aop" /></p>

<h2 id="handlerinterceptor를-구현">HandlerInterceptor를 구현</h2>
<ul>
  <li>preHandle</li>
  <li>postHandle</li>
  <li>afterCompletion</li>
</ul>

<h4 id="prehandle">preHandle</h4>
<p>Controller의 메서드에 매핑된 특정 URI가 호출됐을 때 실행되는 메서드로, Controller를 경유(접근)하기 직전에 실행되는 메서드입니다.<br />
Controller를 호출하기전에 동작하는 메소드로 return값이 true이면 진행, false이면 Controller 호출을 중단합니다</p>

<h4 id="posthandle">postHandle</h4>
<p>컨트롤러를 호출 후, 즉 화면(View)으로 결과를 전달하기 전에 실행되는 메서드입니다.</p>

<h4 id="aftercompletion">afterCompletion</h4>
<p>view가 정상적으로 랜더링된 후에 마지막에 실행됩니다</p>

<h4 id="인록셉터-를-사용하기-위해-클래스를-빈bean으로-등록">인록셉터 를 사용하기 위해 클래스를 빈(Bean)으로 등록</h4>
<p>인록셉터 사용하기 먼저 HandlerInterceptor를 상속받아 구현합니다.<br />
구현하는 Method는 위에 3가지 Method이며, Bean으로 등록하기 위해 구현한 클래스에 @Component 어노테이션을 추가합니다.</p>

<h2 id="인록셉터-interceptorregistry에-등록">인록셉터 InterceptorRegistry에 등록</h2>
<p>HandlerInterceptor를 구현 후 WebMvcConfigurer를 상속받아 구현 WebMvcConfigure의 addInterceptors에 등록하고, 
Uri PathPattern을 지정하여 어떤 Uri가 호출될 때 인터셉터를 동학하게 할지 설정합니다.</p>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="Interceptor" /><summary type="html"><![CDATA[인터셉터의 이해 인터셉터는 “무엇인가를 가로챈다”라는 의미입니다. Filter가 실행된 이후 인터셉터는 Controller가 호출 전/후에 무엇인가 제어 하고자할 때 사용합니다. 그리고 Filter가 WebContainer에서 동작하는 반면에 인터셉터는 Spring Container에서 동작하는 차이점이 있습니다. 대표적인 사용 목적은 logging과 인증처리에 많이 사용합니다.]]></summary></entry><entry><title type="html">인터셉터(Interceptor) 예시</title><link href="http://localhost:4000/springboot/interceptor-example/" rel="alternate" type="text/html" title="인터셉터(Interceptor) 예시" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/interceptor-example</id><content type="html" xml:base="http://localhost:4000/springboot/interceptor-example/"><![CDATA[<h2 id="인터셉터의-사용예시">인터셉터의 사용예시</h2>
<p>HandlerInterceptor를 구현한 MyHandler 입니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyHandler</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">LOG_ID</span> <span class="o">=</span> <span class="s">"logId"</span><span class="o">;</span>
	
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">readBody</span><span class="o">(</span><span class="kd">final</span> <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>

		<span class="nc">String</span> <span class="n">reqBody</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"requestBody"</span><span class="o">);</span>

		<span class="cm">/*
		 * reqBody 값을 읽어 임의 처리.
		 */</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"reqBody:{}"</span><span class="o">,</span> <span class="n">reqBody</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		  <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"----------------- preHandle -------------------"</span><span class="o">);</span>
	    <span class="nc">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
	    <span class="nc">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
	    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"logId:{}"</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="no">LOG_ID</span><span class="o">));</span>
	    <span class="c1">//request.setAttribute(LOG_ID, uuid);		</span>

		  <span class="n">readBody</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>

      <span class="k">if</span> <span class="o">(</span><span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(),</span> <span class="s">"POST"</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"req URL: "</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">());</span>
      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>

        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"req QueryString: "</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">());</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"req URL: "</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">());</span>
      <span class="o">}</span>	
		
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span>
			<span class="nd">@Nullable</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"postHandle [{}]"</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span>
			<span class="nd">@Nullable</span> <span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------------------------------"</span><span class="o">);</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"afterCompletion"</span><span class="o">);</span>

    <span class="nc">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
    <span class="nc">String</span> <span class="n">logId</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span><span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="no">LOG_ID</span><span class="o">);</span>
    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"RESPONSE logId:[{}][{}]"</span><span class="o">,</span> <span class="n">logId</span><span class="o">,</span> <span class="n">requestURI</span><span class="o">);</span>
    
    <span class="k">if</span> <span class="o">(</span><span class="n">ex</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"afterCompletion error!!"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
    <span class="o">}</span>	
  
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"------------------------------------"</span><span class="o">);</span>        
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>MyHandler를 WebMvcConfigurer를 구현한  WebMvcConfigure에 등록하고 Uri PathPatttern을 지정합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebMvcConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">DecryptArgumentResolver</span> <span class="n">decryptArgumentResolver</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ResultReturnValueHandler</span> <span class="n">resultReturnValueHandler</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">MyHandler</span> <span class="n">myHandler</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">myHandler</span><span class="o">)</span>
			<span class="o">.</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">"/test/**"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="Interceptor" /><summary type="html"><![CDATA[인터셉터의 사용예시 HandlerInterceptor를 구현한 MyHandler 입니다. ```java @Component @Slf4j public class MyHandler implements HandlerInterceptor { public static final String LOG_ID = “logId”; private void readBody(final HttpServletRequest request) {]]></summary></entry><entry><title type="html">Filter in springboot</title><link href="http://localhost:4000/springboot/filter-using-spring/" rel="alternate" type="text/html" title="Filter in springboot" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/springboot/filter-using-spring</id><content type="html" xml:base="http://localhost:4000/springboot/filter-using-spring/"><![CDATA[<h2 id="spring을-사용한-filter">spring을 사용한 Filter</h2>
<p>Springboot를 이용한 filter를 사용하는 방법입니다.
이전에 GlobalLoggingFilter에서 @Component를 제거하여 이중으로 Bean이 등록되는 것을 피하고, Springboot에서 제공하는 FilterRegistrationBean 사용하여 Bean으로 등록합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GlobalLoggingFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span>
			<span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"-------------------전 처리-------------------"</span><span class="o">);</span>
        <span class="nc">ContentCachingRequestWrapper</span> <span class="n">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ContentCachingRequestWrapper</span><span class="o">((</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">request</span><span class="o">);</span>
        <span class="nc">ContentCachingResponseWrapper</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ContentCachingResponseWrapper</span><span class="o">((</span><span class="nc">HttpServletResponse</span><span class="o">)</span> <span class="n">response</span><span class="o">);</span>

        <span class="c1">// 전처리</span>
        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">res</span><span class="o">);</span>
        <span class="c1">// 후처리</span>

        <span class="nc">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">reqContent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getContentAsByteArray</span><span class="o">());</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"request url : {}, request body : {}"</span><span class="o">,</span> <span class="n">url</span><span class="o">,</span> <span class="n">reqContent</span><span class="o">);</span>
        
        <span class="nc">String</span> <span class="n">resContent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="na">getContentAsByteArray</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">httpStatus</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="na">getStatus</span><span class="o">();</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"response status : {}, response body : {}"</span><span class="o">,</span> <span class="n">httpStatus</span><span class="o">,</span> <span class="n">resContent</span><span class="o">);</span>
        
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"-------------------후 처리-------------------"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.servlet.Filter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.boot.web.servlet.FilterRegistrationBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.demo.microservices.filter.GlobalLoggingFilter</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="o">{</span>
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">FilterRegistrationBean</span> <span class="nf">logFilter</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="n">filterRegistrationBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;&gt;();</span>
		<span class="n">filterRegistrationBean</span><span class="o">.</span><span class="na">setFilter</span><span class="o">(</span><span class="k">new</span> <span class="nc">GlobalLoggingFilter</span><span class="o">());</span>
											
		<span class="k">return</span> <span class="n">filterRegistrationBean</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Jaeguk Yun</name></author><category term="springboot" /><category term="aop" /><category term="filter" /><category term="interceptor" /><summary type="html"><![CDATA[spring을 사용한 Filter Springboot를 이용한 filter를 사용하는 방법입니다. 이전에 GlobalLoggingFilter에서 @Component를 제거하여 이중으로 Bean이 등록되는 것을 피하고, Springboot에서 제공하는 FilterRegistrationBean 사용하여 Bean으로 등록합니다.]]></summary></entry></feed>